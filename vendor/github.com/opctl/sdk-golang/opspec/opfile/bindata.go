// Code generated by go-bindata.
// sources:
// github.com/opctl/specs/opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpctlSpecsOpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7b\x73\xdb\x36\xf2\xff\xe7\x53\xec\xa8\xe9\xaf\xf6\x2f\x91\x64\xa7\x4d\xda\xba\x93\xc9\xb8\x49\x7a\x97\x9b\xe6\x31\xcd\xe3\x66\x6a\x3b\x19\x88\x84\x2c\x34\x24\xc0\x80\xa0\x1f\xbd\xcb\x77\xbf\x21\x40\x52\x14\x09\x80\x10\x1f\x96\x9d\xc8\xff\x24\x22\x17\xcb\xc5\xbe\xb0\x58\x2c\x80\xff\xdc\x02\x18\xdd\x8e\xbd\x05\x0e\xd1\xe8\x00\x46\x0b\x21\xa2\x83\xe9\xf4\xaf\x98\xd1\xb1\x7a\x3a\x61\xfc\x74\xea\x73\x34\x17\xe3\xbd\x1f\xa7\xea\xd9\x37\xa3\xbb\xb2\x1d\xf1\xf3\x36\xf1\xc1\x74\xca\xa2\x38\xc2\xde\x84\xb0\xe9\xde\x64\x7f\xf2\xe3\x94\x45\x93\xcb\x30\x98\x64\x68\x52\x94\xaa\x99\x20\x22\xc0\x69\x43\x05\xa0\x1e\xfa\x38\xf6\x38\x89\x04\x61\x34\x7d\xf5\x04\xcf\x09\xc5\x31\x20\x0a\x2c\x52\x10\x11\x67\x11\xe6\x82\xe0\x78\x74\x00\x29\xdd\x00\x23\x8a\x42\x5c\xfc\xaa\x63\x79\x81\x42\x0c\x6c\x0e\x62\x81\x73\x34\x12\x4c\x5c\x46\x92\x80\x58\x70\x42\x4f\x47\xf2\xf1\x67\xf5\xb6\x82\xc2\x84\xf9\xc9\xf2\xa7\xee\x03\xb7\x39\x9e\xa7\x60\xdf\x4c\x97\x54\x4f\x09\x8d\x12\x11\x4f\x23\x24\x04\xe6\xf4\xd5\xf2\xc5\xb7\xf7\x7f\x1d\x7f\x98\xa0\xf1\xdf\x87\xe3\x3f\xf7\xc6\x3f\x7f\x7b\xff\xc9\xb7\xf7\x7e\x2d\xb7\xf4\x09\x5f\xf9\x59\xa2\x65\x85\x76\xf5\x85\x32\xd9\xc8\xf7\x49\x0a\x87\x82\x57\x65\xf6\xcd\x51\x10\xe3\xbb\x86\xbe\xbd\x42\x1c\x85\x58\x60\x9e\xf6\x6c\x29\x00\x09\x5a\x23\xbe\xf4\x31\x80\xd1\x51\xb9\x1f\x27\x77\x56\x5e\x02\x8c\x18\xc5\x2f\x53\xbe\x1c\x95\x1e\xc2\x0a\x88\x04\xe3\xf8\x53\x42\x38\xf6\x6b\x90\xaa\x4b\x9c\xa3\xcb\x51\xe5\xf9\xc9\xca\xef\xcf\x77\xbb\x7c\x60\xc6\x58\x80\x11\x1d\xf2\x13\x3e\xe1\x43\xa2\x9f\x93\x00\x0f\x89\x9f\x26\xe1\x0c\x0f\xda\x03\x36\xfb\x0b\x7b\x62\xc8\x2f\xc4\xcc\xfb\x88\x87\xfd\x42\xc9\xbb\x18\xbf\x50\xfa\x75\x52\xfe\x9a\xce\xdd\x15\xef\x94\x09\x54\x1f\x3b\x9a\x7b\x01\x5c\xf8\x61\x89\x4e\x5a\xfd\xa8\x06\x54\xf1\x0d\x87\x29\x28\x44\x66\x0f\xe1\x42\xbf\x06\x71\x1d\xe0\xea\xbd\xe8\x8a\x5c\xaa\xfd\x91\x14\xcf\x51\x12\x08\x13\xb5\xf9\xa0\xa2\xf5\x4f\x7a\x8c\x24\x7e\x8d\x3d\x8e\x8d\x28\x2b\xcc\x7f\xa6\x06\x1a\xf9\x01\x20\x31\xc4\xaa\x71\x1d\x71\x89\x1a\x83\x33\xd3\xd3\xe3\x31\x1a\x0b\x8e\x08\x15\x7a\xa1\xd5\x94\xe6\x71\xa9\x81\x95\x8c\xcc\x9e\xb5\x30\x0d\x9a\x02\xab\x8a\xfd\x4c\xe0\xd0\x0c\x58\x67\xda\xbf\x5e\xbf\x7c\x01\xaf\x65\x0c\x02\x47\x15\x34\xf0\x11\x5f\x9e\x33\xee\x9f\xec\xe4\x31\x8c\x60\x2c\x88\x27\x04\x8b\xb9\x8c\x7b\x16\x22\x0c\xb2\xe0\xe7\x9c\x93\xd3\x85\x18\x97\x22\xa3\xf1\x19\x0a\x88\x8f\x52\x7c\xe3\xbd\xfd\x6f\x62\xec\xc9\xff\x3e\x98\xec\xef\xed\x6a\x7b\x0a\x03\x28\xb5\x62\x6c\xf9\x49\x49\x88\xe5\xc7\xa5\xff\x6a\xbd\x84\x96\x5e\x8d\x92\xc8\x4e\x90\x2e\x42\x20\x03\xb2\xfe\x67\x0b\xe7\x11\xbd\xd4\x44\x1f\xe5\x3f\x53\x77\x6e\x9e\xe0\x2c\xc2\x6b\xec\x68\x93\x70\x6f\x2a\x3f\x56\x47\x5b\xb7\x37\x27\x6b\x99\x45\x88\x2e\x3a\xb9\xa7\xbc\x7d\x8f\xc6\xb1\x57\x18\xc7\x7d\xbb\x5f\xca\x3d\x35\xa1\x02\x9f\x62\x6e\x06\x0c\x09\x25\x61\x12\x8e\x0e\x60\x6f\x3d\xe6\x10\xda\x8d\x39\x59\xfb\xa1\x98\xb3\xbf\x49\xe6\x24\x94\x7c\x4a\x70\x27\xfe\x94\x50\x0c\x35\xae\x7d\xef\xc0\x22\x63\xc0\x01\x06\x33\xd3\xb2\xc4\x1a\xc9\xd6\x63\x99\x5b\x0d\x28\xab\x71\x88\x2d\xca\x2f\x7a\xd0\x5b\x7c\x9d\x21\x74\x8b\xb0\x7f\x55\xc0\xdb\x18\xdb\x21\x20\x7e\xa2\xa0\xe1\x0c\x05\x09\x6e\x1b\x07\xf7\xaa\x3b\xe9\xc4\xbe\x37\xbd\xf1\x09\x77\xd3\x99\x27\x84\x63\x4f\x30\x7e\x65\x33\xb3\x82\xc4\x10\xf1\x8f\x3e\x3b\xa7\x7a\xe6\x57\xc8\x7c\x9e\x01\x03\xa1\x70\x74\xb6\x37\xb9\xf7\x13\x3c\x66\x61\xc8\x68\xfa\x02\xe2\x4b\x2a\xd0\x85\x72\x59\x07\xd3\xa9\xcc\x25\x7a\xf2\x75\xfa\x11\xe9\xb6\xd2\x26\xd3\x5d\x20\xd4\x0b\x12\x9f\xd0\x53\xf8\xc7\x6f\xcf\x41\xa0\x59\x80\x01\x5f\x08\x4c\x63\xc2\x0c\x94\xe8\x32\x7e\x16\x39\x42\x47\x5d\xfc\x25\xe5\x3d\x9a\xc5\x2c\x48\x04\x86\x08\x89\x05\x70\xc6\x04\xf6\x01\x09\xf0\x09\x07\x8f\x51\x81\x08\x4d\xfb\xa0\xb2\xa0\xc0\xf8\x5d\x40\xc0\x71\x80\x04\x39\xcb\xda\xa4\xc3\x0d\x8f\x38\x4e\x1b\xce\x39\x0b\xe1\x7c\x81\x39\xce\xb2\x8d\x72\x06\x28\x10\x17\xd8\xef\xaf\xcf\xed\x66\xa4\x7e\xa1\x7f\x9d\x67\xa5\xbd\x5a\xa3\xcc\x83\xf5\x66\x8e\x29\x36\x37\x7b\xfc\x8d\x04\x78\xeb\xc0\xb7\x46\xa3\xef\x74\x66\x34\xa9\x3a\x5d\x33\x7b\xc9\xf2\xba\xbd\x59\x8c\xc2\xe7\x66\x33\x2f\x24\xec\xd6\x6a\x6c\x6a\xa0\xcf\xbb\xf7\xa9\x94\xea\x0b\x1b\x4f\x2e\x2a\x32\xae\x2e\xbb\x18\x04\x32\x33\xd4\x2e\xa7\x98\x36\x1e\x68\x52\x7a\xef\x9e\xc3\x8c\x4b\x25\x9c\x8d\x60\xcd\xe9\x9c\xbe\xad\x41\x49\xcf\x90\xca\x31\xe5\x67\xf4\x19\x18\xd3\x7c\x39\xcf\xe5\xb5\x93\x58\xda\x78\x28\x89\xb9\xcc\x91\xbf\x46\x89\x61\x2a\xd3\x22\xad\x04\x96\xb6\x1d\x4a\x5e\x2e\x39\xb1\xee\xf2\x6a\xf2\xe0\x19\xef\xd6\xe2\xe8\x9c\xf1\x10\x99\xfc\xbb\x84\xd0\xaf\xb7\x97\xff\xac\x89\xe0\xc2\x1d\x37\xa5\xbd\x40\x23\xc0\x3f\xd4\xda\x68\x5c\x1e\x56\x66\x38\x1d\xd2\x9d\xb0\x55\xe2\x30\x2b\x6c\xa6\x5a\xe6\x5e\x4a\xa8\xfc\xb3\x16\x28\x7d\xb6\x17\xfa\xcc\x0f\x67\xd9\xc1\xb6\xe9\xe1\xb4\xf9\x50\x96\xe0\x60\x08\x36\xf5\xb5\xe4\x7d\x3b\x75\x5a\x35\x1f\xa8\xd3\x3f\x0c\xd5\xe9\x24\x10\x24\x0a\x70\xfb\x41\x6a\x89\x61\xa8\x84\xf7\x40\x5d\xa7\xcc\xea\x93\x6c\x7d\xa6\x4c\x0c\xa5\xdc\xf7\xaf\x6e\x49\xb6\xc5\x60\x6a\xe2\x65\xee\xc0\x5b\x71\x53\x36\x1e\x8a\x9f\x2e\x86\xf3\x45\x87\x39\x9a\xa7\xd7\x6e\x25\x23\x83\xe9\x6d\x3e\xaf\xf0\xb9\xcd\xe7\x5f\x4a\xd8\xed\x7c\xde\x61\xde\x3a\xe0\x7c\x5e\x7d\x61\xe3\xf3\x79\x45\xc6\x06\xaa\x85\x0c\x85\xaa\x76\xde\x19\x4a\x86\x96\xb8\xd6\x71\xaa\x0b\x44\x7d\x8e\xcf\x63\x07\xb7\xfa\x60\x72\x7f\xf2\xc0\xe2\x57\xbb\x86\xf3\x2e\x2b\xb4\xd0\xa1\x70\xe4\xc6\x55\x84\xf4\x13\xd5\x6f\xb3\x47\x57\x27\xf6\x6d\xf6\xe8\xeb\x94\x98\x8f\x23\x4c\x7d\x4c\xbd\x0e\x9e\xbc\x8c\x63\xa8\x39\x95\xad\xfe\xb0\xa3\xfb\xbe\x79\xde\x75\xd8\xfa\xc3\xa6\x95\xba\x12\x21\x03\x0f\x00\xdb\xd4\x66\x43\xf6\x6d\x44\x93\x20\xb0\xe7\xf0\x4c\xa1\x70\xfe\x67\x4a\xcd\xad\xe7\x46\x42\x74\xd1\x3d\x22\x5c\x41\x32\x94\x23\x71\x19\x08\x86\x2c\xd5\xec\x81\x4d\x65\x24\x43\xb1\xc9\x25\x0d\x31\x18\x9b\xbe\xfa\x4c\x57\x8b\x81\x7f\x9b\xe9\xba\xae\x92\x59\xd7\x97\x3a\x4c\xc4\x1b\xc4\x16\x0d\xee\x1e\x6c\xb3\x69\x87\x64\x03\xb4\x48\x26\x94\xd3\x1e\xe9\x27\x9a\x92\x1e\x7a\x3e\x2d\xf7\xe0\x7a\x6e\xed\x9b\x37\xb7\xd8\xa3\x2e\x57\x81\x1a\x08\x6e\x02\x6f\x0c\xcd\x8b\x77\xbd\xaa\xc0\x03\xdb\x2a\x47\x89\x36\xf7\x58\x12\xec\x81\x6d\x8e\x2f\xd3\x80\x8e\x6c\x91\x68\xbe\x0c\x86\x28\x7c\x5d\xf9\x71\x19\xf5\xcb\x8e\xfb\x93\x7b\x6b\xf1\xc3\xbe\xc4\x9c\xc1\xda\x07\x83\x15\x50\x37\xf6\xda\x16\xa6\xd5\x5f\xb3\x00\xce\x39\x11\xf8\x25\x0d\x74\xdb\x86\x35\xe0\x36\x29\x14\xa8\x7a\x4e\x7f\xee\xef\x4d\x2c\x51\x6f\x89\x38\xe7\x44\x66\xc6\x1c\xeb\x7b\xdb\x5b\x2b\x5b\xaf\x76\x7b\x9c\x54\xaa\x35\xc7\xf3\x6b\xd6\x85\x56\xab\x6f\xd7\xac\x0f\xad\xe2\xaa\x6b\xd6\x07\xe5\x74\xda\xf4\x61\xe0\xd9\xb9\xfd\x70\x91\x0a\xb0\x35\xb0\xac\x22\x1a\x2a\xbe\xfc\x71\x23\xf1\xe5\x0d\xcb\x04\xae\xa7\x04\xa5\x33\x35\x5a\xc9\x3e\x6f\x3f\x94\xc8\x6d\xd3\xeb\xfe\xeb\x05\xed\x01\xc2\x0d\x2e\x4d\xc8\x8e\x5f\xe9\xad\x34\x41\xe1\x73\x2b\x4d\x78\x2d\x61\xbf\xd2\xd2\x84\x76\x75\x04\x8a\xbd\xd7\x6c\xbb\x4a\x66\x1c\xfd\xe9\x90\xc4\xe7\xa8\x43\x12\xf6\x2b\xd5\x21\xc7\xf2\x96\xe1\xf7\x50\xa9\x2f\x6c\xbc\xbc\x45\x91\xb1\xdd\xae\x72\x33\x0b\x0e\x5a\xc5\xc3\xdb\x82\x83\x02\xec\x8b\x94\xd8\x76\x4d\xb7\x75\xf8\xd9\x7a\xbb\x4a\x75\x88\x4d\x22\xcc\x63\x2c\xd2\xa1\x75\x85\xbf\x0a\xd3\x20\x1c\xb6\x4d\xe8\xfa\xda\x4d\xe3\x23\x81\xc7\x82\x84\xfa\x13\x2b\x4c\xdc\x58\xcd\x97\xe7\x28\x40\xf1\xa2\x5f\x1e\x4c\xbe\x6f\xca\x12\x0f\xb0\x3d\x67\xc9\x15\x0b\x9c\x65\x83\x4e\xcb\x62\x93\xa5\x54\xd2\x08\x97\x8f\x49\x88\x4e\xf1\x38\x75\x57\xeb\x08\xe7\x10\x54\x73\x90\xcd\x81\xe3\x39\xe6\x98\x7a\x18\x50\x0c\xbe\x3c\xca\xd6\x87\xd9\x25\x1c\x9d\x12\xb1\x48\x66\x13\x8f\x85\x53\xd5\x60\xea\x93\x94\x85\xb3\x24\xc5\x34\x2d\xda\x2d\xe5\xd9\xd0\x42\x70\x8c\xf3\x17\xfb\x93\xfd\xef\x97\x28\xae\x5e\x80\x55\x06\x6e\x46\x8e\x38\x44\xa4\xa1\xd6\xc4\xea\xbb\xd3\xe6\x43\x59\x95\x25\x3c\x82\x61\x84\xa2\xb8\xb1\x19\x49\x2c\x58\x2c\xe4\x01\xcd\xad\x85\x91\x63\x18\x4a\x1e\x0d\xcb\x0d\x03\xc8\xa3\xe0\xc9\x66\x44\x42\xa2\xb3\x1f\xda\x8b\x23\x6d\x3d\x94\x28\x2c\x55\x16\x30\x8c\x28\x24\x2f\x36\x26\x86\x07\x9d\xc4\xf0\x60\x28\x31\x58\xb2\x9b\x30\x98\x18\x1e\x6c\x48\x0c\x09\x27\xed\xa5\x90\x70\x32\x94\x10\x2c\x55\x2b\x30\x8c\x10\x52\x4e\x6c\x46\x06\x31\x0e\xcf\xd6\xdc\x59\x7e\x08\x31\x0e\x11\x15\xc4\x83\x33\xcc\x63\xc2\x68\x35\xcc\x52\x48\x53\x19\x2c\x8f\x13\x2b\x1e\x4d\xaf\x9c\xbb\x59\x1f\xdb\x31\xd8\xf0\x66\xed\x8d\xe7\xbf\x63\x7a\x2a\x16\x1d\x6a\x5e\x15\x82\x81\xe6\xb5\x2e\x85\x5a\x6b\xd4\x71\xee\xaf\xc7\x1d\x42\x3b\x72\x27\x47\x30\x10\x77\x5c\x96\x19\xd7\xa9\x72\x35\xc2\x2c\x13\xbb\xdb\x4a\xd8\xa1\x33\x52\xdb\x4a\xd8\xeb\x2a\x99\x96\x75\x0b\x1d\xab\x15\x06\x92\xda\x4f\x0e\x42\x6b\x18\xea\x96\xa9\xbb\x11\xc7\xa7\xf8\xe2\x26\x9d\xed\x7b\xcb\xd0\xd2\xd8\x2a\x6f\x51\x40\x6b\x21\xf3\x1b\x77\x58\x22\xaa\x57\xee\x58\xf4\x77\xb5\x2d\x4f\x68\xd7\xab\x7a\x0e\x21\x26\xf4\x34\xc0\x40\x99\x5f\xdc\x74\x74\xe4\xa1\x20\x80\x53\x8e\xa2\xc5\x52\x97\x30\x9d\x9c\x93\x8f\x24\xc2\x3e\x51\x57\x3a\xa5\xbf\xa6\x8f\x51\x10\x7c\x90\x90\x4b\x2d\xd1\xe4\x39\xcb\x6a\x6d\xbe\xf4\x64\x94\x9d\xcf\xb8\x1a\xea\x2c\x03\x95\x12\xff\x1d\x11\xb2\xa8\x2f\x4c\x11\xe2\x28\x08\x70\xd0\x17\xbe\x18\x73\x82\x4c\xd8\xb2\xff\x15\xf7\xb9\x98\x16\xf5\x4a\x0c\xab\x5c\x94\x54\x84\xc7\x05\x44\x2a\xa9\x91\x4d\x81\x57\xde\xd9\x2e\x8f\xf1\x42\x5d\x6d\x4d\x55\xb3\x1e\xb3\x30\x44\xd4\x07\x9e\xd0\x34\xa4\x46\x50\x50\xf2\x0b\xb0\x33\xcc\x39\xf1\xe5\xf5\x5c\x97\x10\x63\x01\x48\x48\xcd\x53\xd9\xcf\x00\x9f\xe1\x7a\x06\xae\x61\x84\xb0\x8c\x0c\x55\xd2\x9e\x5e\x44\x1c\xc7\x32\xee\xf7\x18\xe6\x1e\x99\x05\x18\x04\xcb\x17\x83\x4d\x87\x41\xeb\x0d\x93\x27\x74\xa5\x16\x2a\x9a\x4a\xf5\x9f\xee\x75\x18\x7d\x14\x86\xfd\xaa\x9b\x5c\xf5\x64\x9a\x93\xa3\x75\xdd\x6f\x5a\x34\x36\x1d\x05\x4d\x70\x0c\x84\x4a\xa9\x2c\xb5\xac\x5e\x9a\xe0\x54\x71\x37\x7a\xbf\x73\xa4\xfa\x78\x72\xb0\xfb\xe8\x68\xfc\x61\x72\x7c\x3c\x2d\x5d\xf3\x75\xdb\xb4\x40\x6e\x5f\x31\x71\x1d\x2c\x77\xce\x49\x10\xc0\x0c\xc3\x8c\x25\xd4\x97\x92\x46\x61\x71\xd8\x2b\xb0\xc8\xe9\x20\xa3\xc0\x90\x06\x35\x0c\xea\xae\xc4\x99\x94\xd1\x27\x5c\x69\x22\xfc\xdf\x94\x71\x88\x3d\x16\xc9\x75\x01\x49\x3e\x16\x90\x44\x8c\x02\xbe\x20\x96\xc2\xc0\x4d\xeb\x6b\xc6\x1f\xcd\xd3\xfa\xe4\xb3\x79\x94\x76\x1e\xf4\xab\x86\x81\xe9\xd9\x3b\xd4\x8b\x6d\x3c\xa5\x67\x84\x33\x1a\x62\x2a\xe0\x0c\x71\x82\x66\x41\xaf\x56\x72\xf4\xfe\xe1\x06\x8c\x81\xd0\x92\x76\x9d\x4f\x95\x71\x50\x14\x5a\x56\x80\x36\x67\x16\x0d\x3e\x3a\x43\xb6\xd5\x7c\xd9\x70\x4e\x02\xad\xae\xad\xab\xf7\xbf\x91\x7e\xf5\x7c\x3b\x1a\x98\x88\x33\xa9\xbd\x3c\xeb\x7b\x3b\x1c\x94\x7a\xd3\xda\x28\x64\x8c\xd9\xc6\x28\x9a\xca\x30\x15\x7b\x5d\x8a\x0f\xff\x28\x96\xf7\x05\x93\x07\x9a\x4a\x92\xb4\x53\xdd\xcd\x0b\x4d\x57\xdb\x18\x25\x41\xf0\x98\x63\xdf\x58\xd9\xd8\x9e\xec\x25\xea\x16\x4a\x61\xbf\x4f\x53\x53\x53\x70\xd2\x9f\x5e\x55\xae\x12\x2e\x9e\xeb\xae\x14\x5e\xf1\xa3\xe0\x21\x9a\xfa\xa3\xa2\xf2\x42\xae\x41\xc8\x9b\x07\x98\x58\x60\xbe\x84\xac\x97\x85\x5a\x0b\xad\xaa\x14\x46\x8c\x6b\x6b\x51\x6b\x7b\x87\x53\xb8\xcc\x3d\x4a\x32\x56\xc9\x15\x4c\x3e\x58\xb0\x58\x63\x24\x8d\x46\xe4\x36\x44\x1c\xc9\x91\x60\x67\xac\xfe\xdd\x7d\xb4\x23\xbc\xe8\xbf\x89\x1f\xed\x3e\x72\x34\xb1\x7f\xb2\x58\x40\xda\xe1\x9d\x78\x37\xa5\x78\x46\xa4\xaf\x77\xba\xb3\x41\x5f\x57\x5b\xe4\xe8\x6a\xc4\xb5\xd1\xd4\xd6\x6a\xa6\x0a\xe9\x5b\x8d\xea\xae\xbc\x3f\x30\xdf\xc0\x5c\x00\xd5\x66\xfb\xb9\x76\x64\x85\xfe\xc8\xf7\xd3\x81\x0c\x42\x14\x45\x58\x8e\xb2\x28\x7f\x65\xaa\x8d\x6a\x2e\xfb\x1e\x90\xab\xc2\x7f\xca\xb5\x17\x57\xf4\xc4\xd4\xf7\x13\x73\x5c\x63\xe6\xa5\xf0\x31\xe7\x10\x71\x3c\x27\x17\xab\xac\x54\x61\xf0\x80\xac\xf4\x71\xc4\xb1\x87\x84\x74\xa6\x82\x27\xf5\x6d\x0f\x5d\x98\xfd\x32\xd1\x6e\xdd\xd9\x30\xb3\x59\x22\xbe\x38\x66\x9f\x33\xfe\xf1\x89\xfe\x52\xb1\x0a\x2b\xfe\xcd\xf8\xc7\xb4\x9f\x7e\xe9\x32\x30\xb1\x80\x9d\xd5\x6c\x5d\x69\x99\x5c\x86\x2d\xf5\x68\xd9\x3e\x26\xdd\x32\x90\x6a\xc9\x95\xaa\xf0\xa8\xf4\x6c\xf5\xa2\x6b\x27\xd6\x94\xbe\x35\x22\xd5\x38\xad\x36\x00\x72\xec\x93\x54\x1c\x31\x9c\x2f\x88\xb7\x80\x30\x89\x05\xa0\x20\x00\x9c\xc6\xe0\x48\xc8\xc0\x2d\x95\x93\x3e\xa3\x5a\xcf\x50\x1a\xb2\x93\x1a\x6d\x54\x7d\xc9\xbe\x9b\x7f\x2e\xce\xbf\x07\x8c\xab\x8e\x55\xb8\x6e\x9c\x1b\x69\xe3\x54\x4b\x90\x04\x30\xc2\x9f\xea\x2a\x5c\x8d\xd0\x6b\x2a\xdc\xe2\x3b\x54\x53\xc4\x56\xfb\xce\xca\xef\x93\x6a\x40\x63\xf3\x03\x69\x3f\x5c\xb2\xc1\x6f\x52\xb6\x92\xb9\x14\xaf\xba\x59\x18\x71\x0c\xf8\x53\x82\x74\x55\xa0\x8d\xeb\x94\xd6\x15\xca\xde\xb2\x1c\xd7\x61\x5e\xd0\xe8\xd5\xa8\xfe\xc4\x0e\xa3\x00\xe8\xe5\x52\x00\xf4\x3b\xb1\x95\xc1\xfa\x32\xb0\x0e\x05\xe6\x75\xce\xcf\x5a\x3f\xc9\x22\xe3\xb2\x12\x8b\xea\xeb\x49\x7a\x17\xd4\xfb\x34\x3b\x5b\x09\x75\xdc\xe6\x47\x89\x20\x28\x20\x7f\xe3\x18\x9e\xbd\x78\xf5\xf6\xcd\x87\x17\x87\xcf\x9f\xaa\x59\xcd\xbb\xc3\xdf\xdf\x3e\x05\x42\xb3\x2a\x3c\xf8\x6e\x09\x70\xa0\x5e\x7e\x37\x81\x67\xf3\x1c\x2e\x06\x9a\x04\xc1\x5d\x20\x02\x9e\xbf\x7d\xfd\x46\xde\x45\x12\xc7\x49\x88\xfd\x0c\xe2\xe1\x43\xb8\xbd\xb3\xc4\xa1\x4f\x23\xb9\xed\xe1\x73\x3e\xc7\x60\x74\x54\x56\x17\x63\xb8\x6e\x91\x4f\xf9\xcf\xe9\xf4\x67\x73\xee\x0b\x3a\xd4\xf3\x99\x8d\x52\x33\x12\xa2\x86\xfc\x6f\x99\xde\x86\xd2\x3a\x97\xb3\x76\x8a\x7d\x9f\x0d\x60\xd9\x65\x17\x0d\x50\x0d\xc7\x39\x64\x50\xcd\x07\xfb\xf4\x56\xf2\xa7\x79\xda\x47\xd9\x85\xc6\x2d\xd7\x8b\x1d\x56\x5e\x5b\x6c\x77\x69\xb5\x2f\xdf\xbe\x29\xcc\xb8\x64\xbb\xca\x6a\x4b\x2f\x95\xed\xae\x40\x5b\x2c\x58\x02\x3c\x7c\x58\x86\xdf\x9a\x6f\x0b\xec\x4d\x6a\x7b\x6d\x55\xb3\x31\xa3\xe9\x22\xf8\x6a\x34\xcf\xb1\x8f\x69\xaa\xc3\x31\x24\x31\xf6\xc1\x4f\x64\x48\x81\x12\xb1\x48\x9f\x7b\x48\x85\xfa\x44\x2c\xb2\x33\x12\x12\xee\xe1\xec\x20\x00\x55\x0a\xc1\xb8\xee\x44\x00\x70\x18\x27\x25\x4c\x12\x63\x6e\xc8\x4b\x9a\x88\xfe\x22\x16\xde\x8c\x75\x76\x71\x7c\xce\xf8\x3a\x47\xc3\x7c\x11\xec\x70\x36\xa3\x86\x29\x5b\x59\xa3\x9a\x58\xac\x79\x5d\x4b\xb6\x43\x2f\xa6\xdb\x7e\xdd\xc5\x64\x5a\x2e\xf9\xe0\x65\x49\x63\xc2\xc9\xb8\xc8\xdd\xdf\xb0\x55\x8b\x16\x2b\xc3\x4d\x99\xaa\x6e\xf1\x7b\x57\x8b\x71\x5b\xbf\x6a\x08\x44\xda\x13\x91\x23\x76\x1b\x73\x3e\xea\xce\x9e\x01\xe7\x30\xc3\x61\x00\x30\xdb\x06\xb4\xb7\x0f\x70\xb4\x11\x58\xcb\x4e\xc0\xe6\xb8\x1b\x46\x67\xe8\x26\x35\xcb\x9a\x23\xf4\xec\x3f\x0d\xfb\x9a\xfb\x70\x8d\x1d\xfd\x4c\xaa\x8d\x3d\xfa\x99\xd2\x2f\x6d\x9d\xec\xb2\xa2\xd6\x94\x63\xc8\x01\xcc\x95\xab\xee\x79\x56\x93\x6e\x34\x27\x41\xb2\x42\x5d\x13\x91\xea\xf5\x06\x48\xbc\x55\x21\xb5\x54\xf2\x8b\xf2\x08\x3f\x2f\x14\xcf\x76\xb9\x95\x8b\xc5\x2b\x96\xff\x2e\xdb\x07\x97\x55\x80\x97\x0c\x5f\x4f\x17\x8b\xe2\x08\x7b\x95\x52\x76\xf5\xcc\xe9\x23\x47\x0a\x78\x59\x5e\xae\x7e\x4f\x08\xdb\x55\xa1\xf2\xec\xb2\x46\x48\x79\xcb\xdf\xbb\xd2\x3c\xdb\xe4\x8a\xca\x4b\xb6\xef\x77\xb2\xc5\xda\xe3\xe3\x89\xe6\xbf\x3b\x8f\x0e\x76\x8e\x8f\xe5\x82\xee\xe1\xf8\x4f\x34\xfe\x7b\x7c\x72\x67\xe7\xd1\xc1\xf1\xf1\x64\xe5\xd1\xee\xff\xef\xee\x3e\x92\xcf\xef\x94\x9e\x1f\x1f\x8f\x8f\x8f\x27\x27\x77\x76\x1f\xdd\xce\x18\x72\x2b\x63\x4a\xdd\xe2\x46\xf9\xde\x6d\x69\x5a\x76\x73\xfa\xfc\xbf\x00\x00\x00\xff\xff\x9c\x46\xdb\x68\x5c\x99\x00\x00")

func githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpctlSpecsOpspecOpfileJsonschemaJson,
		"github.com/opctl/specs/opspec/opfile/jsonschema.json",
	)
}

func githubComOpctlSpecsOpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opctl/specs/opspec/opfile/jsonschema.json", size: 39260, mode: os.FileMode(420), modTime: time.Unix(1552337811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opctl/specs/opspec/opfile/jsonschema.json": githubComOpctlSpecsOpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opctl": &bintree{nil, map[string]*bintree{
			"specs": &bintree{nil, map[string]*bintree{
				"opspec": &bintree{nil, map[string]*bintree{
					"opfile": &bintree{nil, map[string]*bintree{
						"jsonschema.json": &bintree{githubComOpctlSpecsOpspecOpfileJsonschemaJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
