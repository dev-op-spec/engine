// Code generated by go-bindata.
// sources:
// github.com/opctl/specs/opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpctlSpecsOpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7b\x73\xdb\x36\xf2\xff\xe7\x53\xec\xa8\xe9\xaf\xf6\x2f\x91\x64\xa7\x4d\xda\xba\x93\xf1\xb8\x79\xdc\xe5\xa6\x79\x4c\xf3\xb8\x99\x5a\x6e\x06\x22\x21\x0b\x35\x09\x30\x20\xe8\x47\xef\xf2\xdd\x6f\x08\x50\x7c\x09\x00\x21\x8a\xb4\xec\x44\xfe\x27\x11\xb9\x58\x2e\xf6\x85\xc5\x62\x01\xfc\xe7\x0e\xc0\xe0\x6e\xec\xcd\x71\x88\x06\x07\x30\x98\x0b\x11\x1d\x8c\xc7\x7f\xc5\x8c\x0e\xd5\xd3\x11\xe3\xa7\x63\x9f\xa3\x99\x18\xee\xfd\x38\x56\xcf\xbe\x19\xdc\x97\xed\x88\xbf\x68\x13\x1f\x8c\xc7\x2c\x8a\x23\xec\x8d\x08\x1b\xef\x8d\xf6\x47\x3f\x8e\x59\x34\xba\x0a\x83\x51\x86\x26\x45\xa9\x9a\x09\x22\x02\x9c\x36\x7c\x1d\xc1\x73\x12\x60\xf5\xd4\xc7\xb1\xc7\x49\x24\x08\xa3\xe9\xbb\xa7\x78\x46\x28\x8e\x01\x51\x60\x91\x82\x88\x38\x8b\x30\x17\x04\xc7\x83\x03\x48\x09\x07\x18\x50\x14\xe2\xfc\xd7\x32\x96\x57\x28\xc4\xc0\x66\x20\xe6\x78\x81\x46\x82\x89\xab\x48\x52\x10\x0b\x4e\xe8\xe9\x40\x3e\xfe\xac\xde\xd6\x50\x98\x30\x3f\x2d\x7e\xea\x3e\x70\x97\xe3\x59\x0a\xf6\xcd\xb8\xa0\x7a\x4c\x68\x94\x88\x78\x1c\x21\x21\x30\xa7\x6f\x8a\x17\xdf\x3e\xfc\x75\xf8\x71\x84\x86\x7f\x1f\x0d\xff\xd8\x1b\xfe\xfc\xed\xc3\xa7\xdf\x3e\xf8\xb5\xdc\xd2\x27\xbc\xf2\xb3\x44\x4b\x85\x76\xf5\x85\x32\xd9\xc8\xf7\x49\x0a\x87\x82\x37\x65\xf6\xcd\x50\x10\xe3\xfb\x86\xbe\xbd\x41\x1c\x85\x58\x60\x9e\xf6\xac\x10\x80\x04\x5d\x22\xbe\xf4\x31\x80\xc1\x71\xb9\x1f\x27\xf7\x2a\x2f\x01\x06\x8c\xe2\xd7\x29\x5f\x8e\x4b\x0f\xa1\x02\x22\xc1\x38\xfe\x94\x10\x8e\xfd\x25\x48\xd5\x25\xce\xd1\xd5\xa0\xf6\xfc\xa4\xf2\xfb\xf3\xfd\x75\x3e\x30\x65\x2c\xc0\x88\xf6\xf9\x09\x9f\xf0\x3e\xd1\xcf\x52\xb3\xea\x11\x3f\x4d\xc2\x29\xee\xb5\x07\x6c\xfa\x17\xf6\x44\x9f\x5f\x88\x99\x77\x86\xfb\xfd\x42\xc9\xbb\x18\xbf\x50\xfa\x75\x52\xfe\x9a\xce\xdd\xe5\xef\x94\x09\xd4\x1f\x3b\x9a\x7b\x0e\x9c\x3b\x62\x89\x4e\x5a\xfd\x60\x09\xa8\xe6\x1b\x8e\x52\x50\x88\xcc\x1e\xc2\x85\x7e\x0d\xe2\x65\x80\xeb\xf7\xa2\x15\xb9\xd4\xfb\x23\x29\x9e\xa1\x24\x10\x26\x6a\x17\x83\x8a\xd6\x3f\xe9\x31\x92\xf8\x2d\xf6\x38\x36\xa2\xac\x31\xff\x85\x1a\x68\xe4\x07\x80\xc4\x10\xab\xc6\xcb\x88\x4b\xd4\x18\x9c\x99\x9e\x1e\x8f\xd1\x58\x70\x44\xa8\xd0\x0b\x6d\x49\x69\x9e\x94\x1a\x58\xc9\xc8\xec\x59\x0b\xd3\xa0\x29\x50\x55\xec\x17\x02\x87\x66\xc0\x65\xa6\xfd\xeb\xed\xeb\x57\xf0\x56\x06\x21\x70\x5c\x43\x03\x67\xf8\xea\x82\x71\xff\x64\x67\x11\xc4\x08\xc6\x82\x78\x44\xb0\x98\xc9\xc0\x67\x2e\xc2\x20\x8b\x7e\x2e\x38\x39\x9d\x8b\x61\x29\x34\x1a\x9e\xa3\x80\xf8\x28\xc5\x37\xdc\xdb\xff\x26\xc6\x9e\xfc\xef\xa3\xd1\xfe\xde\xae\xb6\xa7\xd0\x83\x52\x2b\xc6\x96\x9f\x94\x84\x58\x7e\x5c\xfa\xaf\xd6\x4b\x68\xe9\xd5\x28\x89\xec\x04\x59\x47\x08\xa4\x47\xd6\xff\x6c\xe1\x3c\xa2\x57\x9a\xe8\xa3\xfc\x67\xea\xce\xed\x13\x9c\x45\x78\x8d\x1d\x6d\x12\xee\x6d\xe5\x47\x75\xb4\x75\x7b\x73\xb2\x92\x59\x84\xe8\x72\x2d\xf7\xb4\x68\xdf\xa1\x71\xec\xe5\xc6\xf1\xd0\xee\x97\x16\x9e\x9a\x50\x81\x4f\x31\x37\x03\x86\x84\x92\x30\x09\x07\x07\xb0\xb7\x1a\x73\x08\x5d\x8f\x39\x59\xfb\xbe\x98\xb3\xbf\x49\xe6\x24\x94\x7c\x4a\xf0\x5a\xfc\x29\xa1\xe8\x6b\x5c\xfb\xde\x81\x45\xc6\x80\x03\x0c\x66\xa6\x65\x89\x35\x92\x5d\x8e\x65\xee\x34\xa0\xac\xc7\x21\xb6\x28\x3f\xef\x41\x67\xf1\x75\x86\xd0\x2d\xc2\xfe\x55\x01\x6f\x63\x6c\x87\x80\xf8\xa9\x82\x86\x73\x14\x24\xb8\x6d\x1c\xdc\xa9\xee\xa4\x13\xfb\xce\xf4\xc6\x27\xdc\x4d\x67\x9e\x12\x8e\x3d\xc1\xf8\xb5\xcd\xcc\x72\x12\x43\xc4\xcf\x7c\x76\x41\xf5\xcc\xaf\x91\xf9\x32\x03\x06\x42\xe1\xf8\x7c\x6f\xf4\xe0\x27\x78\xc2\xc2\x90\xd1\xf4\x05\xc4\x57\x54\xa0\x4b\xe5\xb2\x0e\xc6\x63\x99\x4c\xf4\xe4\xeb\xf4\x23\xd2\x6d\xa5\x4d\xc6\xbb\x40\xa8\x17\x24\x3e\xa1\xa7\xf0\x8f\xe7\x2f\x41\xa0\x69\x80\x01\x5f\x0a\x4c\x63\xc2\x0c\x94\xe8\x32\x7e\x16\x39\xc2\x9a\xba\xf8\x4b\xca\x7b\x34\x8d\x59\x90\x08\x0c\x11\x12\x73\xe0\x8c\x09\xec\x03\x12\xe0\x13\x0e\x1e\xa3\x02\x11\x9a\xf6\x41\xe5\x49\x81\xf1\xfb\x80\x80\xe3\x00\x09\x72\x9e\xb5\x49\x87\x1b\x1e\x71\x9c\x36\x9c\x71\x16\xc2\xc5\x1c\x73\x9c\x65\x1b\xe5\x0c\x50\x20\x2e\xb0\xdf\x5d\x9f\xdb\xcd\x48\xfd\x5c\xff\xd6\x9e\x95\x76\x6a\x8d\x32\x0f\xd6\x99\x39\xa6\xd8\xdc\xec\xf1\x39\x09\xf0\xd6\x81\x6f\x8d\x46\xdf\xe9\xcc\x68\x52\x75\xba\x61\xf6\x92\xe5\x75\x3b\xb3\x18\x85\xcf\xcd\x66\x5e\x49\xd8\xad\xd5\xd8\xd4\x40\x9f\x77\xef\x52\x29\xd5\x17\x36\x9e\x5c\x54\x64\x5c\x5f\x76\x31\x08\x64\x66\xa8\x5d\x4e\x31\x6d\xdc\xd3\xa4\xf4\xc1\x03\x87\x19\x97\x4a\x38\x1b\xc1\x9a\xd3\x39\x5d\x5b\x83\x92\x9e\x21\x95\x63\xca\xcf\xe8\x33\x30\xa6\xf9\xf2\x22\x97\xd7\x4e\x62\x69\xe3\xbe\x24\xe6\x32\x47\xfe\x1a\x25\x86\xa9\x4c\x8b\xb4\x12\x58\xda\xb6\x2f\x79\xb9\xe4\xc4\xd6\x97\x57\x93\x07\xcf\x78\xb7\x12\x47\x67\x8c\x87\xc8\xe4\xdf\x25\x84\x7e\xbd\xbd\xfc\x67\x4d\x04\xe7\xee\xb8\x29\xed\x05\x1a\x01\xfe\xae\xd6\x46\xe3\xf2\xb0\x32\xc5\xe9\x90\xee\x84\xad\x16\x87\x59\x61\x33\xd5\x32\xf7\x52\x42\x2d\x3e\x6b\x81\xd2\x67\x7b\xa1\xcb\xfc\x70\x96\x1d\x6c\x9b\x1e\x4e\x9b\xf7\x65\x09\x0e\x86\x60\x53\x5f\x4b\xde\x77\xad\x4e\xab\xe6\x3d\x75\xfa\x87\xbe\x3a\x9d\x04\x82\x44\x01\x6e\x3f\x48\x15\x18\xfa\x4a\x78\xf7\xd4\x75\xca\xac\x3e\xc9\xd6\x67\xca\x44\x5f\xca\xfd\xf0\xfa\x96\x64\x5b\x0c\xa6\x26\x5e\x2e\x1c\x78\x2b\x6e\xca\xc6\x7d\xf1\xd3\xc5\x70\xbe\xe8\x30\x47\xf3\xf4\xc6\xad\x64\x64\x30\x9d\xcd\xe7\x15\x3e\xb7\xf9\xfc\x6b\x09\xbb\x9d\xcf\x3b\xcc\x5b\x7b\x9c\xcf\xab\x2f\x6c\x7c\x3e\xaf\xc8\xd8\x40\xb5\x90\xa1\x50\xd5\xce\x3b\x43\xc9\x50\x81\x6b\x15\xa7\x3a\x47\xd4\xe7\xf8\x22\x76\x70\xab\x8f\x46\x0f\x47\x8f\x2c\x7e\x75\xdd\x70\xde\x65\x85\x16\xd6\x28\x1c\xb9\x75\x15\x21\xdd\x44\xf5\xdb\xec\xd1\xf5\x89\x7d\x9b\x3d\xfa\x3a\x25\xe6\xe3\x08\x53\x1f\x53\x6f\x0d\x4f\x5e\xc6\xd1\xd7\x9c\xca\x56\x7f\xb8\xa6\xfb\xbe\x7d\xde\xb5\xdf\xfa\xc3\xa6\x95\xba\x12\x21\x3d\x0f\x00\xdb\xd4\x66\x43\xf6\x6d\x40\x93\x20\xb0\xe7\xf0\x4c\xa1\xf0\xe2\xcf\x94\x9a\x5b\xcd\x8d\x84\xe8\x72\xfd\x88\xb0\x82\xa4\x2f\x47\xe2\x32\x10\xf4\x59\xaa\xd9\x01\x9b\xca\x48\xfa\x62\x93\x4b\x1a\xa2\x37\x36\x7d\xf5\x99\xae\x16\x03\xff\x36\xd3\x75\x53\x25\xb3\xaa\x2f\x75\x98\x88\x37\x88\x2d\xea\xdd\x3d\xd8\x66\xd3\x0e\xc9\x06\x68\x91\x4c\x28\xa7\x3d\xd2\x4f\x34\x25\x3d\xf4\x7c\x2a\xf6\xe0\x7a\x6e\xed\x9b\x37\xb7\xd8\xa3\x2e\x57\x81\x1a\x08\x6e\x02\x6f\x0c\xcd\xf3\x77\x9d\xaa\xc0\x23\xdb\x2a\x47\x89\x36\xf7\x58\x12\xec\x81\xed\x02\x5f\xa6\x01\x6b\xb2\x45\xa2\xf9\x32\x18\xa2\xf0\xad\xcb\x8f\xab\xa8\x5b\x76\x3c\x1c\x3d\x58\x89\x1f\xf6\x25\xe6\x0c\xd6\x3e\x18\x54\x40\xdd\xd8\x6b\x5b\x98\x56\x7f\xcd\x02\xb8\xe0\x44\xe0\xd7\x34\xd0\x6d\x1b\xd6\x80\xdb\xa4\x90\xa3\xea\x38\xfd\xb9\xbf\x37\xb2\x44\xbd\x25\xe2\x9c\x13\x99\x19\x73\xac\xef\x6d\x6f\xad\x6c\xbd\xde\xed\x71\x52\xa9\x56\x1c\xcf\x6f\x58\x17\x5a\xad\xbe\xdd\xb0\x3e\xb4\x8a\xab\x6e\x58\x1f\x94\xd3\x69\xd3\x87\x9e\x67\xe7\xf6\xc3\x45\x6a\xc0\xd6\xc0\xb2\x8e\xa8\xaf\xf8\xf2\xc7\x8d\xc4\x97\xb7\x2c\x13\xb8\x9a\x12\x94\xce\xd4\x68\x25\xfb\x45\xfb\xbe\x44\x6e\x9b\x5e\x77\x5f\x2f\x68\x0f\x10\x6e\x71\x69\x42\x76\xfc\x4a\x67\xa5\x09\x0a\x9f\x5b\x69\xc2\x5b\x09\xfb\x95\x96\x26\xb4\xab\x23\x50\xec\xbd\x61\xdb\x55\x32\xe3\xe8\x4e\x87\x24\x3e\x47\x1d\x92\xb0\x5f\xa9\x0e\x39\x96\xb7\xf4\xbf\x87\x4a\x7d\x61\xe3\xe5\x2d\x8a\x8c\xed\x76\x95\xdb\x59\x70\xd0\x2a\x1e\xde\x16\x1c\xe4\x60\x5f\xa4\xc4\xb6\x6b\xba\xad\xc3\xcf\xd6\xdb\x55\xea\x43\x6c\x12\x61\x1e\x63\x91\x0e\xad\x15\xfe\x2a\x4c\xbd\x70\xd8\x36\xa1\xeb\x6a\x37\x8d\x8f\x04\x1e\x0a\x12\xea\x4f\xac\x30\x71\xa3\x9a\x2f\x5f\xa0\x00\xc5\x8b\x6e\x79\x30\xfa\xbe\x29\x4b\xdc\xc3\xf6\x9c\x82\x2b\x16\x38\xcb\x06\x9d\x96\xc5\x26\x85\x54\xd2\x08\x97\x0f\x49\x88\x4e\xf1\x30\x75\x57\xab\x08\xe7\x08\x54\x73\x90\xcd\x81\xe3\x19\xe6\x98\x7a\x18\x50\x0c\xbe\x3c\xca\xd6\x87\xe9\x15\x1c\x9f\x12\x31\x4f\xa6\x23\x8f\x85\x63\xd5\x60\xec\x93\x94\x85\xd3\x24\xc5\x34\xce\xdb\x15\xf2\x6c\x68\x21\x38\xc6\x8b\x17\xfb\xa3\xfd\xef\x0b\x14\xd7\x2f\xc0\x3a\x03\x37\x23\x47\x1c\x22\xd2\x50\x6b\x62\xf5\xdd\x69\xf3\xbe\xac\xca\x12\x1e\x41\x3f\x42\x51\xdc\xd8\x8c\x24\xe6\x2c\x16\xf2\x80\xe6\xd6\xc2\x58\x60\xe8\x4b\x1e\x0d\xcb\x0d\x3d\xc8\x23\xe7\xc9\x66\x44\x42\xa2\xf3\x1f\xda\x8b\x23\x6d\xdd\x97\x28\x2c\x55\x16\xd0\x8f\x28\x24\x2f\x36\x26\x86\x47\x6b\x89\xe1\x51\x5f\x62\xb0\x64\x37\xa1\x37\x31\x3c\xda\x90\x18\x12\x4e\xda\x4b\x21\xe1\xa4\x2f\x21\x58\xaa\x56\xa0\x1f\x21\xa4\x9c\xd8\x8c\x0c\x62\x1c\x9e\xaf\xb8\xb3\xfc\x08\x62\x1c\x22\x2a\x88\x07\xe7\x98\xc7\x84\xd1\x7a\x98\xa5\x90\xa6\x32\x28\x8e\x13\xcb\x1f\x8d\xaf\x9d\xbb\x59\x1f\xdb\x31\xd8\xf0\x66\xe5\x8d\xe7\xbf\x61\x7a\x2a\xe6\x6b\xd4\xbc\x2a\x04\x3d\xcd\x6b\x5d\x0a\xb5\x56\xa8\xe3\xdc\x5f\x8d\x3b\x84\xae\xc9\x9d\x05\x82\x9e\xb8\xe3\xb2\xcc\xb8\x4a\x95\xab\x11\xa6\x48\xec\x6e\x2b\x61\xfb\xce\x48\x6d\x2b\x61\x6f\xaa\x64\x5a\xd6\x2d\xac\x59\xad\xd0\x93\xd4\x7e\x72\x10\x5a\xc3\x50\x57\xa4\xee\x06\x1c\x9f\xe2\xcb\xdb\x74\xb6\xef\x1d\x43\x4b\x63\xab\x45\x8b\x1c\x5a\x0b\xb9\xb8\x71\x87\x25\xa2\x7e\xe5\x8e\x45\x7f\xab\x6d\x79\x42\xd7\xbd\xaa\xe7\x08\x62\x42\x4f\x03\x0c\x94\xf9\xf9\x4d\x47\xc7\x1e\x0a\x02\x38\xe5\x28\x9a\x17\xba\x84\xe9\xe8\x82\x9c\x91\x08\xfb\x44\xdd\xe9\x94\xfe\x1a\x3f\x41\x41\xf0\x51\x42\x16\x5a\xa2\xc9\x73\x96\xd5\xda\x7c\xe9\xc9\x20\x3b\x9f\xb1\x1a\xea\x14\x81\x4a\x89\xff\x8e\x08\x59\xd4\x15\xa6\x08\x71\x14\x04\x38\xe8\x0a\x5f\x8c\x39\x41\x26\x6c\xd9\xff\xf2\xfb\x5c\x4c\x8b\x7a\x25\x86\xd5\x2e\x4a\xca\xc3\xe3\x1c\x22\x95\xd4\xc0\xa6\xc0\x95\x77\xb6\xcb\x63\xbc\x50\x57\x5b\x53\xd7\xac\x27\x2c\x0c\x11\xf5\x81\x27\x34\x0d\xa9\x11\xe4\x94\xfc\x02\xec\x1c\x73\x4e\x7c\x79\x3d\xd7\x15\xc4\x58\x00\x12\x52\xf3\x54\xf6\x33\xc0\xe7\x78\x39\x03\xd7\x30\x42\x58\x46\x86\x3a\x69\xcf\x2e\x23\x8e\x63\x19\xf7\x7b\x0c\x73\x8f\x4c\x03\x0c\x82\x2d\x16\x83\x4d\x87\x41\xeb\x0d\x93\x27\xb4\x52\x0b\x15\x8d\xa5\xfa\x8f\xf7\xd6\x18\x7d\x14\x86\xfd\xba\x9b\xac\x7a\x32\xcd\xc9\xd1\xba\xee\x37\x2d\x1a\x9b\x8e\x82\x26\x38\x06\x42\xa5\x54\x0a\x2d\x5b\x2e\x4d\x70\xaa\xb8\x1b\xfc\xb9\x73\xac\xfa\x78\x72\xb0\x7b\x78\x3c\xfc\x38\x9a\x4c\xc6\xa5\x6b\xbe\xee\x9a\x16\xc8\xed\x2b\x26\xae\x83\xe5\xce\x05\x09\x02\x98\x62\x98\xb2\x84\xfa\x52\xd2\x28\xcc\x0f\x7b\x05\x16\x39\x1d\x64\x14\x18\xd2\xa0\x86\x41\xdd\x95\x38\x93\x32\xfa\x84\x2b\x4d\x84\xff\x1b\x33\x0e\xb1\xc7\x22\xb9\x2e\x20\xc9\xc7\x02\x92\x88\x51\xc0\x97\xc4\x52\x18\xb8\x69\x7d\xcd\xf8\xa3\x79\xba\x3c\xf9\x6c\x1e\xa5\x9d\x07\xfd\xba\x61\x60\x7a\xfe\x01\x75\x62\x1b\xcf\xe8\x39\xe1\x8c\x86\x98\x0a\x38\x47\x9c\xa0\x69\xd0\xa9\x95\x1c\xff\xf9\x78\x03\xc6\x40\x68\x49\xbb\x2e\xc6\xca\x38\x28\x0a\x2d\x2b\x40\x9b\x33\x8b\x06\x1f\x9d\x21\x73\xd1\xfc\x5c\x5e\x95\x12\x73\x63\x6a\x7d\xe3\x6a\x3c\x23\x81\x56\x71\x56\x55\xe2\xe7\xa4\x5b\xa5\xdd\xba\x76\x13\x71\x26\x1d\x96\x07\x77\x5f\x83\x6f\xbf\x6d\x1a\x2e\xa3\xbf\x36\x1a\xde\x54\x20\xa9\x78\xe5\x52\x16\xf8\x7b\xbe\xf0\x2e\x98\x3c\x6a\x54\x92\xa4\x9d\x84\x6e\x7e\x74\xd5\x55\x1d\x46\x49\x10\x3c\xe1\xd8\x37\xd6\x1c\xb6\x27\xbb\x40\xdd\x42\x29\xec\x37\x5d\x6a\x56\xfb\x4f\xba\xd3\xab\xda\x25\xbf\xf9\x73\xdd\x65\xbf\x15\xa7\x08\x1e\xa2\xa9\x73\xc9\x6b\x22\xe4\xea\x80\xbc\x13\x80\x89\x39\xe6\x05\xe4\x72\xc1\xa6\x79\xc7\x9f\x31\xc5\x95\xd7\x97\x6a\x5e\x65\x07\x69\x6a\xde\x18\x8b\x41\xdd\xee\x0f\xad\xf1\x2a\x62\x5c\x5b\xaf\xba\xb4\xbf\x38\x85\xcb\xbc\xae\x64\x48\x95\x71\x82\xc9\x07\x73\x16\x6b\xcc\xb5\xd1\x9c\xdd\x46\x9e\x63\x39\xc0\xec\x0c\xd5\xbf\xbb\x87\x3b\xc2\x8b\xfe\x9b\xf8\xd1\xee\xa1\xa3\xb1\xff\x93\xc5\x02\xd2\x0e\xef\xc4\xbb\x29\xc5\x53\x22\x87\x10\x6b\xed\xad\x7e\xb8\xb2\x9d\x4f\x62\x4f\x8e\x59\x4e\x48\x5d\xb2\x00\xa8\xe6\x0a\x97\x18\xd0\xc6\x2e\x5b\x1b\x95\x2a\xe8\x6f\x15\x90\xb8\xca\xf7\xc0\x7c\x13\x74\x0e\xb4\x94\x75\x58\x68\x60\xb6\xe1\x00\xf9\x7e\x3a\x06\x43\x88\xa2\x08\xcb\x00\x01\x2d\x5e\x99\x6a\xb4\x9a\xcb\xcf\xfb\xe3\xea\x05\xe3\x67\x4f\xf5\x57\x40\xd5\x7a\xfa\x6f\xc6\xcf\xd2\x48\xd8\x2f\x5d\xdd\x24\xe6\xb0\x53\xcd\xad\x94\x16\x35\xe5\x50\xb6\x1c\x0e\x59\x7b\x6b\xce\x7e\x9a\x33\x5b\x6a\xc8\x2c\x3d\xab\x5e\x4b\xec\xc4\x9a\xd2\xb7\x06\x01\x63\x51\x3d\xbd\x65\x4b\x4f\xcd\x98\x96\x7d\x4d\x31\x02\x46\x9e\x69\xf9\xae\xce\xfa\x0f\x32\x74\x4b\x1d\x06\x86\x94\x3a\xec\xcb\x8c\x56\x1b\xbf\x61\x5b\xed\xb0\x6f\xfc\xb3\x94\xd6\x6a\x82\x36\xcd\xe8\x70\x86\x4d\x5b\xb9\x97\xfb\xab\xa6\xba\x90\xf2\x08\x88\xc0\x5c\x2e\x13\xc4\x80\xe2\x98\x79\x04\x09\xb5\x59\x0e\x16\xb1\x78\x88\x7c\x0c\xe8\x1c\x91\x40\xb6\x12\x73\xce\x92\xd3\x79\x4b\x5b\xd3\x50\xae\x26\x7f\xdd\xd1\xae\x42\xf1\x5e\xa8\x5f\x33\x2e\x92\x4a\xd9\x18\x18\xad\xb2\xe5\x89\x50\x1f\x5f\xda\x9c\xb6\xd6\x0d\xd4\x90\x24\x54\x90\xc0\xc1\x47\xbd\x98\x49\x27\x14\x71\xec\x13\x0f\x09\x0c\x38\x65\x35\x12\x38\x96\xd3\x20\xb9\x30\x21\xe3\x84\xd4\x8a\x94\x00\xd2\x59\xcf\x08\xde\x2c\x5a\xc4\x80\x78\xd1\xcc\x87\x29\x9e\x31\xf9\x00\xf3\xab\x42\x9a\xa3\x2e\x93\xc5\x2e\x01\x32\x99\x8d\x15\x86\xba\x7c\x1d\xbd\xa7\x71\xed\xa8\xe4\xf7\x48\x7d\xce\xd2\x9a\xbb\x72\x39\x67\x87\x71\x98\x48\x67\x3a\x19\x14\x9c\xdb\xcd\xd5\x3e\x3e\x23\xe9\x08\x39\xd2\xaf\x11\x2c\xb3\xd1\xc0\x42\xcd\x80\xac\xfc\x3d\x5c\xcc\x89\x37\xaf\xd2\x28\x78\x82\x81\x71\x45\x6b\x4d\x48\xc6\x04\x81\x76\x7e\x67\x31\xa2\xd4\x8c\x3e\x2d\x9b\x66\xdd\x49\x2e\x99\x66\x9b\xef\x5c\x92\x58\xb7\x26\xdc\xc7\xb7\xa8\x66\x16\xdf\xcb\x77\x98\x78\xe6\xda\xad\xca\xef\x93\xfa\xcc\xc2\x36\x00\xa7\x22\x72\x59\xba\x79\x97\x6a\x0c\x99\x41\xaa\xd1\xea\x1a\x70\xe9\x1f\x3e\x25\x48\x17\x7e\x37\x16\x15\x58\xcb\x09\x3a\x4b\x49\xde\x84\x54\x41\xe3\x40\x94\xe9\xee\x2a\x42\x50\xe3\xa6\x6a\x08\x17\xe3\x62\x9a\x6c\x13\x85\x71\x36\x54\x9e\xd9\xfc\x39\x99\xdc\x9d\x4c\x76\x46\xf7\x26\x93\xdd\xbb\x4b\x4e\x76\x89\x76\xaa\x8f\x06\x8c\xca\x43\xaf\x0a\xe5\xa1\xdf\x89\xad\xfe\x74\xa0\x3f\x85\x9f\x58\x45\x14\x94\x6d\x4c\x8b\xac\x11\x8e\x39\xa4\xfa\xac\x1d\xac\x97\xa7\x28\xfa\xe1\xab\xf3\xd4\x66\x56\x17\xe2\xb8\xe9\x99\x12\x41\x50\x40\xfe\xc6\x31\xbc\x78\xf5\xe6\xfd\xbb\x8f\xaf\x8e\x5e\x3e\x53\xf9\x9b\x0f\x47\xbf\xbd\x7f\x06\x84\x66\x35\xc9\xf0\x5d\x01\x70\xa0\x5e\x7e\x37\x82\x17\xb3\x05\x5c\x0c\x34\x09\x82\xfb\x40\x04\xbc\x7c\xff\xf6\x9d\xbc\x99\x29\x8e\x93\x10\xfb\x19\xc4\xe3\xc7\x70\x77\xa7\xc0\xa1\xcf\xc3\xbb\xed\x68\x76\x3e\xd5\x65\x70\x5c\xd6\x69\x63\xd2\xc0\x22\x9f\xf2\x9f\xbd\xfe\xb8\x71\xf1\x00\xd6\xa8\x6e\x36\x7b\x0e\x4d\x14\x85\x1a\x56\xc3\xa0\x71\x1a\x9a\x43\xb9\x9c\x3c\x66\xc9\x52\x56\xc0\x8c\x19\xcb\x0a\x54\xc3\xe1\x36\x19\x54\xf3\x31\x67\x9d\x15\x40\x6b\x9e\x76\x51\x84\xa6\x4b\xdc\x2e\x95\x7e\x55\x5e\x5b\x6c\xb7\xb0\xda\xd7\xef\xdf\xe5\x66\x5c\xb2\x5d\x65\xb5\xa5\x97\xca\x76\x2b\xd0\x16\x0b\x96\x00\x8f\x1f\x97\xe1\xb7\xe6\xdb\x02\x7b\x93\xda\xde\x58\xd5\x6c\x5c\x45\x72\x11\x7c\x7d\x26\xc8\xb1\x8f\x69\xaa\xc3\x31\x24\x31\xf6\xc1\x4f\x64\xdc\x83\x12\x31\x4f\x9f\x7b\x48\x4d\x13\x89\x98\x67\x27\xc6\x24\xdc\xc3\xd9\xb1\x28\xaa\x30\x8c\x71\xdd\xf9\x28\xe0\x30\x4e\x4a\x98\x24\xc6\xdc\xb0\x16\x64\x22\xba\xff\x32\x84\x6b\x28\xc0\x31\x56\x1d\xc7\xf1\x05\xe3\xab\x1c\x94\xf5\x45\xb0\xc3\xd9\x8c\x1a\xa6\xc6\x65\x8d\x6a\x62\xb1\xe6\xb5\x7e\x79\x67\x6d\xd3\x6d\xbf\xd6\x6d\x32\x2d\x87\x22\xef\x52\x81\x77\xc2\xc9\xb0\x08\xe1\x5b\x4c\x24\x36\xb8\x52\xdc\xa2\xb4\x26\xe2\xd8\x43\x42\x52\x2b\x78\xb2\x7c\x36\xd4\x7a\xf1\xfb\xba\x16\xe3\x96\x4f\x6f\x08\x44\xda\x13\xb1\x40\xec\x36\xe6\x9c\xe9\x4e\xe2\x02\xe7\x30\xc3\x61\x00\x30\xdb\x06\xb4\xb7\x0f\x70\xb4\x11\x58\xc9\x4e\xc0\xe6\xb8\x1b\x46\x67\x58\x4f\x6a\x96\x3a\x0f\xe8\xd8\x7f\x1a\x4e\x79\xe8\xc2\x35\xae\xe9\x67\x52\x6d\xec\xd0\xcf\x94\x7e\x69\x77\x0d\x14\xfb\x0b\x4c\x85\xfc\x0b\x00\x73\x1d\xbf\x7b\x8e\xde\xa4\x1b\xcd\x79\x8e\x6c\xdb\x82\x89\x48\xf5\x7a\x03\x24\xde\xa9\x91\x5a\xda\x00\x81\x16\x11\xfe\x62\xdb\x4c\xb6\xe7\xb7\xbc\x75\xa6\xbe\x68\x98\xed\x0a\xce\xf6\xc3\x94\x0c\x5f\x4f\x17\x8b\xe2\x08\x7b\xb5\x8d\x3d\xea\x99\xd3\x47\x8e\x15\x70\xb1\xd9\x46\xfd\x1e\x11\xb6\xab\x42\xe5\xe9\xd5\x12\x21\xe5\x0d\xd0\x1f\x4a\xf3\x6c\x93\x2b\xaa\x24\xc6\x76\xb2\x92\x91\xc9\x64\xa4\xf9\xef\xce\xe1\xc1\xce\x64\x22\xcb\x4a\x8e\x86\x7f\xa0\xe1\xdf\xc3\x93\x7b\x3b\x87\x07\x93\xc9\xa8\xf2\x68\xf7\xff\x77\x77\x0f\xe5\xf3\x7b\xa5\xe7\x93\xc9\x70\x32\x19\x9d\xdc\xdb\x3d\xcc\x52\x6e\xa9\x6c\x24\x53\x96\x2d\x6e\xb0\x28\x46\x94\xa6\x65\x37\xa7\xcf\xff\x0b\x00\x00\xff\xff\xf7\xea\xc7\x43\x6b\x9e\x00\x00")

func githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpctlSpecsOpspecOpfileJsonschemaJson,
		"github.com/opctl/specs/opspec/opfile/jsonschema.json",
	)
}

func githubComOpctlSpecsOpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opctl/specs/opspec/opfile/jsonschema.json", size: 40555, mode: os.FileMode(420), modTime: time.Unix(1559259542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opctl/specs/opspec/opfile/jsonschema.json": githubComOpctlSpecsOpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opctl": &bintree{nil, map[string]*bintree{
			"specs": &bintree{nil, map[string]*bintree{
				"opspec": &bintree{nil, map[string]*bintree{
					"opfile": &bintree{nil, map[string]*bintree{
						"jsonschema.json": &bintree{githubComOpctlSpecsOpspecOpfileJsonschemaJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
