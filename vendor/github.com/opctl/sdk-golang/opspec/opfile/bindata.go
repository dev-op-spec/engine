// Code generated by go-bindata.
// sources:
// github.com/opctl/specs/opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpctlSpecsOpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7b\x73\xdb\xb6\x93\xff\xe7\x53\xec\xa8\xe9\xd5\xbe\x44\x92\x9d\xfe\x92\xb6\xee\x64\x32\x6e\x1e\x77\xb9\x69\x1e\xd3\x3c\x6e\xa6\xb6\x9b\x81\x48\xc8\x42\x4d\x02\x0c\x08\xfa\xd1\xbb\x7c\xf7\xdf\x00\x20\x29\x8a\x02\x40\x88\x22\x2d\x3b\x91\xff\x49\x44\x2e\x96\xc0\xbe\xb1\x58\x00\xff\x77\x07\x60\x70\x37\x0d\x66\x38\x46\x83\x03\x18\xcc\x84\x48\x0e\xc6\xe3\xbf\x53\x46\x87\xfa\xe9\x88\xf1\xd3\x71\xc8\xd1\x54\x0c\xf7\x7e\x1a\xeb\x67\xdf\x0d\xee\xab\x76\x24\x2c\xda\xa4\x07\xe3\x31\x4b\xd2\x04\x07\x23\xc2\xc6\x7b\xa3\xfd\xd1\x4f\x63\x96\x8c\xae\xe2\x68\x94\xa3\x91\x28\x75\x33\x41\x44\x84\x65\xc3\x37\x09\xbc\x20\x11\xd6\x4f\x43\x9c\x06\x9c\x24\x82\x30\x2a\xdf\x3d\xc3\x53\x42\x71\x0a\x88\x02\x4b\x34\x44\xc2\x59\x82\xb9\x20\x38\x1d\x1c\x80\xec\x38\xc0\x80\xa2\x18\x97\xbf\x96\xb1\xbc\x46\x31\x06\x36\x05\x31\xc3\x05\x1a\x05\x26\xae\x12\xd5\x83\x54\x70\x42\x4f\x07\xea\xf1\x17\xfd\xb6\x86\xc2\x86\xf9\xd9\xfc\xa7\xe9\x03\x77\x39\x9e\x4a\xb0\xef\xc6\xf3\x5e\x8f\x09\x4d\x32\x91\x8e\x13\x24\x04\xe6\xf4\xed\xfc\xc5\xf7\x0f\x7f\x1b\x7e\x1a\xa1\xe1\x3f\x87\xc3\x3f\xf7\x86\xbf\x7c\xff\xf0\xd9\xf7\x0f\x7e\xab\xb6\x0c\x09\x5f\xf8\x59\xe9\xcb\x42\xdf\xf5\x17\xaa\xdd\x46\x61\x48\x24\x1c\x8a\xde\x56\xc9\x37\x45\x51\x8a\xef\x5b\xc6\xf6\x16\x71\x14\x63\x81\xb9\x1c\xd9\x9c\x01\x0a\x74\xa9\xf3\x95\x8f\x01\x0c\x8e\xaa\xe3\x38\xb9\xb7\xf0\x12\x60\xc0\x28\x7e\x23\xe9\x72\x54\x79\x08\x0b\x20\x0a\x8c\xe3\xcf\x19\xe1\x38\x5c\x82\xd4\x43\xe2\x1c\x5d\x0d\x6a\xcf\x4f\x16\x7e\x7f\xb9\xbf\xce\x07\x26\x8c\x45\x18\xd1\x3e\x3f\x11\x12\xde\x27\xfa\xa9\x54\xab\x1e\xf1\xd3\x2c\x9e\xe0\x5e\x47\xc0\x26\x7f\xe3\x40\xf4\xf9\x85\x94\x05\x67\xb8\xdf\x2f\x54\xac\x8b\xf5\x0b\x95\x5f\x27\xd5\xaf\x99\xcc\x5d\xf9\x4e\xab\x40\xfd\xb1\xa7\xba\x97\xc0\xa5\x21\x56\xe8\x94\xd6\x0f\x96\x80\x6a\xb6\xe1\x50\x82\x42\x62\xb7\x10\x3e\xfd\x37\x20\x5e\x06\xb8\x7e\x2b\xba\xc0\x97\xfa\x78\x54\x8f\xa7\x28\x8b\x84\xad\xb7\x85\x53\x31\xda\x27\x33\x46\x92\xbe\xc3\x01\xc7\x56\x94\x35\xe2\xbf\xd4\x8e\x46\x7d\x00\x48\x0a\xa9\x6e\xbc\x8c\xb8\xd2\x1b\x8b\x31\x33\xf7\x27\x60\x34\x15\x1c\x11\x2a\xcc\x4c\x5b\x12\x9a\xa7\x95\x06\xce\x6e\xe4\xfa\x6c\x84\x69\x90\x14\x58\x14\xec\x97\x02\xc7\x76\xc0\x65\xa2\xfd\xcf\xbb\x37\xaf\xe1\x9d\x0a\x42\xe0\xa8\x86\x06\xce\xf0\xd5\x05\xe3\xe1\xc9\x4e\x11\xc4\x08\xc6\xa2\x74\x44\xb0\x98\xaa\xc0\x67\x26\xe2\x28\x8f\x7e\x2e\x38\x39\x9d\x89\x61\x25\x34\x1a\x9e\xa3\x88\x84\x48\xe2\x1b\xee\xed\x7f\x97\xe2\x40\xfd\xf7\xd1\x68\x7f\x6f\xd7\x38\x52\xe8\x41\xa8\x35\x61\xab\x4f\x2a\x4c\xac\x3e\xae\xfc\xd7\x68\x25\x8c\xfd\x35\x08\x89\x1a\x04\x59\x87\x09\xa4\x47\xd2\xff\xe2\xa0\x3c\xa2\x57\x86\xe8\xa3\xfa\x67\x1b\xce\xed\x63\x9c\x83\x79\x8d\x03\x6d\x62\xee\x6d\xa5\xc7\xa2\xb7\xf5\x7b\x73\xb2\x92\x5a\xc4\xe8\x72\x2d\xf3\x54\xb4\xef\x50\x39\xf6\x4a\xe5\x78\xe8\xb6\x4b\x85\xa5\x26\x54\xe0\x53\xcc\xed\x80\x31\xa1\x24\xce\xe2\xc1\x01\xec\xad\x46\x1c\x42\xd7\x23\x4e\xde\xbe\x2f\xe2\xec\x6f\x92\x38\x19\x25\x9f\x33\xbc\x16\x7d\x2a\x28\xfa\xf2\x6b\x3f\x7a\x90\xc8\x1a\x70\x80\x45\xcd\x8c\x24\x71\x46\xb2\xcb\xb1\xcc\x9d\x06\x94\xf5\x38\xc4\x15\xe5\x97\x23\xe8\x2c\xbe\xce\x11\xfa\x45\xd8\xbf\x69\xe0\x6d\x8c\xed\x11\x10\x3f\xd3\xd0\x70\x8e\xa2\x0c\xb7\x8d\x83\x3b\x95\x1d\x39\xb1\xef\x4c\x6e\x42\xc2\xfd\x64\xe6\x19\xe1\x38\x10\x8c\x5f\xdb\xcc\xac\xec\x62\x8c\xf8\x59\xc8\x2e\xa8\x99\xf8\xb5\x6e\xbe\xca\x81\x81\x50\x38\x3a\xdf\x1b\x3d\xf8\x19\x9e\xb2\x38\x66\x54\xbe\x80\xf4\x8a\x0a\x74\xa9\x4d\xd6\xc1\x78\xac\x92\x89\x81\x7a\x2d\x3f\xa2\xcc\x96\x6c\x32\xde\x05\x42\x83\x28\x0b\x09\x3d\x85\xff\x7a\xf1\x0a\x04\x9a\x44\x18\xf0\xa5\xc0\x34\x25\xcc\xd2\x13\x53\xc6\xcf\xc1\x47\x58\x53\x16\x7f\x95\xb4\x47\x93\x94\x45\x99\xc0\x90\x20\x31\x03\xce\x98\xc0\x21\x20\x01\x21\xe1\x10\x30\x2a\x10\xa1\x72\x0c\x3a\x4f\x0a\x8c\xdf\x07\x04\x1c\x47\x48\x90\xf3\xbc\x8d\x74\x37\x3c\xe1\x58\x36\x9c\x72\x16\xc3\xc5\x0c\x73\x9c\x67\x1b\xd5\x0c\x50\x20\x2e\x70\xd8\xdd\x98\xdb\xcd\x48\xc3\x52\xfe\xd6\x9e\x95\x76\xaa\x8d\x2a\x0f\xd6\x99\x3a\x4a\x6c\x7e\xfa\xf8\x82\x44\x78\x6b\xc0\xb7\x4a\x63\x1e\x74\xae\x34\x52\x9c\x6e\x98\xbe\xe4\x79\xdd\xce\x34\x46\xe3\xf3\xd3\x99\xd7\x0a\x76\xab\x35\x2e\x31\x30\xe7\xdd\xbb\x14\x4a\xfd\x85\x8d\x27\x17\x75\x37\xae\x2f\xbb\x18\x45\x2a\x33\xd4\x2e\xa7\x28\x1b\xf7\x34\x29\x7d\xf0\xc0\x63\xc6\xa5\x13\xce\x56\xb0\xe6\x74\x4e\xd7\xda\xa0\xb9\x67\x49\xe5\xd8\xf2\x33\xe6\x0c\x8c\x6d\xbe\x5c\xe4\xf2\xda\x71\x4c\x36\xee\x8b\x63\x3e\x73\xe4\x6f\x91\x63\x98\xaa\xb4\x48\x2b\x86\xc9\xb6\x7d\xf1\xcb\x27\x27\xb6\x3e\xbf\x9a\x2c\x78\x4e\xbb\x95\x28\x3a\x65\x3c\x46\x36\xfb\xae\x20\xcc\xeb\xed\xd5\x3f\x67\x22\xb8\x34\xc7\x4d\x69\x2f\x30\x30\xf0\x0f\xbd\x36\x9a\x56\xdd\xca\x04\x4b\x97\xee\x85\xad\x16\x87\x39\x61\x73\xd1\xb2\x8f\x52\x41\x15\x9f\x75\x40\x99\xb3\xbd\xd0\x65\x7e\x38\xcf\x0e\xb6\x4d\x0f\xcb\xe6\x7d\x69\x82\x87\x22\xb8\xc4\xd7\x91\xf7\x5d\x6b\xd0\xba\x79\x4f\x83\xfe\x57\x5f\x83\xce\x22\x41\x92\x08\xb7\x77\x52\x73\x0c\x7d\x25\xbc\x7b\x1a\x3a\x65\x4e\x9b\xe4\x1a\x33\x65\xa2\x2f\xe1\x7e\x78\x7d\x4b\xb2\x2d\x9c\xa9\x8d\x96\x85\x01\x6f\x45\x4d\xd5\xb8\x2f\x7a\xfa\x28\xce\x57\x1d\xe6\x18\x9e\xde\xb8\x95\x8c\x1c\xa6\xb3\xf9\xbc\xc6\xe7\x37\x9f\x7f\xa3\x60\xb7\xf3\x79\x8f\x79\x6b\x8f\xf3\x79\xfd\x85\x8d\xcf\xe7\x75\x37\x36\x50\x2d\x64\x29\x54\x75\xd3\xce\x52\x32\x34\xc7\xb5\x8a\x51\x9d\x21\x1a\x72\x7c\x91\x7a\x98\xd5\x47\xa3\x87\xa3\x47\x0e\xbb\xba\x6e\x38\xef\xb3\x42\x0b\x6b\x14\x8e\xdc\xba\x8a\x90\x6e\xa2\xfa\x6d\xf6\xe8\xfa\xd8\xbe\xcd\x1e\x7d\x9b\x1c\x0b\x71\x82\x69\x88\x69\xb0\x86\x25\xaf\xe2\xe8\x6b\x4e\xe5\xaa\x3f\x5c\xd3\x7c\xdf\x3e\xeb\xda\x6f\xfd\x61\xd3\x4a\x5d\xa5\x23\x3d\x3b\x80\x6d\x6a\xb3\x21\xfb\x36\xa0\x59\x14\xb9\x73\x78\xb6\x50\xb8\xf8\xb3\xa5\xe6\x56\x33\x23\x31\xba\x5c\x3f\x22\x5c\x40\xd2\x97\x21\xf1\x71\x04\x7d\x96\x6a\x76\x40\xa6\x2a\x92\xbe\xc8\xe4\x93\x86\xe8\x8d\x4c\xdf\x7c\xa6\xab\x85\xe3\xdf\x66\xba\x6e\x2a\x67\x56\xb5\xa5\x1e\x13\xf1\x06\xb6\x25\xbd\x9b\x07\xd7\x6c\xda\x23\xd9\x00\x2d\x92\x09\xd5\xb4\x87\xfc\x44\x53\xd2\xc3\x4c\xa7\xf9\x1e\xdc\xc0\xaf\x7d\xf3\xe6\x16\x77\xd4\xe5\xcb\x50\x4b\x87\x9b\xc0\x1b\x43\xf3\xf2\x5d\xa7\x22\xf0\xc8\xb5\xca\x51\xe9\x9b\x7f\x2c\x09\xee\xc0\xb6\xc0\x97\x4b\xc0\x9a\x64\x51\x68\xbe\x0e\x82\x68\x7c\xeb\xd2\xe3\x2a\xe9\x96\x1c\x0f\x47\x0f\x56\xa2\x87\x7b\x89\x39\x87\x75\x3b\x83\x05\x50\x3f\xf2\xba\x16\xa6\xf5\x5f\x33\x03\x2e\x38\x11\xf8\x0d\x8d\x4c\xdb\x86\x0d\xe0\x2e\x2e\x94\xa8\x3a\x4e\x7f\xee\xef\x8d\x1c\x51\x6f\xa5\x73\xde\x89\xcc\x9c\x38\xce\xf7\xae\xb7\x4e\xb2\x5e\xef\xf6\x38\x25\x54\x2b\xfa\xf3\x1b\x36\x84\x56\xab\x6f\x37\x6c\x0c\xad\xe2\xaa\x1b\x36\x06\x6d\x74\xda\x8c\xa1\xe7\xd9\xb9\xfb\x70\x91\x1a\xb0\x33\xb0\xac\x23\xea\x2b\xbe\xfc\x69\x23\xf1\xe5\x2d\xcb\x04\xae\x26\x04\x95\x33\x35\x5a\xf1\xbe\x68\xdf\x17\xcb\x5d\xd3\xeb\xee\xeb\x05\xdd\x01\xc2\x2d\x2e\x4d\xc8\x8f\x5f\xe9\xac\x34\x41\xe3\xf3\x2b\x4d\x78\xa7\x60\xbf\xd1\xd2\x84\x76\x75\x04\x9a\xbc\x37\x6c\xbb\x4a\xae\x1c\xdd\xc9\x90\xc2\xe7\x29\x43\x0a\xf6\x1b\x95\x21\xcf\xf2\x96\xfe\xf7\x50\xe9\x2f\x6c\xbc\xbc\x45\x77\x63\xbb\x5d\xe5\x76\x16\x1c\xb4\x8a\x87\xb7\x05\x07\x25\xd8\x57\xc9\xb1\xed\x9a\x6e\xeb\xf0\xb3\xf5\x76\x95\xba\x8b\xcd\x12\xcc\x53\x2c\xa4\x6b\x5d\xa0\xaf\xc6\xd4\x0b\x85\x5d\x13\xba\xae\x76\xd3\x84\x48\xe0\xa1\x20\xb1\xf9\xc4\x0a\x1b\x35\x16\xf3\xe5\x05\x0a\xd0\xb4\xe8\x96\x06\xa3\x1f\x9b\xb2\xc4\x3d\x6c\xcf\x99\x53\xc5\x01\xe7\xd8\xa0\xd3\xb2\xd8\x64\xce\x15\x19\xe1\xf2\x21\x89\xd1\x29\x1e\x4a\x73\xb5\x0a\x73\x0e\x41\x37\x07\xd5\x1c\x38\x9e\x62\x8e\x69\x80\x01\xa5\x10\xaa\xa3\x6c\x43\x98\x5c\xc1\xd1\x29\x11\xb3\x6c\x32\x0a\x58\x3c\xd6\x0d\xc6\x21\x91\x24\x9c\x64\x12\xd3\xb8\x6c\x37\xe7\x67\x43\x0b\xc1\x31\x2e\x5e\xec\x8f\xf6\x7f\x9c\xa3\xb8\x7e\x06\xd6\x09\xb8\x19\x3e\xe2\x18\x91\x86\x5a\x13\xa7\xed\x96\xcd\xfb\xd2\x2a\x47\x78\x04\xfd\x30\x45\x53\x63\x33\x9c\x98\xb1\x54\xa8\x03\x9a\x5b\x33\xa3\xc0\xd0\x17\x3f\x1a\x96\x1b\x7a\xe0\x47\x49\x93\xcd\xb0\x84\x24\xe7\xff\x6a\xcf\x0e\xd9\xba\x2f\x56\x38\xaa\x2c\xa0\x1f\x56\x28\x5a\x6c\x8c\x0d\x8f\xd6\x62\xc3\xa3\xbe\xd8\xe0\xc8\x6e\x42\x6f\x6c\x78\xb4\x21\x36\x64\x9c\xb4\xe7\x42\xc6\x49\x5f\x4c\x70\x54\xad\x40\x3f\x4c\x90\x94\xd8\x0c\x0f\x52\x1c\x9f\xaf\xb8\xb3\xfc\x10\x52\x1c\x23\x2a\x48\x00\xe7\x98\xa7\x84\xd1\x7a\x98\xa5\x91\x4a\x1e\xcc\x8f\x13\x2b\x1f\x8d\xaf\x9d\xba\xf9\x18\xdb\x11\xd8\xf2\x66\xe5\x8d\xe7\xbf\x63\x7a\x2a\x66\x6b\xd4\xbc\x6a\x04\x3d\xcd\x6b\x7d\x0a\xb5\x56\xa8\xe3\xdc\x5f\x8d\x3a\x84\xae\x49\x9d\x02\x41\x4f\xd4\xf1\x59\x66\x5c\xa5\xca\xd5\x0a\x33\x4f\xec\x6e\x2b\x61\xfb\xce\x48\x6d\x2b\x61\x6f\x2a\x67\x5a\xd6\x2d\xac\x59\xad\xd0\x13\xd7\x7e\xf6\x60\x5a\x83\xab\x9b\xa7\xee\x06\x1c\x9f\xe2\xcb\xdb\x74\xb6\xef\x1d\x4b\x4b\x6b\xab\xa2\x45\x09\x6d\x84\x2c\x6e\xdc\x61\x99\xa8\x5f\xb9\xe3\x90\xdf\xc5\xb6\x3c\xa3\xeb\x5e\xd5\x73\x08\x29\xa1\xa7\x11\x06\xca\xc2\xf2\xa6\xa3\xa3\x00\x45\x11\x9c\x72\x94\xcc\xe6\xb2\x84\xe9\xe8\x82\x9c\x91\x04\x87\x44\xdf\xe9\x24\x7f\x8d\x9f\xa2\x28\xfa\xa4\x20\xe7\x52\x62\xc8\x73\x56\xc5\xda\x7e\xe9\xc9\x20\x3f\x9f\x71\x31\xd4\x99\x07\x2a\x15\xfa\x7b\x22\x64\x49\x57\x98\x12\xc4\x51\x14\xe1\xa8\x2b\x7c\x29\xe6\x04\xd9\xb0\xe5\xff\x2b\xef\x73\xb1\x2d\xea\x55\x08\x56\xbb\x28\xa9\x0c\x8f\x4b\x08\xc9\xa9\x81\x4b\x80\x17\xde\xb9\x2e\x8f\x09\x62\x53\x6d\x4d\x5d\xb2\x9e\xb2\x38\x46\x34\x04\x9e\x51\x19\x52\x23\x28\x7b\xf2\x2b\xb0\x73\xcc\x39\x09\xd5\xf5\x5c\x57\x90\x62\x01\x48\x28\xc9\xd3\xd9\xcf\x08\x9f\xe3\xe5\x0c\x5c\x83\x87\x70\x78\x86\x7a\xd7\x9e\x5f\x26\x1c\xa7\x2a\xee\x0f\x18\xe6\x01\x99\x44\x18\x04\x2b\x16\x83\x6d\x87\x41\x9b\x15\x93\x67\x74\xa1\x16\x2a\x19\x2b\xf1\x1f\xef\xad\xe1\x7d\x34\x86\xfd\xba\x99\x5c\xb4\x64\x86\x93\xa3\x4d\xc3\x6f\x5a\x34\xb6\x1d\x05\x4d\x70\x0a\x84\x2a\xae\xcc\xa5\x6c\xb9\x34\xc1\xab\xe2\x6e\xf0\xd7\xce\x91\x1e\xe3\xc9\xc1\xee\x93\xa3\xe1\xa7\xd1\xf1\xf1\xb8\x72\xcd\xd7\x5d\xdb\x02\xb9\x7b\xc5\xc4\xd7\x59\xee\x5c\x90\x28\x82\x09\x86\x09\xcb\x68\xa8\x38\x8d\xe2\xf2\xb0\x57\x60\x89\xd7\x41\x46\x91\x25\x0d\x6a\x71\xea\xbe\x9d\xb3\x09\x63\x48\xb8\x96\x44\xf8\x8f\x31\xe3\x90\x06\x2c\x51\xeb\x02\xaa\xfb\x58\x40\x96\x30\x0a\xf8\x92\x38\x0a\x03\x37\x2d\xaf\x39\x7d\x0c\x4f\x97\x27\x9f\xcd\x5e\xda\xdb\xe9\xd7\x15\x03\xd3\xf3\x8f\xa8\x13\xdd\x78\x4e\xcf\x09\x67\x34\xc6\x54\xc0\x39\xe2\x04\x4d\xa2\x4e\xb5\xe4\xe8\xaf\xc7\x1b\x50\x06\x42\x2b\xd2\x75\x31\xd6\xca\x41\x51\xec\x58\x01\xda\x9c\x5a\x34\xd8\xe8\x1c\x99\x8f\xe4\x97\xfc\x5a\x28\x31\xb7\xa6\xd6\x37\x2e\xc6\x53\x12\x19\x05\x67\x55\x21\x7e\x41\xba\x15\xda\xad\x69\xb7\x75\xce\x26\xc3\xea\xe0\xee\x6b\xb0\xed\xb7\x4d\xc2\x55\xf4\xd7\x46\xc2\x9b\x0a\x24\x35\xad\x7c\xca\x02\xff\x28\x17\xde\x05\x53\x47\x8d\xaa\x2e\x19\x27\xa1\x9b\xf7\xae\xa6\xaa\xc3\x24\x8b\xa2\xa7\x1c\x87\xd6\x9a\xc3\xf6\xdd\x9e\xa3\x6e\x21\x14\xee\x9b\x2e\x0d\xab\xfd\x27\xdd\xc9\x55\xed\x92\xdf\xf2\xb9\xe9\xb2\xdf\x05\xa3\x08\x01\xa2\xd2\xb8\x94\x35\x11\x6a\x75\x40\xdd\x09\xc0\xc4\x0c\xf3\x39\xe4\x72\xc1\xa6\x7d\xc7\x9f\x35\xc5\x55\xd6\x97\x1a\x5e\xe5\x07\x69\x1a\xde\x58\x8b\x41\xfd\xee\x0f\xad\xd1\x2a\x61\xdc\x58\xaf\xba\xb4\xbf\x58\xc2\xe5\x56\x57\x11\x64\x91\x70\x82\xa9\x07\x33\x96\x1a\xd4\xb5\x51\x9d\xfd\x3c\xcf\x91\x72\x30\x3b\x43\xfd\xef\xee\x93\x1d\x11\x24\xff\x9f\x85\xc9\xee\x13\x4f\x65\xff\x6f\x96\x0a\x90\x03\xde\x49\x77\x65\x8f\x27\x44\xb9\x10\x67\xed\xad\xd9\x5d\xb9\xce\x27\x71\x27\xc7\x1c\x27\xa4\x2e\x69\x00\x2c\xe6\x0a\x97\x08\xd0\x46\x2f\x5b\x2b\x95\x2e\xe8\x6f\x15\x90\xf8\xf2\xf7\xc0\x7e\x13\x74\x09\xb4\x94\x75\x28\x24\x30\xdf\x70\x80\xc2\x50\xfa\x60\x88\x51\x92\x60\x15\x20\xa0\xe2\x95\xad\x46\xab\xb9\xfc\xbc\x3f\xaa\x5e\x30\x7e\xf6\xcc\x7c\x05\x54\x6d\xa4\xff\xcb\xf8\x99\x8c\x84\xc3\xca\xd5\x4d\x62\x06\x3b\x8b\xb9\x95\xca\xa2\xa6\x72\x65\xcb\xe1\x90\x73\xb4\xf6\xec\xa7\x3d\xb3\xa5\x5d\x66\xe5\xd9\xe2\xb5\xc4\x5e\xa4\xa9\x7c\x6b\x10\x31\x96\xd4\xd3\x5b\xae\xf4\xd4\x94\x19\xc9\xd7\x14\x23\x60\x14\xd8\x96\xef\x96\xf6\x0e\x08\xcc\xd5\x9d\x51\x17\x33\x12\xcc\xa0\x08\x41\x89\x7c\xdc\x74\x2f\x8c\xc5\x7e\xb8\x56\x3d\x1c\x45\xb4\x86\xf0\xcc\xe0\x07\xce\xb0\x6d\xd3\x76\x7d\x64\x1f\xf3\x49\xad\x32\xde\x67\xf8\x0a\xd8\x14\x24\x61\xf2\xb1\xc9\x48\xb6\x18\x6d\x8c\x42\x0c\xe8\x1c\x91\x28\x6f\xc0\x59\x76\x3a\xf3\x0b\x52\xf4\xec\xad\x45\x97\x74\xd0\xbc\x72\xa7\x7a\xd2\x72\x77\x4c\xa3\x04\xaa\x31\xa8\x59\x65\xbb\x12\xa1\x21\xbe\x74\x19\x5c\xa3\x0a\xd7\x90\x64\x54\x90\xc8\xc3\xbe\xbc\x9c\x2a\x03\x92\x70\x1c\x92\x00\x09\x0c\x58\x12\x1f\x09\x9c\xaa\x29\x8c\x5a\x54\x50\x3c\x91\xfa\xa9\x19\x20\x67\x2c\x23\x78\x5b\xb4\x48\x01\xf1\x79\xb3\x10\x26\x78\xca\xd4\x03\xcc\xaf\xe6\xbc\x1b\x75\x99\xe8\xf5\x09\x6e\xc9\x74\xac\x31\xd4\xf9\xeb\x69\xf9\xac\xeb\x3e\x15\x9b\x45\xea\xf3\x8d\xd6\xd4\x55\x4b\x31\x3b\x8c\xc3\xb1\x32\x84\xc7\x83\x39\xe5\x76\x4b\xb1\x4f\xcf\x88\xf4\x6e\x23\x73\x7e\x7f\x99\x8c\x16\x12\x1a\x9c\xa9\xb6\xd5\xb9\xa1\x5b\xe8\xa3\xe0\x52\x13\xb9\xee\x6b\x8d\x49\xd6\xc9\xbd\x71\x6e\xe6\x50\x22\xa9\x46\x9f\x97\x55\xb3\x6e\xf6\x96\x54\xb3\xc5\x77\xa8\x61\x56\xbc\xf4\x9d\x85\xdf\x27\xf5\xd0\xd9\xe5\x61\xe4\x38\x7c\xd6\x26\xde\x4b\xb2\x92\x29\x48\xb6\xeb\x7b\xae\x95\x12\x7d\xce\x90\x29\xbe\x6c\x5c\x35\x77\xae\x97\x77\x96\x73\xbb\x09\x73\xe1\x46\x6b\x4d\xcd\x1e\xc7\xca\x00\x7a\x35\x67\x00\xfd\x41\x6c\x79\xb0\x3a\x0f\x9c\x8e\xc8\xee\xf9\xbe\x18\x6d\xea\x72\x14\x68\xb6\x32\x9d\x67\x8f\xf2\xa5\x77\xcf\xd8\x90\x12\x41\x50\x44\xfe\xc1\x29\xbc\x7c\xfd\xf6\xc3\xfb\x4f\xaf\x0f\x5f\x3d\xd7\x53\xe4\x8f\x87\xbf\x7f\x78\x0e\x84\xe6\x65\x9f\xf0\xc3\x1c\xe0\x40\xbf\xfc\x61\x04\x2f\xa7\x05\x5c\x0a\x72\x56\x79\x1f\x88\x80\x57\x1f\xde\xbd\x57\x97\xdf\xa4\x69\x16\xe3\x30\x87\x78\xfc\x18\xee\xee\xcc\x71\x98\x53\x9d\x7e\x9b\x46\xbd\x0f\xce\x18\x1c\x55\x25\xc2\x3a\x2f\x73\xf0\xa7\xfa\xe7\x75\xdc\xb8\x3d\x3f\x0b\x6b\x14\x90\xda\xf5\xce\xe0\xec\x50\xc3\x82\x03\x34\x46\xf8\x25\x94\xcf\xe1\x4e\x8e\x44\xd0\x02\x98\x35\x29\xb4\x00\xd5\x70\x7e\x48\x0e\xd5\x7c\x92\x54\x67\x35\xa6\x86\xa7\x5d\xd4\xf9\x98\x72\x63\x4b\xd5\x35\x0b\xaf\x1d\xba\x3b\xd7\xda\x37\x1f\xde\x97\x6a\x5c\xd1\x5d\xad\xb5\x95\x97\x5a\x77\x17\xa0\x1d\x1a\xac\x00\x1e\x3f\xae\xc2\x6f\xd5\xb7\x05\xf6\x26\xb1\xbd\xb1\xa2\xd9\x98\xa8\xf7\x61\x7c\x3d\x60\xe7\x38\xc4\x54\xca\x70\x0a\x59\x8a\x43\x08\x33\x15\x35\xa0\x4c\xcc\xe4\xf3\xa0\x98\x2d\x8b\x59\x7e\x28\x47\xc6\x03\x9c\x9f\x3c\xa1\x6b\x6f\x18\x37\x1d\x41\x01\x1e\x7e\x52\xc1\x64\x29\xe6\x96\x74\xbb\xad\xd3\xfd\xaf\xf4\x5e\x43\x8d\x83\xb5\xb0\x33\x4d\x2f\x18\x5f\xe5\x2c\xa2\xaf\x82\x1c\xde\x6a\xd4\x30\x2b\xab\x4a\x54\x13\x89\x4d\xe9\xb1\x7e\x54\xb7\xfd\x72\xa2\x4d\xb5\x3c\xea\x68\x2b\x35\xb4\x19\x27\xc3\x72\x49\xea\x96\x2d\xc6\xb5\xa8\x5e\x48\x38\x0e\x54\x5e\xf5\x40\x25\x1d\x3a\x8e\xdf\xd7\xd5\x18\xbf\x8c\x67\x43\x20\xd2\xbe\x13\x05\x62\x3f\x9f\x73\x66\x3a\xec\x08\xbc\xc3\x0c\x0f\x07\x60\xd7\x0d\x68\xaf\x1f\xe0\xa9\x23\xb0\x92\x9e\x80\xcb\x70\x37\x78\x67\x58\x8f\x6b\x8e\xa5\x74\xe8\xd8\x7e\x5a\x36\xd2\x77\x61\x1a\xd7\xb4\x33\x52\x1a\x3b\xb4\x33\x95\x5f\xc6\xc2\xec\x79\x09\xb7\xad\x56\xba\x00\xb0\x97\x4a\xfb\xa7\x52\x6d\xb2\xd1\x9c\xe7\xc8\x2b\xc3\x6d\x9d\xd4\xaf\x37\xd0\xc5\x3b\xb5\xae\x56\x6a\xcc\x51\x11\xe1\x17\x3b\x13\xf2\x6d\x95\xd5\xdd\x09\xf5\x65\x9d\x7c\xe3\x65\xbe\xe5\xa0\xa2\xf8\xe6\x7e\xb1\x24\x4d\x70\x50\xdb\x3b\xa1\x9f\x79\x7d\xe4\x48\x03\xcf\xf7\x33\xe8\xdf\x23\xc2\x76\x75\xa8\x3c\xb9\x5a\xea\x48\x75\x8f\xe9\xc7\xca\x3c\xdb\x66\x8a\xaa\x6b\xf3\x7f\xed\xe4\xab\xf2\xc7\xc7\x23\xc3\x7f\x77\x9e\x1c\xec\x1c\x1f\xab\x95\xfb\xc3\xe1\x9f\x68\xf8\xcf\xf0\xe4\xde\xce\x93\x83\xe3\xe3\xd1\xc2\xa3\xdd\xff\xdc\xdd\x7d\xa2\x9e\xdf\xab\x3c\x3f\x3e\x1e\x1e\x1f\x8f\x4e\xee\xed\x3e\xb9\x9b\x13\xe4\x4e\x4e\x94\x65\x8d\x1b\x14\xf5\x5e\x4a\xb5\xdc\xea\xf4\xe5\xdf\x01\x00\x00\xff\xff\xbf\xbc\x46\x94\xce\x9b\x00\x00")

func githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpctlSpecsOpspecOpfileJsonschemaJson,
		"github.com/opctl/specs/opspec/opfile/jsonschema.json",
	)
}

func githubComOpctlSpecsOpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opctl/specs/opspec/opfile/jsonschema.json", size: 39886, mode: os.FileMode(420), modTime: time.Unix(1555629478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opctl/specs/opspec/opfile/jsonschema.json": githubComOpctlSpecsOpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opctl": &bintree{nil, map[string]*bintree{
			"specs": &bintree{nil, map[string]*bintree{
				"opspec": &bintree{nil, map[string]*bintree{
					"opfile": &bintree{nil, map[string]*bintree{
						"jsonschema.json": &bintree{githubComOpctlSpecsOpspecOpfileJsonschemaJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
