// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type fakeContainerCaller struct {
	CallStub        func(inboundScope map[string]*model.Value, containerID string, scgContainerCall *model.SCGContainerCall, opHandle model.DataHandle, rootOpID string) error
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		inboundScope     map[string]*model.Value
		containerID      string
		scgContainerCall *model.SCGContainerCall
		opHandle         model.DataHandle
		rootOpID         string
	}
	callReturns struct {
		result1 error
	}
	callReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeContainerCaller) Call(inboundScope map[string]*model.Value, containerID string, scgContainerCall *model.SCGContainerCall, opHandle model.DataHandle, rootOpID string) error {
	fake.callMutex.Lock()
	ret, specificReturn := fake.callReturnsOnCall[len(fake.callArgsForCall)]
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		inboundScope     map[string]*model.Value
		containerID      string
		scgContainerCall *model.SCGContainerCall
		opHandle         model.DataHandle
		rootOpID         string
	}{inboundScope, containerID, scgContainerCall, opHandle, rootOpID})
	fake.recordInvocation("Call", []interface{}{inboundScope, containerID, scgContainerCall, opHandle, rootOpID})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(inboundScope, containerID, scgContainerCall, opHandle, rootOpID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.callReturns.result1
}

func (fake *fakeContainerCaller) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *fakeContainerCaller) CallArgsForCall(i int) (map[string]*model.Value, string, *model.SCGContainerCall, model.DataHandle, string) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.callArgsForCall[i].inboundScope, fake.callArgsForCall[i].containerID, fake.callArgsForCall[i].scgContainerCall, fake.callArgsForCall[i].opHandle, fake.callArgsForCall[i].rootOpID
}

func (fake *fakeContainerCaller) CallReturns(result1 error) {
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeContainerCaller) CallReturnsOnCall(i int, result1 error) {
	fake.CallStub = nil
	if fake.callReturnsOnCall == nil {
		fake.callReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.callReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeContainerCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeContainerCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
