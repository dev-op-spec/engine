// Code generated by counterfeiter. DO NOT EDIT.
package dereferencer

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeScopeObjectPathDeReferencer struct {
	DeReferenceScopeObjectPathStub        func(ref string, scope map[string]*model.Value) (string, bool, error)
	deReferenceScopeObjectPathMutex       sync.RWMutex
	deReferenceScopeObjectPathArgsForCall []struct {
		ref   string
		scope map[string]*model.Value
	}
	deReferenceScopeObjectPathReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	deReferenceScopeObjectPathReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeScopeObjectPathDeReferencer) DeReferenceScopeObjectPath(ref string, scope map[string]*model.Value) (string, bool, error) {
	fake.deReferenceScopeObjectPathMutex.Lock()
	ret, specificReturn := fake.deReferenceScopeObjectPathReturnsOnCall[len(fake.deReferenceScopeObjectPathArgsForCall)]
	fake.deReferenceScopeObjectPathArgsForCall = append(fake.deReferenceScopeObjectPathArgsForCall, struct {
		ref   string
		scope map[string]*model.Value
	}{ref, scope})
	fake.recordInvocation("DeReferenceScopeObjectPath", []interface{}{ref, scope})
	fake.deReferenceScopeObjectPathMutex.Unlock()
	if fake.DeReferenceScopeObjectPathStub != nil {
		return fake.DeReferenceScopeObjectPathStub(ref, scope)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.deReferenceScopeObjectPathReturns.result1, fake.deReferenceScopeObjectPathReturns.result2, fake.deReferenceScopeObjectPathReturns.result3
}

func (fake *fakeScopeObjectPathDeReferencer) DeReferenceScopeObjectPathCallCount() int {
	fake.deReferenceScopeObjectPathMutex.RLock()
	defer fake.deReferenceScopeObjectPathMutex.RUnlock()
	return len(fake.deReferenceScopeObjectPathArgsForCall)
}

func (fake *fakeScopeObjectPathDeReferencer) DeReferenceScopeObjectPathArgsForCall(i int) (string, map[string]*model.Value) {
	fake.deReferenceScopeObjectPathMutex.RLock()
	defer fake.deReferenceScopeObjectPathMutex.RUnlock()
	return fake.deReferenceScopeObjectPathArgsForCall[i].ref, fake.deReferenceScopeObjectPathArgsForCall[i].scope
}

func (fake *fakeScopeObjectPathDeReferencer) DeReferenceScopeObjectPathReturns(result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeObjectPathStub = nil
	fake.deReferenceScopeObjectPathReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeObjectPathDeReferencer) DeReferenceScopeObjectPathReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeObjectPathStub = nil
	if fake.deReferenceScopeObjectPathReturnsOnCall == nil {
		fake.deReferenceScopeObjectPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.deReferenceScopeObjectPathReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeObjectPathDeReferencer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deReferenceScopeObjectPathMutex.RLock()
	defer fake.deReferenceScopeObjectPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeScopeObjectPathDeReferencer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
