// Code generated by counterfeiter. DO NOT EDIT.
package dereferencer

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeScopeFilePathDeReferencer struct {
	DeReferenceScopeFilePathStub        func(ref string, scope map[string]*model.Value) (string, bool, error)
	deReferenceScopeFilePathMutex       sync.RWMutex
	deReferenceScopeFilePathArgsForCall []struct {
		ref   string
		scope map[string]*model.Value
	}
	deReferenceScopeFilePathReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	deReferenceScopeFilePathReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeScopeFilePathDeReferencer) DeReferenceScopeFilePath(ref string, scope map[string]*model.Value) (string, bool, error) {
	fake.deReferenceScopeFilePathMutex.Lock()
	ret, specificReturn := fake.deReferenceScopeFilePathReturnsOnCall[len(fake.deReferenceScopeFilePathArgsForCall)]
	fake.deReferenceScopeFilePathArgsForCall = append(fake.deReferenceScopeFilePathArgsForCall, struct {
		ref   string
		scope map[string]*model.Value
	}{ref, scope})
	fake.recordInvocation("DeReferenceScopeFilePath", []interface{}{ref, scope})
	fake.deReferenceScopeFilePathMutex.Unlock()
	if fake.DeReferenceScopeFilePathStub != nil {
		return fake.DeReferenceScopeFilePathStub(ref, scope)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.deReferenceScopeFilePathReturns.result1, fake.deReferenceScopeFilePathReturns.result2, fake.deReferenceScopeFilePathReturns.result3
}

func (fake *fakeScopeFilePathDeReferencer) DeReferenceScopeFilePathCallCount() int {
	fake.deReferenceScopeFilePathMutex.RLock()
	defer fake.deReferenceScopeFilePathMutex.RUnlock()
	return len(fake.deReferenceScopeFilePathArgsForCall)
}

func (fake *fakeScopeFilePathDeReferencer) DeReferenceScopeFilePathArgsForCall(i int) (string, map[string]*model.Value) {
	fake.deReferenceScopeFilePathMutex.RLock()
	defer fake.deReferenceScopeFilePathMutex.RUnlock()
	return fake.deReferenceScopeFilePathArgsForCall[i].ref, fake.deReferenceScopeFilePathArgsForCall[i].scope
}

func (fake *fakeScopeFilePathDeReferencer) DeReferenceScopeFilePathReturns(result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeFilePathStub = nil
	fake.deReferenceScopeFilePathReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeFilePathDeReferencer) DeReferenceScopeFilePathReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeFilePathStub = nil
	if fake.deReferenceScopeFilePathReturnsOnCall == nil {
		fake.deReferenceScopeFilePathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.deReferenceScopeFilePathReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeFilePathDeReferencer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deReferenceScopeFilePathMutex.RLock()
	defer fake.deReferenceScopeFilePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeScopeFilePathDeReferencer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
