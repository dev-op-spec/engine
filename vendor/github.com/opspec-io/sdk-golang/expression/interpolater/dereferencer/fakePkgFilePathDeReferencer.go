// Code generated by counterfeiter. DO NOT EDIT.
package dereferencer

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakePkgFilePathDeReferencer struct {
	DeReferencePkgFilePathStub        func(ref string, scope map[string]*model.Value, pkgHandle model.PkgHandle) (string, bool, error)
	deReferencePkgFilePathMutex       sync.RWMutex
	deReferencePkgFilePathArgsForCall []struct {
		ref       string
		scope     map[string]*model.Value
		pkgHandle model.PkgHandle
	}
	deReferencePkgFilePathReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	deReferencePkgFilePathReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakePkgFilePathDeReferencer) DeReferencePkgFilePath(ref string, scope map[string]*model.Value, pkgHandle model.PkgHandle) (string, bool, error) {
	fake.deReferencePkgFilePathMutex.Lock()
	ret, specificReturn := fake.deReferencePkgFilePathReturnsOnCall[len(fake.deReferencePkgFilePathArgsForCall)]
	fake.deReferencePkgFilePathArgsForCall = append(fake.deReferencePkgFilePathArgsForCall, struct {
		ref       string
		scope     map[string]*model.Value
		pkgHandle model.PkgHandle
	}{ref, scope, pkgHandle})
	fake.recordInvocation("DeReferencePkgFilePath", []interface{}{ref, scope, pkgHandle})
	fake.deReferencePkgFilePathMutex.Unlock()
	if fake.DeReferencePkgFilePathStub != nil {
		return fake.DeReferencePkgFilePathStub(ref, scope, pkgHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.deReferencePkgFilePathReturns.result1, fake.deReferencePkgFilePathReturns.result2, fake.deReferencePkgFilePathReturns.result3
}

func (fake *fakePkgFilePathDeReferencer) DeReferencePkgFilePathCallCount() int {
	fake.deReferencePkgFilePathMutex.RLock()
	defer fake.deReferencePkgFilePathMutex.RUnlock()
	return len(fake.deReferencePkgFilePathArgsForCall)
}

func (fake *fakePkgFilePathDeReferencer) DeReferencePkgFilePathArgsForCall(i int) (string, map[string]*model.Value, model.PkgHandle) {
	fake.deReferencePkgFilePathMutex.RLock()
	defer fake.deReferencePkgFilePathMutex.RUnlock()
	return fake.deReferencePkgFilePathArgsForCall[i].ref, fake.deReferencePkgFilePathArgsForCall[i].scope, fake.deReferencePkgFilePathArgsForCall[i].pkgHandle
}

func (fake *fakePkgFilePathDeReferencer) DeReferencePkgFilePathReturns(result1 string, result2 bool, result3 error) {
	fake.DeReferencePkgFilePathStub = nil
	fake.deReferencePkgFilePathReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakePkgFilePathDeReferencer) DeReferencePkgFilePathReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.DeReferencePkgFilePathStub = nil
	if fake.deReferencePkgFilePathReturnsOnCall == nil {
		fake.deReferencePkgFilePathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.deReferencePkgFilePathReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakePkgFilePathDeReferencer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deReferencePkgFilePathMutex.RLock()
	defer fake.deReferencePkgFilePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakePkgFilePathDeReferencer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
