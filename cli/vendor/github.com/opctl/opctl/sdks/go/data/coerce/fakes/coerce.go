// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/data/coerce"
	"github.com/opctl/opctl/sdks/go/model"
)

type FakeCoerce struct {
	ToArrayStub        func(*model.Value) (*model.Value, error)
	toArrayMutex       sync.RWMutex
	toArrayArgsForCall []struct {
		arg1 *model.Value
	}
	toArrayReturns struct {
		result1 *model.Value
		result2 error
	}
	toArrayReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	ToBooleanStub        func(*model.Value) (*model.Value, error)
	toBooleanMutex       sync.RWMutex
	toBooleanArgsForCall []struct {
		arg1 *model.Value
	}
	toBooleanReturns struct {
		result1 *model.Value
		result2 error
	}
	toBooleanReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	ToFileStub        func(*model.Value, string) (*model.Value, error)
	toFileMutex       sync.RWMutex
	toFileArgsForCall []struct {
		arg1 *model.Value
		arg2 string
	}
	toFileReturns struct {
		result1 *model.Value
		result2 error
	}
	toFileReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	ToNumberStub        func(*model.Value) (*model.Value, error)
	toNumberMutex       sync.RWMutex
	toNumberArgsForCall []struct {
		arg1 *model.Value
	}
	toNumberReturns struct {
		result1 *model.Value
		result2 error
	}
	toNumberReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	ToObjectStub        func(*model.Value) (*model.Value, error)
	toObjectMutex       sync.RWMutex
	toObjectArgsForCall []struct {
		arg1 *model.Value
	}
	toObjectReturns struct {
		result1 *model.Value
		result2 error
	}
	toObjectReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	ToStringStub        func(*model.Value) (*model.Value, error)
	toStringMutex       sync.RWMutex
	toStringArgsForCall []struct {
		arg1 *model.Value
	}
	toStringReturns struct {
		result1 *model.Value
		result2 error
	}
	toStringReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCoerce) ToArray(arg1 *model.Value) (*model.Value, error) {
	fake.toArrayMutex.Lock()
	ret, specificReturn := fake.toArrayReturnsOnCall[len(fake.toArrayArgsForCall)]
	fake.toArrayArgsForCall = append(fake.toArrayArgsForCall, struct {
		arg1 *model.Value
	}{arg1})
	fake.recordInvocation("ToArray", []interface{}{arg1})
	fake.toArrayMutex.Unlock()
	if fake.ToArrayStub != nil {
		return fake.ToArrayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toArrayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToArrayCallCount() int {
	fake.toArrayMutex.RLock()
	defer fake.toArrayMutex.RUnlock()
	return len(fake.toArrayArgsForCall)
}

func (fake *FakeCoerce) ToArrayCalls(stub func(*model.Value) (*model.Value, error)) {
	fake.toArrayMutex.Lock()
	defer fake.toArrayMutex.Unlock()
	fake.ToArrayStub = stub
}

func (fake *FakeCoerce) ToArrayArgsForCall(i int) *model.Value {
	fake.toArrayMutex.RLock()
	defer fake.toArrayMutex.RUnlock()
	argsForCall := fake.toArrayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCoerce) ToArrayReturns(result1 *model.Value, result2 error) {
	fake.toArrayMutex.Lock()
	defer fake.toArrayMutex.Unlock()
	fake.ToArrayStub = nil
	fake.toArrayReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToArrayReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toArrayMutex.Lock()
	defer fake.toArrayMutex.Unlock()
	fake.ToArrayStub = nil
	if fake.toArrayReturnsOnCall == nil {
		fake.toArrayReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toArrayReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToBoolean(arg1 *model.Value) (*model.Value, error) {
	fake.toBooleanMutex.Lock()
	ret, specificReturn := fake.toBooleanReturnsOnCall[len(fake.toBooleanArgsForCall)]
	fake.toBooleanArgsForCall = append(fake.toBooleanArgsForCall, struct {
		arg1 *model.Value
	}{arg1})
	fake.recordInvocation("ToBoolean", []interface{}{arg1})
	fake.toBooleanMutex.Unlock()
	if fake.ToBooleanStub != nil {
		return fake.ToBooleanStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toBooleanReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToBooleanCallCount() int {
	fake.toBooleanMutex.RLock()
	defer fake.toBooleanMutex.RUnlock()
	return len(fake.toBooleanArgsForCall)
}

func (fake *FakeCoerce) ToBooleanCalls(stub func(*model.Value) (*model.Value, error)) {
	fake.toBooleanMutex.Lock()
	defer fake.toBooleanMutex.Unlock()
	fake.ToBooleanStub = stub
}

func (fake *FakeCoerce) ToBooleanArgsForCall(i int) *model.Value {
	fake.toBooleanMutex.RLock()
	defer fake.toBooleanMutex.RUnlock()
	argsForCall := fake.toBooleanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCoerce) ToBooleanReturns(result1 *model.Value, result2 error) {
	fake.toBooleanMutex.Lock()
	defer fake.toBooleanMutex.Unlock()
	fake.ToBooleanStub = nil
	fake.toBooleanReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToBooleanReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toBooleanMutex.Lock()
	defer fake.toBooleanMutex.Unlock()
	fake.ToBooleanStub = nil
	if fake.toBooleanReturnsOnCall == nil {
		fake.toBooleanReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toBooleanReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToFile(arg1 *model.Value, arg2 string) (*model.Value, error) {
	fake.toFileMutex.Lock()
	ret, specificReturn := fake.toFileReturnsOnCall[len(fake.toFileArgsForCall)]
	fake.toFileArgsForCall = append(fake.toFileArgsForCall, struct {
		arg1 *model.Value
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ToFile", []interface{}{arg1, arg2})
	fake.toFileMutex.Unlock()
	if fake.ToFileStub != nil {
		return fake.ToFileStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToFileCallCount() int {
	fake.toFileMutex.RLock()
	defer fake.toFileMutex.RUnlock()
	return len(fake.toFileArgsForCall)
}

func (fake *FakeCoerce) ToFileCalls(stub func(*model.Value, string) (*model.Value, error)) {
	fake.toFileMutex.Lock()
	defer fake.toFileMutex.Unlock()
	fake.ToFileStub = stub
}

func (fake *FakeCoerce) ToFileArgsForCall(i int) (*model.Value, string) {
	fake.toFileMutex.RLock()
	defer fake.toFileMutex.RUnlock()
	argsForCall := fake.toFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCoerce) ToFileReturns(result1 *model.Value, result2 error) {
	fake.toFileMutex.Lock()
	defer fake.toFileMutex.Unlock()
	fake.ToFileStub = nil
	fake.toFileReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToFileReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toFileMutex.Lock()
	defer fake.toFileMutex.Unlock()
	fake.ToFileStub = nil
	if fake.toFileReturnsOnCall == nil {
		fake.toFileReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toFileReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToNumber(arg1 *model.Value) (*model.Value, error) {
	fake.toNumberMutex.Lock()
	ret, specificReturn := fake.toNumberReturnsOnCall[len(fake.toNumberArgsForCall)]
	fake.toNumberArgsForCall = append(fake.toNumberArgsForCall, struct {
		arg1 *model.Value
	}{arg1})
	fake.recordInvocation("ToNumber", []interface{}{arg1})
	fake.toNumberMutex.Unlock()
	if fake.ToNumberStub != nil {
		return fake.ToNumberStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toNumberReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToNumberCallCount() int {
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	return len(fake.toNumberArgsForCall)
}

func (fake *FakeCoerce) ToNumberCalls(stub func(*model.Value) (*model.Value, error)) {
	fake.toNumberMutex.Lock()
	defer fake.toNumberMutex.Unlock()
	fake.ToNumberStub = stub
}

func (fake *FakeCoerce) ToNumberArgsForCall(i int) *model.Value {
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	argsForCall := fake.toNumberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCoerce) ToNumberReturns(result1 *model.Value, result2 error) {
	fake.toNumberMutex.Lock()
	defer fake.toNumberMutex.Unlock()
	fake.ToNumberStub = nil
	fake.toNumberReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToNumberReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toNumberMutex.Lock()
	defer fake.toNumberMutex.Unlock()
	fake.ToNumberStub = nil
	if fake.toNumberReturnsOnCall == nil {
		fake.toNumberReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toNumberReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToObject(arg1 *model.Value) (*model.Value, error) {
	fake.toObjectMutex.Lock()
	ret, specificReturn := fake.toObjectReturnsOnCall[len(fake.toObjectArgsForCall)]
	fake.toObjectArgsForCall = append(fake.toObjectArgsForCall, struct {
		arg1 *model.Value
	}{arg1})
	fake.recordInvocation("ToObject", []interface{}{arg1})
	fake.toObjectMutex.Unlock()
	if fake.ToObjectStub != nil {
		return fake.ToObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToObjectCallCount() int {
	fake.toObjectMutex.RLock()
	defer fake.toObjectMutex.RUnlock()
	return len(fake.toObjectArgsForCall)
}

func (fake *FakeCoerce) ToObjectCalls(stub func(*model.Value) (*model.Value, error)) {
	fake.toObjectMutex.Lock()
	defer fake.toObjectMutex.Unlock()
	fake.ToObjectStub = stub
}

func (fake *FakeCoerce) ToObjectArgsForCall(i int) *model.Value {
	fake.toObjectMutex.RLock()
	defer fake.toObjectMutex.RUnlock()
	argsForCall := fake.toObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCoerce) ToObjectReturns(result1 *model.Value, result2 error) {
	fake.toObjectMutex.Lock()
	defer fake.toObjectMutex.Unlock()
	fake.ToObjectStub = nil
	fake.toObjectReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToObjectReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toObjectMutex.Lock()
	defer fake.toObjectMutex.Unlock()
	fake.ToObjectStub = nil
	if fake.toObjectReturnsOnCall == nil {
		fake.toObjectReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toObjectReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToString(arg1 *model.Value) (*model.Value, error) {
	fake.toStringMutex.Lock()
	ret, specificReturn := fake.toStringReturnsOnCall[len(fake.toStringArgsForCall)]
	fake.toStringArgsForCall = append(fake.toStringArgsForCall, struct {
		arg1 *model.Value
	}{arg1})
	fake.recordInvocation("ToString", []interface{}{arg1})
	fake.toStringMutex.Unlock()
	if fake.ToStringStub != nil {
		return fake.ToStringStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.toStringReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoerce) ToStringCallCount() int {
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	return len(fake.toStringArgsForCall)
}

func (fake *FakeCoerce) ToStringCalls(stub func(*model.Value) (*model.Value, error)) {
	fake.toStringMutex.Lock()
	defer fake.toStringMutex.Unlock()
	fake.ToStringStub = stub
}

func (fake *FakeCoerce) ToStringArgsForCall(i int) *model.Value {
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	argsForCall := fake.toStringArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCoerce) ToStringReturns(result1 *model.Value, result2 error) {
	fake.toStringMutex.Lock()
	defer fake.toStringMutex.Unlock()
	fake.ToStringStub = nil
	fake.toStringReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) ToStringReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.toStringMutex.Lock()
	defer fake.toStringMutex.Unlock()
	fake.ToStringStub = nil
	if fake.toStringReturnsOnCall == nil {
		fake.toStringReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.toStringReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoerce) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.toArrayMutex.RLock()
	defer fake.toArrayMutex.RUnlock()
	fake.toBooleanMutex.RLock()
	defer fake.toBooleanMutex.RUnlock()
	fake.toFileMutex.RLock()
	defer fake.toFileMutex.RUnlock()
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	fake.toObjectMutex.RLock()
	defer fake.toObjectMutex.RUnlock()
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCoerce) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ coerce.Coerce = new(FakeCoerce)
