// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
	"github.com/opctl/opctl/sdks/go/opspec/interpreter/call/op/params"
)

type FakeCoercer struct {
	CoerceStub        func(map[string]*model.Value, map[string]*model.Param, string) (map[string]*model.Value, error)
	coerceMutex       sync.RWMutex
	coerceArgsForCall []struct {
		arg1 map[string]*model.Value
		arg2 map[string]*model.Param
		arg3 string
	}
	coerceReturns struct {
		result1 map[string]*model.Value
		result2 error
	}
	coerceReturnsOnCall map[int]struct {
		result1 map[string]*model.Value
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCoercer) Coerce(arg1 map[string]*model.Value, arg2 map[string]*model.Param, arg3 string) (map[string]*model.Value, error) {
	fake.coerceMutex.Lock()
	ret, specificReturn := fake.coerceReturnsOnCall[len(fake.coerceArgsForCall)]
	fake.coerceArgsForCall = append(fake.coerceArgsForCall, struct {
		arg1 map[string]*model.Value
		arg2 map[string]*model.Param
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Coerce", []interface{}{arg1, arg2, arg3})
	fake.coerceMutex.Unlock()
	if fake.CoerceStub != nil {
		return fake.CoerceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.coerceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCoercer) CoerceCallCount() int {
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	return len(fake.coerceArgsForCall)
}

func (fake *FakeCoercer) CoerceCalls(stub func(map[string]*model.Value, map[string]*model.Param, string) (map[string]*model.Value, error)) {
	fake.coerceMutex.Lock()
	defer fake.coerceMutex.Unlock()
	fake.CoerceStub = stub
}

func (fake *FakeCoercer) CoerceArgsForCall(i int) (map[string]*model.Value, map[string]*model.Param, string) {
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	argsForCall := fake.coerceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCoercer) CoerceReturns(result1 map[string]*model.Value, result2 error) {
	fake.coerceMutex.Lock()
	defer fake.coerceMutex.Unlock()
	fake.CoerceStub = nil
	fake.coerceReturns = struct {
		result1 map[string]*model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoercer) CoerceReturnsOnCall(i int, result1 map[string]*model.Value, result2 error) {
	fake.coerceMutex.Lock()
	defer fake.coerceMutex.Unlock()
	fake.CoerceStub = nil
	if fake.coerceReturnsOnCall == nil {
		fake.coerceReturnsOnCall = make(map[int]struct {
			result1 map[string]*model.Value
			result2 error
		})
	}
	fake.coerceReturnsOnCall[i] = struct {
		result1 map[string]*model.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCoercer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCoercer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ params.Coercer = new(FakeCoercer)
