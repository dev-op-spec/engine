// Code generated by go-bindata.
// sources:
// ../../opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _OpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x6b\x73\xdb\xb6\xb2\xdf\xf3\x2b\x30\x6a\x7a\x6b\xdf\x44\x94\x9d\x36\x69\xeb\x4e\xc6\xe3\xe6\x71\x6f\xee\x34\x8f\x69\x1e\x77\xa6\x96\x93\x81\x48\xc8\x42\x4d\x02\x0c\x08\xfa\xd1\x73\xf2\xdf\xcf\x00\xa0\xf8\x04\x40\x88\x22\x2d\x3b\x91\xbf\x24\x22\x17\x8b\xc5\xbe\xb0\x58\x2c\xc0\x7f\xdd\x01\x60\x74\x37\xf1\x17\x28\x82\xa3\x03\x30\x5a\x70\x1e\x1f\x4c\x26\x7f\x27\x94\x8c\xd5\x53\x8f\xb2\xd3\x49\xc0\xe0\x9c\x8f\xf7\x7e\x9e\xa8\x67\xdf\x8d\xee\xcb\x76\x38\x58\xb6\x49\x0e\x26\x13\x1a\x27\x31\xf2\x3d\x4c\x27\x7b\xde\xbe\xf7\xf3\x84\xc6\xde\x55\x14\x7a\x19\x1a\x81\x52\x35\xe3\x98\x87\x48\x34\x7c\x1d\x83\xe7\x38\x44\xea\x69\x80\x12\x9f\xe1\x98\x63\x4a\xc4\xbb\xa7\x68\x8e\x09\x4a\x00\x24\x80\xc6\x0a\x22\x66\x34\x46\x8c\x63\x94\x8c\x0e\x80\x20\x1c\x80\x11\x81\x11\xca\x7f\x35\xb1\xbc\x82\x11\x02\x74\x0e\xf8\x02\x2d\xd1\x48\x30\x7e\x15\x4b\x0a\x12\xce\x30\x39\x1d\xc9\xc7\x5f\xd4\xdb\x1a\x0a\x13\xe6\xa7\xc5\x4f\x5d\x07\x77\x19\x9a\x0b\xb0\xef\x26\x05\xd5\x13\x4c\xe2\x94\x27\x93\x18\x72\x8e\x18\x79\x53\xbc\xf8\xfe\xe1\xef\xe3\x4f\x1e\x1c\xff\x73\x34\xfe\x6b\x6f\xfc\xeb\xf7\x0f\x9f\x7e\xff\xe0\xf7\x72\xcb\x00\xb3\xca\xcf\x12\x2d\x15\xda\x55\x0f\x65\xb2\x61\x10\x60\x01\x07\xc3\x37\x65\xf6\xcd\x61\x98\xa0\xfb\x86\xb1\xbd\x81\x0c\x46\x88\x23\x26\x46\x56\x08\x40\x82\x36\x88\x2f\x75\x06\xc0\xe8\xb8\x3c\x8e\x93\x7b\x95\x97\x00\x8c\x28\x41\xaf\x05\x5f\x8e\x4b\x0f\x41\x05\x44\x82\x31\xf4\x39\xc5\x0c\x05\x0d\x48\x35\x24\xc6\xe0\xd5\xa8\xf6\xfc\xa4\xf2\xfb\xcb\xfd\x75\x3a\x98\x51\x1a\x22\x48\x86\xec\x22\xc0\x6c\x48\xf4\x73\x61\x56\x03\xe2\x27\x69\x34\x43\x83\x8e\x80\xce\xfe\x46\x3e\x1f\xb2\x87\x84\xfa\x67\x68\xd8\x1e\x4a\xde\xc5\xd8\x43\xe9\xd7\x49\xb9\x37\x9d\xbb\xcb\xdf\x29\x13\xa8\x3f\x76\x34\xf7\x1c\x38\x77\xc4\x12\x9d\xb4\xfa\x51\x03\xa8\xe6\x1b\x8e\x04\x28\x88\xcd\x1e\xc2\x85\x7e\x0d\xe2\x26\xc0\xf5\x7b\xd1\x8a\x5c\xea\xe3\x91\x14\xcf\x61\x1a\x72\x13\xb5\xcb\x49\x45\xeb\x9f\xf4\x18\x71\xf2\x16\xf9\x0c\x19\x51\xd6\x98\xff\x42\x4d\x34\xb2\x03\x80\x13\x90\xa8\xc6\x4d\xc4\x25\x6a\x0c\xce\x4c\x4f\x8f\x4f\x49\xc2\x19\xc4\x84\xeb\x85\xd6\x50\x9a\x27\xa5\x06\x56\x32\x32\x7b\xd6\xc2\xb4\x68\x0a\xa8\x2a\xf6\x0b\x8e\x22\x33\x60\x93\x69\xff\xf7\xf6\xf5\x2b\xf0\x56\x06\x21\xe0\xb8\x86\x06\x9c\xa1\xab\x0b\xca\x82\x93\x9d\x65\x10\xc3\x29\x0d\x13\x0f\x23\x3e\x97\x81\xcf\x82\x47\x61\x16\xfd\x5c\x30\x7c\xba\xe0\xe3\x52\x68\x34\x3e\x87\x21\x0e\xa0\xc0\x37\xde\xdb\xff\x2e\x41\xbe\xfc\xef\x23\x6f\x7f\x6f\x57\x3b\x52\x30\x80\x52\x2b\xc6\x96\x9f\x94\x84\x58\x7e\x5c\xfa\xaf\xd6\x4b\x68\xe9\xd5\x28\x89\x1c\x04\x5e\x47\x08\x78\x40\xd6\xff\x6a\xe1\x3c\x24\x57\x9a\xe8\xa3\xfc\x67\x1a\xce\xed\x13\x9c\x45\x78\xad\x03\x6d\x13\xee\x6d\xe5\x47\x75\xb6\x75\x7b\x73\xb2\x92\x59\x44\xf0\x72\x2d\xf7\xb4\x6c\xdf\xa3\x71\xec\xe5\xc6\xf1\xd0\xee\x97\x96\x9e\x1a\x13\x8e\x4e\x11\x33\x03\x46\x98\xe0\x28\x8d\x46\x07\x60\x6f\x35\xe6\x60\xb2\x1e\x73\xb2\xf6\x43\x31\x67\x7f\x93\xcc\x49\x09\xfe\x9c\xa2\xb5\xf8\x53\x42\x31\xd4\xbc\xf6\xa3\x03\x8b\x8c\x01\x07\x30\x98\x99\x96\x25\xd6\x48\xb6\x19\xcb\xdc\x69\x41\x59\x8f\x43\x6c\x51\x7e\x3e\x82\xde\xe2\xeb\x0c\xa1\x5b\x84\xfd\xbb\x02\xde\xc6\xd8\x0e\x01\xf1\x53\x05\x0d\xce\x61\x98\xa2\xae\x71\x70\xaf\xba\x23\x16\xf6\xbd\xe9\x4d\x80\x99\x9b\xce\x3c\xc5\x0c\xf9\x9c\xb2\x6b\x5b\x99\xe5\x24\x46\x90\x9d\x05\xf4\x82\xe8\x99\x5f\x23\xf3\x65\x06\x0c\x30\x01\xc7\xe7\x7b\xde\x83\x5f\xc0\x13\x1a\x45\x94\x88\x17\x20\xb9\x22\x1c\x5e\x2a\x97\x75\x30\x99\xc8\x64\xa2\x2f\x5f\x8b\x4e\xa4\xdb\x12\x4d\x26\xbb\x00\x13\x3f\x4c\x03\x4c\x4e\xc1\xff\x3c\x7f\x09\x38\x9c\x85\x08\xa0\x4b\x8e\x48\x82\xa9\x81\x12\x5d\xc6\xcf\x22\x47\xb0\xa6\x2e\xfe\x26\x78\x0f\x67\x09\x0d\x53\x8e\x40\x0c\xf9\x02\x30\x4a\x39\x0a\x00\xe4\x20\xc0\x0c\xf8\x94\x70\x88\x89\x18\x83\xca\x93\x02\xca\xee\x03\x08\x18\x0a\x21\xc7\xe7\x59\x1b\x31\xdd\xb0\x98\x21\xd1\x70\xce\x68\x04\x2e\x16\x88\xa1\x2c\xdb\x28\x57\x80\x1c\x32\x8e\x82\xfe\xc6\xdc\x6d\x45\x1a\xe4\xfa\xb7\xf6\xaa\xb4\x57\x6b\x94\x79\xb0\xde\xcc\x51\x60\x73\xb3\xc7\xe7\x38\x44\x5b\x07\xbe\x35\x1a\xfd\xa0\x33\xa3\x11\xea\x74\xc3\xec\x25\xcb\xeb\xf6\x66\x31\x0a\x9f\x9b\xcd\xbc\x92\xb0\x5b\xab\xb1\xa9\x81\x3e\xef\xde\xa7\x52\xaa\x1e\x36\x9e\x5c\x54\x64\x5c\x5f\x76\x31\x0c\x65\x66\xa8\x5b\x4e\x51\x34\x1e\x68\x51\xfa\xe0\x81\xc3\x8a\x4b\x25\x9c\x8d\x60\xed\xe9\x9c\xbe\xad\x41\x49\xcf\x90\xca\x31\xe5\x67\xf4\x19\x18\xd3\x7a\x79\x99\xcb\xeb\x26\x31\xd1\x78\x28\x89\xb9\xac\x91\xbf\x45\x89\x21\x22\xd3\x22\x9d\x04\x26\xda\x0e\x25\x2f\x97\x9c\xd8\xfa\xf2\x6a\xf3\xe0\x19\xef\x56\xe2\xe8\x9c\xb2\x08\x9a\xfc\xbb\x84\xd0\xef\xb7\x97\xff\xac\x89\xe0\xdc\x1d\xb7\xa5\xbd\x80\x46\x80\x7f\xaa\xbd\xd1\xa4\x3c\xad\xcc\x90\x98\xd2\x9d\xb0\xd5\xe2\x30\x2b\x6c\xa6\x5a\xe6\x51\x4a\xa8\x65\xb7\x16\x28\x7d\xb6\x17\xf4\x99\x1f\xce\xb2\x83\x5d\xd3\xc3\xa2\xf9\x50\x96\xe0\x60\x08\x36\xf5\xb5\xe4\x7d\xd7\x1a\xb4\x6a\x3e\xd0\xa0\x7f\x1a\x6a\xd0\x69\xc8\x71\x1c\xa2\xee\x93\x54\x81\x61\xa8\x84\xf7\x40\x43\x27\xd4\xea\x93\x6c\x63\x26\x94\x0f\xa5\xdc\x0f\xaf\x6f\x4b\xb6\xc3\x64\x6a\xe2\xe5\xd2\x81\x77\xe2\xa6\x6c\x3c\x14\x3f\x5d\x0c\xe7\xab\x0e\x73\x34\x4f\x6f\xdc\x4e\x46\x06\xd3\xdb\x7a\x5e\xe1\x73\x5b\xcf\xbf\x96\xb0\xdb\xf5\xbc\xc3\xba\x75\xc0\xf5\xbc\xea\x61\xe3\xeb\x79\x45\xc6\x06\xaa\x85\x0c\x85\xaa\x76\xde\x19\x4a\x86\x0a\x5c\xab\x38\xd5\x05\x24\x01\x43\x17\x89\x83\x5b\x7d\xe4\x3d\xf4\x1e\x59\xfc\xea\xba\xe1\xbc\xcb\x0e\x2d\x58\xa3\x70\xe4\xd6\x55\x84\xf4\x13\xd5\x6f\xb3\x47\xd7\x27\xf6\x6d\xf6\xe8\xdb\x94\x58\x80\x62\x44\x02\x44\xfc\x35\x3c\x79\x19\xc7\x50\x6b\x2a\x5b\xfd\xe1\x9a\xee\xfb\xf6\x79\xd7\x61\xeb\x0f\xdb\x76\xea\x4a\x84\x0c\x3c\x01\x6c\x53\x9b\x2d\xd9\xb7\x11\x49\xc3\xd0\x9e\xc3\x33\x85\xc2\xcb\x3f\x53\x6a\x6e\x35\x37\x12\xc1\xcb\xf5\x23\xc2\x0a\x92\xa1\x1c\x89\xcb\x44\x30\x64\xa9\x66\x0f\x6c\x2a\x23\x19\x8a\x4d\x2e\x69\x88\xc1\xd8\xf4\xcd\x67\xba\x3a\x4c\xfc\xdb\x4c\xd7\x4d\x95\xcc\xaa\xbe\xd4\x61\x21\xde\x22\xb6\x78\x70\xf7\x60\x5b\x4d\x3b\x24\x1b\x40\x87\x64\x42\x39\xed\x21\xba\x68\x4b\x7a\xe8\xf9\x54\x9c\xc1\xf5\xdd\xda\xb7\x1f\x6e\xb1\x47\x5d\xae\x02\x35\x10\xdc\x06\xde\x1a\x9a\xe7\xef\x7a\x55\x81\x47\xb6\x5d\x8e\x12\x6d\xee\xb1\x24\xb0\x07\xb6\x4b\x7c\x99\x06\xac\xc9\x16\x89\xe6\xeb\x60\x88\xc2\xb7\x2e\x3f\xae\xe2\x7e\xd9\xf1\xd0\x7b\xb0\x12\x3f\xec\x5b\xcc\x19\xac\x7d\x32\xa8\x80\xba\xb1\xd7\xb6\x31\xad\xfe\xda\x05\x70\xc1\x30\x47\xaf\x49\xa8\x3b\x36\xac\x01\xb7\x49\x21\x47\xd5\x73\xfa\x73\x7f\xcf\xb3\x44\xbd\x25\xe2\x9c\x13\x99\x19\x73\xac\xef\x6d\x6f\xad\x6c\xbd\xde\xe3\x71\x52\xa9\x56\x9c\xcf\x6f\xd8\x10\x3a\xed\xbe\xdd\xb0\x31\x74\x8a\xab\x6e\xd8\x18\x94\xd3\xe9\x32\x86\x81\x57\xe7\xf6\xcb\x45\x6a\xc0\xd6\xc0\xb2\x8e\x68\xa8\xf8\xf2\xe7\x8d\xc4\x97\xb7\x2c\x13\xb8\x9a\x12\x94\xee\xd4\xe8\x24\xfb\x65\xfb\xa1\x44\x6e\x5b\x5e\xf7\x5f\x2f\x68\x0f\x10\x6e\x71\x69\x42\x76\xfd\x4a\x6f\xa5\x09\x0a\x9f\x5b\x69\xc2\x5b\x09\xfb\x8d\x96\x26\x74\xab\x23\x50\xec\xbd\x61\xc7\x55\x32\xe3\xe8\x4f\x87\x24\x3e\x47\x1d\x92\xb0\xdf\xa8\x0e\x39\x96\xb7\x0c\x7f\x86\x4a\xf5\xb0\xf1\xf2\x16\x45\xc6\xf6\xb8\xca\xed\x2c\x38\xe8\x14\x0f\x6f\x0b\x0e\x72\xb0\xaf\x52\x62\xdb\x3d\xdd\xce\xe1\x67\xe7\xe3\x2a\xf5\x29\x36\x8d\x11\x4b\x10\x17\x53\x6b\x85\xbf\x0a\xd3\x20\x1c\xb6\x2d\xe8\xfa\x3a\x4d\x13\x40\x8e\xc6\x1c\x47\xfa\x1b\x2b\x4c\xdc\xa8\xe6\xcb\x97\x28\x80\xe2\x45\xbf\x3c\xf0\x7e\x6c\xcb\x12\x0f\x70\x3c\xa7\xe0\x8a\x05\xce\x72\x40\xa7\x63\xb1\x49\x21\x15\x11\xe1\xb2\x31\x8e\xe0\x29\x1a\x0b\x77\xb5\x8a\x70\x8e\x80\x6a\x0e\x64\x73\xc0\xd0\x1c\x31\x44\x7c\x04\x60\x02\x02\x79\x95\x6d\x00\x66\x57\xe0\xf8\x14\xf3\x45\x3a\xf3\x7c\x1a\x4d\x54\x83\x49\x80\x05\x0b\x67\xa9\xc0\x34\xc9\xdb\x15\xf2\x6c\x69\xc1\x19\x42\xcb\x17\xfb\xde\xfe\x8f\x05\x8a\xeb\x17\x60\x9d\x81\x9b\x91\x23\x8a\x20\x6e\xa9\x35\xb1\xfa\x6e\xd1\x7c\x28\xab\xb2\x84\x47\x60\x18\xa1\x28\x6e\x6c\x46\x12\x0b\x9a\x70\x79\x41\x73\x67\x61\x2c\x31\x0c\x25\x8f\x96\xed\x86\x01\xe4\x91\xf3\x64\x33\x22\xc1\xf1\xf9\x4f\xdd\xc5\x21\x5a\x0f\x25\x0a\x4b\x95\x05\x18\x46\x14\x92\x17\x1b\x13\xc3\xa3\xb5\xc4\xf0\x68\x28\x31\x58\xb2\x9b\x60\x30\x31\x3c\xda\x90\x18\x52\x86\xbb\x4b\x21\x65\x78\x28\x21\x58\xaa\x56\xc0\x30\x42\x10\x9c\xd8\x8c\x0c\x12\x14\x9d\xaf\x78\xb2\xfc\x08\x24\x28\x82\x84\x63\x1f\x9c\x23\x96\x60\x4a\xea\x61\x96\x42\x2a\x64\x50\x5c\x27\x96\x3f\x9a\x5c\x3b\x77\xb3\x31\x76\x63\xb0\xe1\xcd\xca\x07\xcf\xff\x40\xe4\x94\x2f\xd6\xa8\x79\x55\x08\x06\x5a\xd7\xba\x14\x6a\xad\x50\xc7\xb9\xbf\x1a\x77\x30\x59\x93\x3b\x4b\x04\x03\x71\xc7\x65\x9b\x71\x95\x2a\x57\x23\x4c\x91\xd8\xdd\x56\xc2\x0e\x9d\x91\xda\x56\xc2\xde\x54\xc9\x74\xac\x5b\x58\xb3\x5a\x61\x20\xa9\xfd\xe2\x20\xb4\x96\xa9\xae\x48\xdd\x8d\x18\x3a\x45\x97\xb7\xe9\x6e\xdf\x3b\x86\x96\xc6\x56\xcb\x16\x39\xb4\x16\x72\xf9\xc5\x1d\x9a\xf2\xfa\x27\x77\x2c\xfa\x5b\x6d\xcb\x52\xb2\xee\xa7\x7a\x8e\x40\x82\xc9\x69\x88\x00\xa1\x41\xfe\xa5\xa3\x63\x1f\x86\x21\x38\x65\x30\x5e\x14\xba\x84\x88\x77\x81\xcf\x70\x8c\x02\xac\xbe\xe9\x24\x7e\x4d\x9e\xc0\x30\xfc\x24\x21\x0b\x2d\xd1\xe4\x39\xcb\x6a\x6d\xfe\xe8\xc9\x28\xbb\x9f\xb1\x1a\xea\x14\x81\x4a\x89\xff\x8e\x08\x69\xdc\x17\xa6\x18\x32\x18\x86\x28\xec\x1b\xdf\x1f\xb4\x3f\x1a\x13\xc4\x30\xec\x8d\x42\x85\xcd\x42\x5f\xf6\xbf\xfc\xab\x33\xa6\xad\xc7\x92\x58\x6b\x9f\x73\xca\x83\xf8\x1c\x42\xe8\xd3\xc8\x66\x66\x95\x77\xb6\x4f\xdc\xf8\x91\xae\x02\xa8\xae\xff\x4f\x68\x14\x41\x12\x00\x96\x12\x11\xf8\x43\x90\x53\xf2\x1b\xa0\xe7\x88\x31\x1c\xc8\x8f\x88\x5d\x81\x04\x71\x00\xb9\xb4\x0f\x95\xa3\x0d\xd1\x39\x6a\xe6\x09\x5b\xe6\x31\xcb\xfc\x55\x27\xed\xd9\x65\xcc\x50\x22\x57\x27\x3e\x45\xcc\xc7\xb3\x10\x01\x4e\x97\x5b\xd6\xa6\x2b\xab\xf5\xee\x83\xa5\xa4\x52\xb1\x15\xaf\x31\x37\x4a\xf3\x9e\xec\xd7\x9d\x78\xd5\xcf\x6a\xee\xb5\xd6\x0d\xbb\x6d\x4b\xdb\x74\x51\x35\x46\x09\xc0\x44\x4a\xa3\xd0\xae\x66\xe1\x84\x53\x3d\xe0\xe8\xe3\xce\xb1\x1a\xe3\xc9\xc1\xee\xe1\xf1\xf8\x93\x37\x9d\x4e\x4a\x1f\x21\xbb\x6b\xda\xbe\xb7\xef\xe7\xb8\x4e\xe5\x3b\x17\x38\x0c\xc1\x0c\x81\x19\x4d\x49\x20\x25\x0c\xa3\xfc\x2a\x5a\x40\x63\xa7\x6b\x96\x42\x43\x92\xd6\x10\x72\xb8\x12\x67\x52\xc2\x00\x33\xa5\x81\xe0\xbf\x26\x94\x81\xc4\xa7\xb1\xdc\xb5\x90\xe4\x23\x0e\xd2\x98\x12\x80\x2e\xb1\xa5\x6c\x71\x53\x7a\x9a\xf1\x45\xf3\xb4\xb9\x24\x6e\x8f\x1d\x9c\x43\x91\xba\x41\x20\x72\xfe\x01\xea\x6d\xc2\xac\x57\x5a\x35\x5c\xa5\x56\x09\xb8\x9b\x85\x04\xfd\x78\xfc\xf1\xb1\xd9\x02\x5a\xa8\xb5\x51\x9d\x37\x6f\xb5\x06\x4c\x4a\xea\x75\x31\x51\xd6\x41\x60\xe4\xba\x41\x65\xb6\x0d\xb0\x46\xfe\xa9\x1f\x67\x5d\x42\xe8\x62\x0e\xb9\xab\xab\x54\xc5\x5b\x77\x03\x56\x4c\xff\x38\x87\xe0\x1d\x6e\x20\x72\x29\xcb\xfa\x33\xdf\xf8\xe4\x14\x40\x97\xef\x32\x58\x96\x1e\xa5\x75\xd5\xe8\xe3\x74\x7a\x77\x3a\xdd\xf1\xee\x4d\xa7\xbb\x77\xdb\xeb\x0a\x4f\xda\x26\xa2\x67\xe4\x1c\x33\x4a\x22\x44\x38\x38\x87\x0c\xc3\x59\xa8\x9b\x92\xac\x2e\x60\x8e\x43\xad\xed\xad\x3a\x29\x3e\xc7\xda\xbe\xb7\xd3\x61\xf3\x6f\xa0\xe9\x50\x5e\xc5\x7e\x0d\xf3\xe1\x8a\x0e\x60\xe3\x93\x9c\x8c\x94\xbb\x68\x78\x5b\xc9\xab\xe2\xd5\xea\x1e\x85\xa8\xe0\x5d\xef\x2e\x36\x17\x91\xe8\xea\x47\xe3\x34\x0c\x9f\x30\x14\x18\xab\x47\x57\x27\xb7\x40\xd9\x41\x09\xec\xdf\x2a\xd5\xd4\x6b\x34\x7d\x68\x67\x3d\xaa\x7d\xa6\x39\x7f\xae\xfb\x5c\x73\xc5\x09\x02\x1f\x12\xe1\x4c\xf2\xaa\x16\xb9\xbf\x23\xbf\xea\x40\xf9\x02\xb1\x02\xb2\x59\x72\x6b\x3e\xb3\x69\x4c\x52\xe6\x15\xc2\x9a\x57\xd9\x55\xa8\x9a\x37\xc6\x72\x5e\xb7\x2f\xc0\xd6\x78\x15\x53\xa6\xad\x38\x6e\x9c\x10\x17\x70\x99\x97\x95\x0c\xa9\x32\x8e\x53\xf9\x60\x41\x13\x8d\x79\xb6\x9a\xaf\xdb\x4c\x73\x2c\x27\x94\x9d\xb1\xfa\x77\xf7\x70\x87\xfb\xf1\xbf\xd3\x20\xde\x3d\x74\x34\xee\xff\xa5\x09\x07\x62\xc0\x3b\xc9\xae\xa0\x78\x86\xe5\x94\x61\x8d\x18\xf4\xd3\x93\x3d\x85\x69\xb9\xc7\xb6\xa1\xe5\xa0\x16\x79\xd4\x07\xd9\xc5\xf6\x3a\x1b\x8e\x3a\x76\xd1\x29\xc8\x70\x95\xe1\x81\xf9\x7b\xdd\x39\x50\x23\xeb\xb2\xd4\xb2\xec\x58\x08\x0c\x02\x31\xaf\x82\x08\xc6\x31\x0a\x54\xec\x97\xbd\x32\x55\xd2\xb5\x1f\x12\x18\x8e\xab\x17\x94\x9d\x3d\xd5\x7f\xa8\xab\x36\xd2\xff\xa7\xec\x4c\x2c\x00\x82\xd2\x07\xb6\xf8\x02\xec\x54\x73\x4b\xa5\xad\x67\x39\x3d\x35\x43\x1c\xeb\x68\xcd\x39\x6a\x73\x76\x4f\x4d\x83\xa5\x67\xd5\x8f\x47\x3b\xb1\xa6\xd4\xd7\x08\xd7\xe7\x63\xcd\x81\x0b\x31\xd4\x98\xa1\x00\xfb\x90\x23\x80\x44\xbc\x04\x39\x4a\x64\x00\x25\x17\xab\xca\x05\xc1\x30\x04\xcb\x20\x30\x39\xc3\x42\x23\x3c\x7d\x4e\xb0\xe9\x86\x0d\xf9\x35\x8d\x02\xaa\xf1\x81\x8b\x05\xf6\x17\x55\x5a\x38\x4b\x11\xa0\x4c\xd1\x54\x93\x84\x31\xc8\xd5\xc6\x28\x96\x09\x13\x80\x11\xfa\xdc\x54\xda\x7a\x74\xd6\x50\xda\x2e\xfd\x5c\xe2\x44\xb7\x53\x35\x44\x5f\x44\x13\x89\x0e\xd2\x0f\xe5\xcf\x5c\x87\x55\xf9\x7d\x52\x9f\x2d\x6d\xee\x4d\x88\xc8\x25\x55\xfb\x4e\x68\x0c\x9e\x03\xa1\xb9\xea\xe3\xc4\x90\x21\x80\x3e\xa7\x50\x57\x48\xda\xba\xd5\x69\xdd\xe4\xec\x2d\xf3\xb0\xc9\x70\xb7\xd5\x35\x67\x3a\xbb\x0a\xf3\xd5\xf2\x4b\x35\x04\x17\x93\x22\xe4\xb3\x89\xc0\x38\xeb\x3b\xe7\x0e\x9a\xb4\x13\xfd\x45\x25\x46\xa5\x21\x57\x85\xd2\x90\x1f\xf8\x56\x6f\xd6\xd0\x9b\xc2\x2f\xac\x22\x02\x42\x37\xa6\x3d\xd6\x38\xc3\x9c\x64\xfb\xa2\x9d\x84\x69\xdc\xd8\x61\xeb\xb8\x7b\x96\x6d\x37\xb7\x07\x38\x2f\x08\xe6\x18\x86\xf8\x1f\x94\x80\x17\xaf\xde\xbc\x7f\xf7\xe9\xd5\xd1\xcb\x67\x6a\x41\xf1\xe1\xe8\x8f\xf7\xcf\x00\x26\x59\x99\x23\xf8\xa1\x00\x38\x50\x2f\x7f\xf0\xc0\x8b\xf9\x12\x2e\x01\x24\x0d\xc3\xfb\x00\x73\xf0\xf2\xfd\xdb\x77\xf2\x63\x2f\x49\x92\x46\x28\xc8\x20\x1e\x3f\x06\x77\x77\x0a\x1c\x96\x28\x69\xdd\x98\xb6\xac\x94\xe6\xa8\xb6\x63\xc2\xeb\x3a\xb3\x54\x9a\xf0\xc6\x96\x55\x05\xad\xeb\x24\x60\x5b\xfe\xe6\x00\xe6\x65\x70\x0e\x62\x5c\x0e\xe7\x10\x2d\xf7\x5e\xb4\xde\x7e\xe4\x9e\xe2\xbe\xd6\x9c\x58\xb3\xe2\x23\x7f\x65\xb1\xad\xc2\xaa\x5e\xbf\x7f\x97\x9b\x59\xc9\xb6\x94\x55\x95\x5e\x2a\xdb\xaa\x40\x5b\x2c\x4c\x02\x3c\x7e\x5c\x86\xdf\x9a\x57\x0d\xa3\x4d\xdd\x36\xae\x56\xb6\x74\xe1\xaa\x1b\x0a\x02\x0f\x22\x42\xf7\x12\x90\x26\x28\x00\x41\x2a\x83\x02\x98\xf2\x85\x78\xee\x43\xb5\x76\xc2\x7c\x91\x5d\xee\x90\x32\x1f\x65\x37\x18\xa8\xea\x08\xca\x3a\x5d\x65\x90\x26\x88\x19\x92\x7d\x3a\x42\x6f\x65\x10\xa3\x0d\x17\x92\xe4\x82\x32\xd3\x9d\x35\x5f\xc5\xb0\x5b\x55\xdf\x9e\x60\xce\x35\xc3\xc6\xbe\xda\xab\x1e\x33\xd0\xfa\x0d\x87\xb6\xcd\x06\x9d\x09\xb4\x04\x8f\xa5\x5a\xc9\x94\xe1\x71\x11\x87\x56\xc9\xbb\x63\x20\xd5\x92\xf2\xa9\xa5\xe8\xd7\x4c\xf8\xe4\x05\x71\xa6\x9a\xae\x25\x80\xb9\xa4\xcb\x3d\x7d\x63\x52\xdb\xf6\x90\xb8\x52\x67\x57\x23\xd5\xb5\x70\xa2\x2e\x65\x81\x4b\x4c\xbd\x2a\xb8\xca\x16\xfd\x4c\xfa\x44\xb5\xf2\xf7\x45\x97\x01\x48\x70\x94\x86\x1c\x12\x44\xd3\x24\xbc\xf2\xdc\xa3\x6f\x06\x89\x7e\xdb\xcc\xc5\x7c\x8b\xba\xbd\x0a\x90\x44\x69\x57\xf1\x54\x57\x81\xdc\xc8\x68\x2e\x20\x07\xa7\x88\x27\xb2\x66\x8e\x12\x80\xa0\xbf\x28\x18\xb0\xac\x21\x0d\xa9\x4e\xf7\x5d\xe4\xd8\x24\xec\xdc\x50\x27\xd3\x9d\x1b\x12\xe3\xfa\x06\x25\x79\xaa\xe1\xa2\xd1\xca\x8c\x35\xc3\x25\x8d\xcd\xaa\x38\x4d\x66\xa5\x5e\x6f\xd6\xa8\x4a\xa5\xa1\x83\x98\x54\x4d\xa5\xa4\xb6\x2d\x6d\x0a\x7d\x4e\x55\x68\xd2\xb0\x28\x7d\xbc\xd8\xd0\x9a\x96\x7d\x4c\x8d\x4c\x81\x46\xae\xa0\x6d\x1f\x6e\xc5\x7e\x53\xc2\xb5\xa7\xce\x1d\xfa\x35\x6a\x5b\x27\x17\x53\x9f\xd1\x04\x5c\xd9\xa8\xef\x03\xec\x21\x4f\xfe\x54\x39\x13\x4e\xe5\x73\x59\x2e\xdb\xcb\x1e\x6a\xbf\xdb\xa1\x37\xd6\xab\x29\x89\xb7\x93\xf6\xec\x12\x73\xe0\xe7\x1b\x16\x25\x4a\x7e\xcb\x17\xf6\x01\x98\xa1\x39\x65\xa8\x46\xb6\xd7\x67\x79\xb2\x8b\xb7\xc5\xf3\x89\xc2\x50\x0f\xf6\x3a\xf9\xf7\x95\x2e\x61\xab\x71\xed\x43\x5e\x93\x05\x83\x40\x6d\x29\xaa\xa2\x9c\x86\x6c\x57\x5f\xa4\x60\x12\xa0\x4b\xc7\x50\x7d\x49\x47\xad\xd3\x44\x2c\xbc\xa9\x8f\xa5\xec\x24\xbe\x7c\xcb\x2b\x82\x01\x02\xf0\x1c\xe2\x50\xb6\xe3\x0b\x46\xd3\xd3\x45\xf7\x70\xde\x3c\x03\x96\x7f\x9f\xa1\x2b\xb7\xa5\x8a\x00\xec\x6f\xe8\x67\xe8\xaa\xd3\xc0\x57\xad\xfe\xab\xa5\x1c\x74\x15\x80\x9a\xb1\xaa\x85\x54\x7f\xa3\x55\x0e\xf3\x26\x0a\xba\x75\x71\x36\xf8\x19\xa9\xfc\x28\x08\x5c\xa6\x6d\x96\xc7\x9c\xb2\x33\xda\xe5\xa3\x4e\x75\xde\x67\xa7\xb8\x33\xdf\x58\xf2\xd1\x7a\xc6\xd1\x38\x89\x91\x5f\x3b\x88\xa5\x9e\x39\x75\x72\xac\x80\x8b\xc3\x51\xea\xb7\x87\xe9\xae\xca\x97\xcc\xae\x1a\x84\x94\x0f\xac\x7f\x28\xcd\x94\x26\x55\xae\xa8\xef\x4e\x56\x3c\x32\x9d\x7a\x9a\xff\xee\x1c\x1e\xec\x4c\xa7\xb2\xc0\xe4\x68\xfc\x17\x1c\xff\x33\x3e\xb9\xb7\x73\x78\x30\x9d\x7a\x95\x47\xbb\xff\xbd\xbb\x7b\x28\x9f\xdf\x2b\x3d\x9f\x4e\xc7\xd3\xa9\x77\x72\x6f\xf7\x30\x33\x0a\x21\x1b\xc9\x94\x66\xc4\x32\x5a\x96\x1a\xca\x38\xc3\xbe\x66\xfc\xf2\x9f\x00\x00\x00\xff\xff\x8f\x97\xaa\x36\x1b\xa0\x00\x00")

func OpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_OpspecOpfileJsonschemaJson,
		"../../opspec/opfile/jsonschema.json",
	)
}

func OpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := OpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../opspec/opfile/jsonschema.json", size: 40987, mode: os.FileMode(420), modTime: time.Unix(1563223803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../opspec/opfile/jsonschema.json": OpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"opspec": &bintree{nil, map[string]*bintree{
				"opfile": &bintree{nil, map[string]*bintree{
					"jsonschema.json": &bintree{OpspecOpfileJsonschemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
