// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    42400,
		modtime: 1585208740,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
