// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    41476,
		modtime: 1583772397,
		compressed: `
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
/IzymPH6/wEAAP//oYY7KgSiAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
