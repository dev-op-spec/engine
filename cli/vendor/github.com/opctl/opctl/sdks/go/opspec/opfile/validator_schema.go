// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    41780,
		modtime: 1584075826,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
