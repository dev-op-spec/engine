// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    44784,
		modtime: 1586030878,
		compressed: `
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
6/8EAAD//25naJTwrgAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
