// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
)

type fakeCallStore struct {
	AddStub        func(*model.DCG)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 *model.DCG
	}
	GetStub        func(string) model.DCG
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 model.DCG
	}
	getReturnsOnCall map[int]struct {
		result1 model.DCG
	}
	ListWithParentIDStub        func(string) []*model.DCG
	listWithParentIDMutex       sync.RWMutex
	listWithParentIDArgsForCall []struct {
		arg1 string
	}
	listWithParentIDReturns struct {
		result1 []*model.DCG
	}
	listWithParentIDReturnsOnCall map[int]struct {
		result1 []*model.DCG
	}
	SetIsKilledStub        func(string)
	setIsKilledMutex       sync.RWMutex
	setIsKilledArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeCallStore) Add(arg1 *model.DCG) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 *model.DCG
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(arg1)
	}
}

func (fake *fakeCallStore) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *fakeCallStore) AddCalls(stub func(*model.DCG)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *fakeCallStore) AddArgsForCall(i int) *model.DCG {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *fakeCallStore) Get(arg1 string) model.DCG {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *fakeCallStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *fakeCallStore) GetCalls(stub func(string) model.DCG) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *fakeCallStore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *fakeCallStore) GetReturns(result1 model.DCG) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 model.DCG
	}{result1}
}

func (fake *fakeCallStore) GetReturnsOnCall(i int, result1 model.DCG) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 model.DCG
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 model.DCG
	}{result1}
}

func (fake *fakeCallStore) ListWithParentID(arg1 string) []*model.DCG {
	fake.listWithParentIDMutex.Lock()
	ret, specificReturn := fake.listWithParentIDReturnsOnCall[len(fake.listWithParentIDArgsForCall)]
	fake.listWithParentIDArgsForCall = append(fake.listWithParentIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListWithParentID", []interface{}{arg1})
	fake.listWithParentIDMutex.Unlock()
	if fake.ListWithParentIDStub != nil {
		return fake.ListWithParentIDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listWithParentIDReturns
	return fakeReturns.result1
}

func (fake *fakeCallStore) ListWithParentIDCallCount() int {
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	return len(fake.listWithParentIDArgsForCall)
}

func (fake *fakeCallStore) ListWithParentIDCalls(stub func(string) []*model.DCG) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = stub
}

func (fake *fakeCallStore) ListWithParentIDArgsForCall(i int) string {
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	argsForCall := fake.listWithParentIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *fakeCallStore) ListWithParentIDReturns(result1 []*model.DCG) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = nil
	fake.listWithParentIDReturns = struct {
		result1 []*model.DCG
	}{result1}
}

func (fake *fakeCallStore) ListWithParentIDReturnsOnCall(i int, result1 []*model.DCG) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = nil
	if fake.listWithParentIDReturnsOnCall == nil {
		fake.listWithParentIDReturnsOnCall = make(map[int]struct {
			result1 []*model.DCG
		})
	}
	fake.listWithParentIDReturnsOnCall[i] = struct {
		result1 []*model.DCG
	}{result1}
}

func (fake *fakeCallStore) SetIsKilled(arg1 string) {
	fake.setIsKilledMutex.Lock()
	fake.setIsKilledArgsForCall = append(fake.setIsKilledArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetIsKilled", []interface{}{arg1})
	fake.setIsKilledMutex.Unlock()
	if fake.SetIsKilledStub != nil {
		fake.SetIsKilledStub(arg1)
	}
}

func (fake *fakeCallStore) SetIsKilledCallCount() int {
	fake.setIsKilledMutex.RLock()
	defer fake.setIsKilledMutex.RUnlock()
	return len(fake.setIsKilledArgsForCall)
}

func (fake *fakeCallStore) SetIsKilledCalls(stub func(string)) {
	fake.setIsKilledMutex.Lock()
	defer fake.setIsKilledMutex.Unlock()
	fake.SetIsKilledStub = stub
}

func (fake *fakeCallStore) SetIsKilledArgsForCall(i int) string {
	fake.setIsKilledMutex.RLock()
	defer fake.setIsKilledMutex.RUnlock()
	argsForCall := fake.setIsKilledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *fakeCallStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	fake.setIsKilledMutex.RLock()
	defer fake.setIsKilledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeCallStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
