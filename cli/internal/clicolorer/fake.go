// This file was generated by counterfeiter
package clicolorer

import (
	"sync"
)

type Fake struct {
	DisableStub          func()
	disableMutex         sync.RWMutex
	disableArgsForCall   []struct{}
	AttentionStub        func(format string, values ...interface{}) string
	attentionMutex       sync.RWMutex
	attentionArgsForCall []struct {
		format string
		values []interface{}
	}
	attentionReturns struct {
		result1 string
	}
	ErrorStub        func(format string, values ...interface{}) string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		format string
		values []interface{}
	}
	errorReturns struct {
		result1 string
	}
	InfoStub        func(format string, values ...interface{}) string
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		format string
		values []interface{}
	}
	infoReturns struct {
		result1 string
	}
	SuccessStub        func(format string, values ...interface{}) string
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		format string
		values []interface{}
	}
	successReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Disable() {
	fake.disableMutex.Lock()
	fake.disableArgsForCall = append(fake.disableArgsForCall, struct{}{})
	fake.recordInvocation("Disable", []interface{}{})
	fake.disableMutex.Unlock()
	if fake.DisableStub != nil {
		fake.DisableStub()
	}
}

func (fake *Fake) DisableCallCount() int {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return len(fake.disableArgsForCall)
}

func (fake *Fake) Attention(format string, values ...interface{}) string {
	fake.attentionMutex.Lock()
	fake.attentionArgsForCall = append(fake.attentionArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Attention", []interface{}{format, values})
	fake.attentionMutex.Unlock()
	if fake.AttentionStub != nil {
		return fake.AttentionStub(format, values...)
	} else {
		return fake.attentionReturns.result1
	}
}

func (fake *Fake) AttentionCallCount() int {
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	return len(fake.attentionArgsForCall)
}

func (fake *Fake) AttentionArgsForCall(i int) (string, []interface{}) {
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	return fake.attentionArgsForCall[i].format, fake.attentionArgsForCall[i].values
}

func (fake *Fake) AttentionReturns(result1 string) {
	fake.AttentionStub = nil
	fake.attentionReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Error(format string, values ...interface{}) string {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Error", []interface{}{format, values})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		return fake.ErrorStub(format, values...)
	} else {
		return fake.errorReturns.result1
	}
}

func (fake *Fake) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *Fake) ErrorArgsForCall(i int) (string, []interface{}) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].format, fake.errorArgsForCall[i].values
}

func (fake *Fake) ErrorReturns(result1 string) {
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Info(format string, values ...interface{}) string {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Info", []interface{}{format, values})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub(format, values...)
	} else {
		return fake.infoReturns.result1
	}
}

func (fake *Fake) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *Fake) InfoArgsForCall(i int) (string, []interface{}) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].format, fake.infoArgsForCall[i].values
}

func (fake *Fake) InfoReturns(result1 string) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Success(format string, values ...interface{}) string {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Success", []interface{}{format, values})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		return fake.SuccessStub(format, values...)
	} else {
		return fake.successReturns.result1
	}
}

func (fake *Fake) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *Fake) SuccessArgsForCall(i int) (string, []interface{}) {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.successArgsForCall[i].format, fake.successArgsForCall[i].values
}

func (fake *Fake) SuccessReturns(result1 string) {
	fake.SuccessStub = nil
	fake.successReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ CliColorer = new(Fake)
