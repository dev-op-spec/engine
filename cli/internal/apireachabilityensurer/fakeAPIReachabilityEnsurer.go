// Code generated by counterfeiter. DO NOT EDIT.
package apireachabilityensurer

import (
	"sync"
)

type Fake struct {
	EnsureStub        func()
	ensureMutex       sync.RWMutex
	ensureArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Ensure() {
	fake.ensureMutex.Lock()
	fake.ensureArgsForCall = append(fake.ensureArgsForCall, struct {
	}{})
	fake.recordInvocation("Ensure", []interface{}{})
	fake.ensureMutex.Unlock()
	if fake.EnsureStub != nil {
		fake.EnsureStub()
	}
}

func (fake *Fake) EnsureCallCount() int {
	fake.ensureMutex.RLock()
	defer fake.ensureMutex.RUnlock()
	return len(fake.ensureArgsForCall)
}

func (fake *Fake) EnsureCalls(stub func()) {
	fake.ensureMutex.Lock()
	defer fake.ensureMutex.Unlock()
	fake.EnsureStub = stub
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ensureMutex.RLock()
	defer fake.ensureMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ APIReachabilityEnsurer = new(Fake)
