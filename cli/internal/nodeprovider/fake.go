// This file was generated by counterfeiter
package nodeprovider

import (
	"github.com/opctl/opctl/cli/internal/model"
	"sync"
)

type Fake struct {
	ListNodesStub        func() (nodes []*model.NodeInfoView, err error)
	listNodesMutex       sync.RWMutex
	listNodesArgsForCall []struct{}
	listNodesReturns     struct {
		result1 []*model.NodeInfoView
		result2 error
	}
	CreateNodeStub        func() (nodeInfo *model.NodeInfoView, err error)
	createNodeMutex       sync.RWMutex
	createNodeArgsForCall []struct{}
	createNodeReturns     struct {
		result1 *model.NodeInfoView
		result2 error
	}
	KillNodeIfExistsStub        func(nodeId string) (err error)
	killNodeIfExistsMutex       sync.RWMutex
	killNodeIfExistsArgsForCall []struct {
		nodeId string
	}
	killNodeIfExistsReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) ListNodes() (nodes []*model.NodeInfoView, err error) {
	fake.listNodesMutex.Lock()
	fake.listNodesArgsForCall = append(fake.listNodesArgsForCall, struct{}{})
	fake.recordInvocation("ListNodes", []interface{}{})
	fake.listNodesMutex.Unlock()
	if fake.ListNodesStub != nil {
		return fake.ListNodesStub()
	} else {
		return fake.listNodesReturns.result1, fake.listNodesReturns.result2
	}
}

func (fake *Fake) ListNodesCallCount() int {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	return len(fake.listNodesArgsForCall)
}

func (fake *Fake) ListNodesReturns(result1 []*model.NodeInfoView, result2 error) {
	fake.ListNodesStub = nil
	fake.listNodesReturns = struct {
		result1 []*model.NodeInfoView
		result2 error
	}{result1, result2}
}

func (fake *Fake) CreateNode() (nodeInfo *model.NodeInfoView, err error) {
	fake.createNodeMutex.Lock()
	fake.createNodeArgsForCall = append(fake.createNodeArgsForCall, struct{}{})
	fake.recordInvocation("CreateNode", []interface{}{})
	fake.createNodeMutex.Unlock()
	if fake.CreateNodeStub != nil {
		return fake.CreateNodeStub()
	} else {
		return fake.createNodeReturns.result1, fake.createNodeReturns.result2
	}
}

func (fake *Fake) CreateNodeCallCount() int {
	fake.createNodeMutex.RLock()
	defer fake.createNodeMutex.RUnlock()
	return len(fake.createNodeArgsForCall)
}

func (fake *Fake) CreateNodeReturns(result1 *model.NodeInfoView, result2 error) {
	fake.CreateNodeStub = nil
	fake.createNodeReturns = struct {
		result1 *model.NodeInfoView
		result2 error
	}{result1, result2}
}

func (fake *Fake) KillNodeIfExists(nodeId string) (err error) {
	fake.killNodeIfExistsMutex.Lock()
	fake.killNodeIfExistsArgsForCall = append(fake.killNodeIfExistsArgsForCall, struct {
		nodeId string
	}{nodeId})
	fake.recordInvocation("KillNodeIfExists", []interface{}{nodeId})
	fake.killNodeIfExistsMutex.Unlock()
	if fake.KillNodeIfExistsStub != nil {
		return fake.KillNodeIfExistsStub(nodeId)
	} else {
		return fake.killNodeIfExistsReturns.result1
	}
}

func (fake *Fake) KillNodeIfExistsCallCount() int {
	fake.killNodeIfExistsMutex.RLock()
	defer fake.killNodeIfExistsMutex.RUnlock()
	return len(fake.killNodeIfExistsArgsForCall)
}

func (fake *Fake) KillNodeIfExistsArgsForCall(i int) string {
	fake.killNodeIfExistsMutex.RLock()
	defer fake.killNodeIfExistsMutex.RUnlock()
	return fake.killNodeIfExistsArgsForCall[i].nodeId
}

func (fake *Fake) KillNodeIfExistsReturns(result1 error) {
	fake.KillNodeIfExistsStub = nil
	fake.killNodeIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	fake.createNodeMutex.RLock()
	defer fake.createNodeMutex.RUnlock()
	fake.killNodeIfExistsMutex.RLock()
	defer fake.killNodeIfExistsMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ NodeProvider = new(Fake)
