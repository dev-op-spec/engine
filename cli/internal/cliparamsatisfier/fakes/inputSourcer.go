// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/cli/internal/cliparamsatisfier"
)

type FakeInputSourcer struct {
	SourceStub        func(string) (*string, bool)
	sourceMutex       sync.RWMutex
	sourceArgsForCall []struct {
		arg1 string
	}
	sourceReturns struct {
		result1 *string
		result2 bool
	}
	sourceReturnsOnCall map[int]struct {
		result1 *string
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInputSourcer) Source(arg1 string) (*string, bool) {
	fake.sourceMutex.Lock()
	ret, specificReturn := fake.sourceReturnsOnCall[len(fake.sourceArgsForCall)]
	fake.sourceArgsForCall = append(fake.sourceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Source", []interface{}{arg1})
	fake.sourceMutex.Unlock()
	if fake.SourceStub != nil {
		return fake.SourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInputSourcer) SourceCallCount() int {
	fake.sourceMutex.RLock()
	defer fake.sourceMutex.RUnlock()
	return len(fake.sourceArgsForCall)
}

func (fake *FakeInputSourcer) SourceCalls(stub func(string) (*string, bool)) {
	fake.sourceMutex.Lock()
	defer fake.sourceMutex.Unlock()
	fake.SourceStub = stub
}

func (fake *FakeInputSourcer) SourceArgsForCall(i int) string {
	fake.sourceMutex.RLock()
	defer fake.sourceMutex.RUnlock()
	argsForCall := fake.sourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputSourcer) SourceReturns(result1 *string, result2 bool) {
	fake.sourceMutex.Lock()
	defer fake.sourceMutex.Unlock()
	fake.SourceStub = nil
	fake.sourceReturns = struct {
		result1 *string
		result2 bool
	}{result1, result2}
}

func (fake *FakeInputSourcer) SourceReturnsOnCall(i int, result1 *string, result2 bool) {
	fake.sourceMutex.Lock()
	defer fake.sourceMutex.Unlock()
	fake.SourceStub = nil
	if fake.sourceReturnsOnCall == nil {
		fake.sourceReturnsOnCall = make(map[int]struct {
			result1 *string
			result2 bool
		})
	}
	fake.sourceReturnsOnCall[i] = struct {
		result1 *string
		result2 bool
	}{result1, result2}
}

func (fake *FakeInputSourcer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sourceMutex.RLock()
	defer fake.sourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInputSourcer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cliparamsatisfier.InputSourcer = new(FakeInputSourcer)
