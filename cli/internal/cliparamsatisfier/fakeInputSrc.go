// Code generated by counterfeiter. DO NOT EDIT.
package cliparamsatisfier

import (
	"sync"
)

type FakeInputSrc struct {
	ReadStringStub        func(inputName string) (*string, bool)
	readStringMutex       sync.RWMutex
	readStringArgsForCall []struct {
		inputName string
	}
	readStringReturns struct {
		result1 *string
		result2 bool
	}
	readStringReturnsOnCall map[int]struct {
		result1 *string
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInputSrc) ReadString(inputName string) (*string, bool) {
	fake.readStringMutex.Lock()
	ret, specificReturn := fake.readStringReturnsOnCall[len(fake.readStringArgsForCall)]
	fake.readStringArgsForCall = append(fake.readStringArgsForCall, struct {
		inputName string
	}{inputName})
	fake.recordInvocation("ReadString", []interface{}{inputName})
	fake.readStringMutex.Unlock()
	if fake.ReadStringStub != nil {
		return fake.ReadStringStub(inputName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readStringReturns.result1, fake.readStringReturns.result2
}

func (fake *FakeInputSrc) ReadStringCallCount() int {
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	return len(fake.readStringArgsForCall)
}

func (fake *FakeInputSrc) ReadStringArgsForCall(i int) string {
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	return fake.readStringArgsForCall[i].inputName
}

func (fake *FakeInputSrc) ReadStringReturns(result1 *string, result2 bool) {
	fake.ReadStringStub = nil
	fake.readStringReturns = struct {
		result1 *string
		result2 bool
	}{result1, result2}
}

func (fake *FakeInputSrc) ReadStringReturnsOnCall(i int, result1 *string, result2 bool) {
	fake.ReadStringStub = nil
	if fake.readStringReturnsOnCall == nil {
		fake.readStringReturnsOnCall = make(map[int]struct {
			result1 *string
			result2 bool
		})
	}
	fake.readStringReturnsOnCall[i] = struct {
		result1 *string
		result2 bool
	}{result1, result2}
}

func (fake *FakeInputSrc) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInputSrc) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ InputSrc = new(FakeInputSrc)
