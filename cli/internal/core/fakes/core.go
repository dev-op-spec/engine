// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/opctl/opctl/cli/internal/core"
	"github.com/opctl/opctl/cli/internal/core/node"
	"github.com/opctl/opctl/cli/internal/core/op"
	"github.com/opctl/opctl/cli/internal/model"
)

type FakeCore struct {
	EventsStub        func(context.Context)
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct {
		arg1 context.Context
	}
	LsStub        func(context.Context, string)
	lsMutex       sync.RWMutex
	lsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	NodeStub        func() node.Node
	nodeMutex       sync.RWMutex
	nodeArgsForCall []struct {
	}
	nodeReturns struct {
		result1 node.Node
	}
	nodeReturnsOnCall map[int]struct {
		result1 node.Node
	}
	OpStub        func() op.Op
	opMutex       sync.RWMutex
	opArgsForCall []struct {
	}
	opReturns struct {
		result1 op.Op
	}
	opReturnsOnCall map[int]struct {
		result1 op.Op
	}
	RunStub        func(context.Context, string, *model.RunOpts)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *model.RunOpts
	}
	SelfUpdateStub        func(string)
	selfUpdateMutex       sync.RWMutex
	selfUpdateArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCore) Events(arg1 context.Context) {
	fake.eventsMutex.Lock()
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Events", []interface{}{arg1})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		fake.EventsStub(arg1)
	}
}

func (fake *FakeCore) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeCore) EventsCalls(stub func(context.Context)) {
	fake.eventsMutex.Lock()
	defer fake.eventsMutex.Unlock()
	fake.EventsStub = stub
}

func (fake *FakeCore) EventsArgsForCall(i int) context.Context {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	argsForCall := fake.eventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCore) Ls(arg1 context.Context, arg2 string) {
	fake.lsMutex.Lock()
	fake.lsArgsForCall = append(fake.lsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Ls", []interface{}{arg1, arg2})
	fake.lsMutex.Unlock()
	if fake.LsStub != nil {
		fake.LsStub(arg1, arg2)
	}
}

func (fake *FakeCore) LsCallCount() int {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	return len(fake.lsArgsForCall)
}

func (fake *FakeCore) LsCalls(stub func(context.Context, string)) {
	fake.lsMutex.Lock()
	defer fake.lsMutex.Unlock()
	fake.LsStub = stub
}

func (fake *FakeCore) LsArgsForCall(i int) (context.Context, string) {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	argsForCall := fake.lsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCore) Node() node.Node {
	fake.nodeMutex.Lock()
	ret, specificReturn := fake.nodeReturnsOnCall[len(fake.nodeArgsForCall)]
	fake.nodeArgsForCall = append(fake.nodeArgsForCall, struct {
	}{})
	fake.recordInvocation("Node", []interface{}{})
	fake.nodeMutex.Unlock()
	if fake.NodeStub != nil {
		return fake.NodeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nodeReturns
	return fakeReturns.result1
}

func (fake *FakeCore) NodeCallCount() int {
	fake.nodeMutex.RLock()
	defer fake.nodeMutex.RUnlock()
	return len(fake.nodeArgsForCall)
}

func (fake *FakeCore) NodeCalls(stub func() node.Node) {
	fake.nodeMutex.Lock()
	defer fake.nodeMutex.Unlock()
	fake.NodeStub = stub
}

func (fake *FakeCore) NodeReturns(result1 node.Node) {
	fake.nodeMutex.Lock()
	defer fake.nodeMutex.Unlock()
	fake.NodeStub = nil
	fake.nodeReturns = struct {
		result1 node.Node
	}{result1}
}

func (fake *FakeCore) NodeReturnsOnCall(i int, result1 node.Node) {
	fake.nodeMutex.Lock()
	defer fake.nodeMutex.Unlock()
	fake.NodeStub = nil
	if fake.nodeReturnsOnCall == nil {
		fake.nodeReturnsOnCall = make(map[int]struct {
			result1 node.Node
		})
	}
	fake.nodeReturnsOnCall[i] = struct {
		result1 node.Node
	}{result1}
}

func (fake *FakeCore) Op() op.Op {
	fake.opMutex.Lock()
	ret, specificReturn := fake.opReturnsOnCall[len(fake.opArgsForCall)]
	fake.opArgsForCall = append(fake.opArgsForCall, struct {
	}{})
	fake.recordInvocation("Op", []interface{}{})
	fake.opMutex.Unlock()
	if fake.OpStub != nil {
		return fake.OpStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.opReturns
	return fakeReturns.result1
}

func (fake *FakeCore) OpCallCount() int {
	fake.opMutex.RLock()
	defer fake.opMutex.RUnlock()
	return len(fake.opArgsForCall)
}

func (fake *FakeCore) OpCalls(stub func() op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = stub
}

func (fake *FakeCore) OpReturns(result1 op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = nil
	fake.opReturns = struct {
		result1 op.Op
	}{result1}
}

func (fake *FakeCore) OpReturnsOnCall(i int, result1 op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = nil
	if fake.opReturnsOnCall == nil {
		fake.opReturnsOnCall = make(map[int]struct {
			result1 op.Op
		})
	}
	fake.opReturnsOnCall[i] = struct {
		result1 op.Op
	}{result1}
}

func (fake *FakeCore) Run(arg1 context.Context, arg2 string, arg3 *model.RunOpts) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *model.RunOpts
	}{arg1, arg2, arg3})
	fake.recordInvocation("Run", []interface{}{arg1, arg2, arg3})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		fake.RunStub(arg1, arg2, arg3)
	}
}

func (fake *FakeCore) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCore) RunCalls(stub func(context.Context, string, *model.RunOpts)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeCore) RunArgsForCall(i int) (context.Context, string, *model.RunOpts) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCore) SelfUpdate(arg1 string) {
	fake.selfUpdateMutex.Lock()
	fake.selfUpdateArgsForCall = append(fake.selfUpdateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SelfUpdate", []interface{}{arg1})
	fake.selfUpdateMutex.Unlock()
	if fake.SelfUpdateStub != nil {
		fake.SelfUpdateStub(arg1)
	}
}

func (fake *FakeCore) SelfUpdateCallCount() int {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	return len(fake.selfUpdateArgsForCall)
}

func (fake *FakeCore) SelfUpdateCalls(stub func(string)) {
	fake.selfUpdateMutex.Lock()
	defer fake.selfUpdateMutex.Unlock()
	fake.SelfUpdateStub = stub
}

func (fake *FakeCore) SelfUpdateArgsForCall(i int) string {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	argsForCall := fake.selfUpdateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	fake.nodeMutex.RLock()
	defer fake.nodeMutex.RUnlock()
	fake.opMutex.RLock()
	defer fake.opMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Core = new(FakeCore)
