// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/cli/internal/model"
	"github.com/opctl/opctl/sdks/go/node/api/client"
)

type FakeNodeHandle struct {
	APIClientStub        func() client.Client
	aPIClientMutex       sync.RWMutex
	aPIClientArgsForCall []struct {
	}
	aPIClientReturns struct {
		result1 client.Client
	}
	aPIClientReturnsOnCall map[int]struct {
		result1 client.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeHandle) APIClient() client.Client {
	fake.aPIClientMutex.Lock()
	ret, specificReturn := fake.aPIClientReturnsOnCall[len(fake.aPIClientArgsForCall)]
	fake.aPIClientArgsForCall = append(fake.aPIClientArgsForCall, struct {
	}{})
	fake.recordInvocation("APIClient", []interface{}{})
	fake.aPIClientMutex.Unlock()
	if fake.APIClientStub != nil {
		return fake.APIClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.aPIClientReturns
	return fakeReturns.result1
}

func (fake *FakeNodeHandle) APIClientCallCount() int {
	fake.aPIClientMutex.RLock()
	defer fake.aPIClientMutex.RUnlock()
	return len(fake.aPIClientArgsForCall)
}

func (fake *FakeNodeHandle) APIClientCalls(stub func() client.Client) {
	fake.aPIClientMutex.Lock()
	defer fake.aPIClientMutex.Unlock()
	fake.APIClientStub = stub
}

func (fake *FakeNodeHandle) APIClientReturns(result1 client.Client) {
	fake.aPIClientMutex.Lock()
	defer fake.aPIClientMutex.Unlock()
	fake.APIClientStub = nil
	fake.aPIClientReturns = struct {
		result1 client.Client
	}{result1}
}

func (fake *FakeNodeHandle) APIClientReturnsOnCall(i int, result1 client.Client) {
	fake.aPIClientMutex.Lock()
	defer fake.aPIClientMutex.Unlock()
	fake.APIClientStub = nil
	if fake.aPIClientReturnsOnCall == nil {
		fake.aPIClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
		})
	}
	fake.aPIClientReturnsOnCall[i] = struct {
		result1 client.Client
	}{result1}
}

func (fake *FakeNodeHandle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aPIClientMutex.RLock()
	defer fake.aPIClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeHandle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.NodeHandle = new(FakeNodeHandle)
