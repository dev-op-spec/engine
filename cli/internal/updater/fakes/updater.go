// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/cli/internal/updater"
)

type FakeUpdater struct {
	ApplyUpdateStub        func(*updater.Update) error
	applyUpdateMutex       sync.RWMutex
	applyUpdateArgsForCall []struct {
		arg1 *updater.Update
	}
	applyUpdateReturns struct {
		result1 error
	}
	applyUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	GetUpdateIfExistsStub        func(string) (*updater.Update, error)
	getUpdateIfExistsMutex       sync.RWMutex
	getUpdateIfExistsArgsForCall []struct {
		arg1 string
	}
	getUpdateIfExistsReturns struct {
		result1 *updater.Update
		result2 error
	}
	getUpdateIfExistsReturnsOnCall map[int]struct {
		result1 *updater.Update
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) ApplyUpdate(arg1 *updater.Update) error {
	fake.applyUpdateMutex.Lock()
	ret, specificReturn := fake.applyUpdateReturnsOnCall[len(fake.applyUpdateArgsForCall)]
	fake.applyUpdateArgsForCall = append(fake.applyUpdateArgsForCall, struct {
		arg1 *updater.Update
	}{arg1})
	fake.recordInvocation("ApplyUpdate", []interface{}{arg1})
	fake.applyUpdateMutex.Unlock()
	if fake.ApplyUpdateStub != nil {
		return fake.ApplyUpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.applyUpdateReturns
	return fakeReturns.result1
}

func (fake *FakeUpdater) ApplyUpdateCallCount() int {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return len(fake.applyUpdateArgsForCall)
}

func (fake *FakeUpdater) ApplyUpdateCalls(stub func(*updater.Update) error) {
	fake.applyUpdateMutex.Lock()
	defer fake.applyUpdateMutex.Unlock()
	fake.ApplyUpdateStub = stub
}

func (fake *FakeUpdater) ApplyUpdateArgsForCall(i int) *updater.Update {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	argsForCall := fake.applyUpdateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpdater) ApplyUpdateReturns(result1 error) {
	fake.applyUpdateMutex.Lock()
	defer fake.applyUpdateMutex.Unlock()
	fake.ApplyUpdateStub = nil
	fake.applyUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) ApplyUpdateReturnsOnCall(i int, result1 error) {
	fake.applyUpdateMutex.Lock()
	defer fake.applyUpdateMutex.Unlock()
	fake.ApplyUpdateStub = nil
	if fake.applyUpdateReturnsOnCall == nil {
		fake.applyUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) GetUpdateIfExists(arg1 string) (*updater.Update, error) {
	fake.getUpdateIfExistsMutex.Lock()
	ret, specificReturn := fake.getUpdateIfExistsReturnsOnCall[len(fake.getUpdateIfExistsArgsForCall)]
	fake.getUpdateIfExistsArgsForCall = append(fake.getUpdateIfExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUpdateIfExists", []interface{}{arg1})
	fake.getUpdateIfExistsMutex.Unlock()
	if fake.GetUpdateIfExistsStub != nil {
		return fake.GetUpdateIfExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUpdateIfExistsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpdater) GetUpdateIfExistsCallCount() int {
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	return len(fake.getUpdateIfExistsArgsForCall)
}

func (fake *FakeUpdater) GetUpdateIfExistsCalls(stub func(string) (*updater.Update, error)) {
	fake.getUpdateIfExistsMutex.Lock()
	defer fake.getUpdateIfExistsMutex.Unlock()
	fake.GetUpdateIfExistsStub = stub
}

func (fake *FakeUpdater) GetUpdateIfExistsArgsForCall(i int) string {
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	argsForCall := fake.getUpdateIfExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpdater) GetUpdateIfExistsReturns(result1 *updater.Update, result2 error) {
	fake.getUpdateIfExistsMutex.Lock()
	defer fake.getUpdateIfExistsMutex.Unlock()
	fake.GetUpdateIfExistsStub = nil
	fake.getUpdateIfExistsReturns = struct {
		result1 *updater.Update
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdater) GetUpdateIfExistsReturnsOnCall(i int, result1 *updater.Update, result2 error) {
	fake.getUpdateIfExistsMutex.Lock()
	defer fake.getUpdateIfExistsMutex.Unlock()
	fake.GetUpdateIfExistsStub = nil
	if fake.getUpdateIfExistsReturnsOnCall == nil {
		fake.getUpdateIfExistsReturnsOnCall = make(map[int]struct {
			result1 *updater.Update
			result2 error
		})
	}
	fake.getUpdateIfExistsReturnsOnCall[i] = struct {
		result1 *updater.Update
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ updater.Updater = new(FakeUpdater)
