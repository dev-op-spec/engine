// This file was generated by counterfeiter
package updater

import (
	"sync"

	"github.com/equinox-io/equinox"
)

type fakeEquinoxClient struct {
	CheckStub        func(appID string, opts equinox.Options) (equinox.Response, error)
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
		appID string
		opts  equinox.Options
	}
	checkReturns struct {
		result1 equinox.Response
		result2 error
	}
	ApplyStub        func(response equinox.Response) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		response equinox.Response
	}
	applyReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeEquinoxClient) Check(appID string, opts equinox.Options) (equinox.Response, error) {
	fake.checkMutex.Lock()
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
		appID string
		opts  equinox.Options
	}{appID, opts})
	fake.recordInvocation("Check", []interface{}{appID, opts})
	fake.checkMutex.Unlock()
	if fake.CheckStub != nil {
		return fake.CheckStub(appID, opts)
	} else {
		return fake.checkReturns.result1, fake.checkReturns.result2
	}
}

func (fake *fakeEquinoxClient) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *fakeEquinoxClient) CheckArgsForCall(i int) (string, equinox.Options) {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return fake.checkArgsForCall[i].appID, fake.checkArgsForCall[i].opts
}

func (fake *fakeEquinoxClient) CheckReturns(result1 equinox.Response, result2 error) {
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 equinox.Response
		result2 error
	}{result1, result2}
}

func (fake *fakeEquinoxClient) Apply(response equinox.Response) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		response equinox.Response
	}{response})
	fake.recordInvocation("Apply", []interface{}{response})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(response)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *fakeEquinoxClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *fakeEquinoxClient) ApplyArgsForCall(i int) equinox.Response {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].response
}

func (fake *fakeEquinoxClient) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeEquinoxClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeEquinoxClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
