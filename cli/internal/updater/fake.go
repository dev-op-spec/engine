// This file was generated by counterfeiter
package updater

import (
	"sync"
)

type Fake struct {
	GetUpdateIfExistsStub        func(releaseChannel string) (update *Update, err error)
	getUpdateIfExistsMutex       sync.RWMutex
	getUpdateIfExistsArgsForCall []struct {
		releaseChannel string
	}
	getUpdateIfExistsReturns struct {
		result1 *Update
		result2 error
	}
	ApplyUpdateStub        func(update *Update) (err error)
	applyUpdateMutex       sync.RWMutex
	applyUpdateArgsForCall []struct {
		update *Update
	}
	applyUpdateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) GetUpdateIfExists(releaseChannel string) (update *Update, err error) {
	fake.getUpdateIfExistsMutex.Lock()
	fake.getUpdateIfExistsArgsForCall = append(fake.getUpdateIfExistsArgsForCall, struct {
		releaseChannel string
	}{releaseChannel})
	fake.recordInvocation("GetUpdateIfExists", []interface{}{releaseChannel})
	fake.getUpdateIfExistsMutex.Unlock()
	if fake.GetUpdateIfExistsStub != nil {
		return fake.GetUpdateIfExistsStub(releaseChannel)
	} else {
		return fake.getUpdateIfExistsReturns.result1, fake.getUpdateIfExistsReturns.result2
	}
}

func (fake *Fake) GetUpdateIfExistsCallCount() int {
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	return len(fake.getUpdateIfExistsArgsForCall)
}

func (fake *Fake) GetUpdateIfExistsArgsForCall(i int) string {
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	return fake.getUpdateIfExistsArgsForCall[i].releaseChannel
}

func (fake *Fake) GetUpdateIfExistsReturns(result1 *Update, result2 error) {
	fake.GetUpdateIfExistsStub = nil
	fake.getUpdateIfExistsReturns = struct {
		result1 *Update
		result2 error
	}{result1, result2}
}

func (fake *Fake) ApplyUpdate(update *Update) (err error) {
	fake.applyUpdateMutex.Lock()
	fake.applyUpdateArgsForCall = append(fake.applyUpdateArgsForCall, struct {
		update *Update
	}{update})
	fake.recordInvocation("ApplyUpdate", []interface{}{update})
	fake.applyUpdateMutex.Unlock()
	if fake.ApplyUpdateStub != nil {
		return fake.ApplyUpdateStub(update)
	} else {
		return fake.applyUpdateReturns.result1
	}
}

func (fake *Fake) ApplyUpdateCallCount() int {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return len(fake.applyUpdateArgsForCall)
}

func (fake *Fake) ApplyUpdateArgsForCall(i int) *Update {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return fake.applyUpdateArgsForCall[i].update
}

func (fake *Fake) ApplyUpdateReturns(result1 error) {
	fake.ApplyUpdateStub = nil
	fake.applyUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUpdateIfExistsMutex.RLock()
	defer fake.getUpdateIfExistsMutex.RUnlock()
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Updater = new(Fake)
