// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"
)

type fakeNodeReachabilityEnsurer struct {
	EnsureNodeReachableStub        func()
	ensureNodeReachableMutex       sync.RWMutex
	ensureNodeReachableArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeNodeReachabilityEnsurer) EnsureNodeReachable() {
	fake.ensureNodeReachableMutex.Lock()
	fake.ensureNodeReachableArgsForCall = append(fake.ensureNodeReachableArgsForCall, struct {
	}{})
	fake.recordInvocation("EnsureNodeReachable", []interface{}{})
	fake.ensureNodeReachableMutex.Unlock()
	if fake.EnsureNodeReachableStub != nil {
		fake.EnsureNodeReachableStub()
	}
}

func (fake *fakeNodeReachabilityEnsurer) EnsureNodeReachableCallCount() int {
	fake.ensureNodeReachableMutex.RLock()
	defer fake.ensureNodeReachableMutex.RUnlock()
	return len(fake.ensureNodeReachableArgsForCall)
}

func (fake *fakeNodeReachabilityEnsurer) EnsureNodeReachableCalls(stub func()) {
	fake.ensureNodeReachableMutex.Lock()
	defer fake.ensureNodeReachableMutex.Unlock()
	fake.EnsureNodeReachableStub = stub
}

func (fake *fakeNodeReachabilityEnsurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ensureNodeReachableMutex.RLock()
	defer fake.ensureNodeReachableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeNodeReachabilityEnsurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
