// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type fakeDataResolver struct {
	ResolveStub        func(opRef string, pullCreds *model.PullCreds) model.DataHandle
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		opRef     string
		pullCreds *model.PullCreds
	}
	resolveReturns struct {
		result1 model.DataHandle
	}
	resolveReturnsOnCall map[int]struct {
		result1 model.DataHandle
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeDataResolver) Resolve(opRef string, pullCreds *model.PullCreds) model.DataHandle {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		opRef     string
		pullCreds *model.PullCreds
	}{opRef, pullCreds})
	fake.recordInvocation("Resolve", []interface{}{opRef, pullCreds})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(opRef, pullCreds)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resolveReturns.result1
}

func (fake *fakeDataResolver) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *fakeDataResolver) ResolveArgsForCall(i int) (string, *model.PullCreds) {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].opRef, fake.resolveArgsForCall[i].pullCreds
}

func (fake *fakeDataResolver) ResolveReturns(result1 model.DataHandle) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 model.DataHandle
	}{result1}
}

func (fake *fakeDataResolver) ResolveReturnsOnCall(i int, result1 model.DataHandle) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 model.DataHandle
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 model.DataHandle
	}{result1}
}

func (fake *fakeDataResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeDataResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
