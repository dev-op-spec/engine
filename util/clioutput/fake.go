// This file was generated by counterfeiter
package clioutput

import (
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type Fake struct {
	AttentionStub        func(format string, values ...interface{})
	attentionMutex       sync.RWMutex
	attentionArgsForCall []struct {
		format string
		values []interface{}
	}
	ErrorStub        func(format string, values ...interface{})
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		format string
		values []interface{}
	}
	EventStub        func(event *model.Event)
	eventMutex       sync.RWMutex
	eventArgsForCall []struct {
		event *model.Event
	}
	InfoStub        func(format string, values ...interface{})
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		format string
		values []interface{}
	}
	SuccessStub        func(format string, values ...interface{})
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		format string
		values []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Attention(format string, values ...interface{}) {
	fake.attentionMutex.Lock()
	fake.attentionArgsForCall = append(fake.attentionArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Attention", []interface{}{format, values})
	fake.attentionMutex.Unlock()
	if fake.AttentionStub != nil {
		fake.AttentionStub(format, values...)
	}
}

func (fake *Fake) AttentionCallCount() int {
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	return len(fake.attentionArgsForCall)
}

func (fake *Fake) AttentionArgsForCall(i int) (string, []interface{}) {
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	return fake.attentionArgsForCall[i].format, fake.attentionArgsForCall[i].values
}

func (fake *Fake) Error(format string, values ...interface{}) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Error", []interface{}{format, values})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(format, values...)
	}
}

func (fake *Fake) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *Fake) ErrorArgsForCall(i int) (string, []interface{}) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].format, fake.errorArgsForCall[i].values
}

func (fake *Fake) Event(event *model.Event) {
	fake.eventMutex.Lock()
	fake.eventArgsForCall = append(fake.eventArgsForCall, struct {
		event *model.Event
	}{event})
	fake.recordInvocation("Event", []interface{}{event})
	fake.eventMutex.Unlock()
	if fake.EventStub != nil {
		fake.EventStub(event)
	}
}

func (fake *Fake) EventCallCount() int {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return len(fake.eventArgsForCall)
}

func (fake *Fake) EventArgsForCall(i int) *model.Event {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return fake.eventArgsForCall[i].event
}

func (fake *Fake) Info(format string, values ...interface{}) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Info", []interface{}{format, values})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(format, values...)
	}
}

func (fake *Fake) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *Fake) InfoArgsForCall(i int) (string, []interface{}) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].format, fake.infoArgsForCall[i].values
}

func (fake *Fake) Success(format string, values ...interface{}) {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		format string
		values []interface{}
	}{format, values})
	fake.recordInvocation("Success", []interface{}{format, values})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		fake.SuccessStub(format, values...)
	}
}

func (fake *Fake) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *Fake) SuccessArgsForCall(i int) (string, []interface{}) {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.successArgsForCall[i].format, fake.successArgsForCall[i].values
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attentionMutex.RLock()
	defer fake.attentionMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ CliOutput = new(Fake)
