// Code generated by "esc -pkg=opfile -o validate_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    42579,
		modtime: 1608133506,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
