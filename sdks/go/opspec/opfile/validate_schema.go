// Code generated by "esc -pkg=opfile -o validate_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    48453,
		modtime: 1616435098,
		compressed: `
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
AQAA//8+ZZlbRb0AAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
