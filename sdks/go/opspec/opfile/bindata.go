// Code generated by go-bindata.
// sources:
// ../../opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _OpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7f\x73\xdb\xb6\x92\xff\xf7\x53\xec\xa8\xe9\xd5\xbe\x44\x94\x9d\xbe\xa4\xef\xb9\x93\xc9\xa4\x49\x7a\x97\x9b\x36\xe9\xbc\xb4\xbd\x99\x67\xb9\x2d\x44\x42\x16\x6a\x12\x60\x40\xd0\x3f\x7a\xd7\xef\xfe\x06\x00\x45\x51\x24\x00\x42\x14\x69\xd9\x89\xfc\x4f\x22\x72\xb1\x5c\xec\x2f\xec\x2e\x96\xe0\xff\x7d\x06\x30\x7a\x90\x85\x0b\x9c\xa0\xd1\x09\x8c\x16\x42\xa4\x27\x93\xc9\x1f\x19\xa3\x63\x7d\x35\x60\xfc\x7c\x12\x71\x34\x17\xe3\xa3\xaf\x27\xfa\xda\xe7\xa3\x47\x6a\x1c\x89\x96\x63\xb2\x93\xc9\x84\xa5\x59\x8a\xc3\x80\xb0\xc9\x51\x70\x1c\x7c\x3d\x61\x69\x70\x93\xc4\x41\x81\x46\xa2\xd4\xc3\x04\x11\x31\x96\x03\xdf\xa5\xf0\x1d\x89\xb1\xbe\x1a\xe1\x2c\xe4\x24\x15\x84\x51\x79\xef\x15\x9e\x13\x8a\x33\x40\x14\x58\xaa\x21\x52\xce\x52\xcc\x05\xc1\xd9\xe8\x04\x24\xe1\x00\x23\x8a\x12\x5c\xfe\x6a\x62\x79\x8b\x12\x0c\x6c\x0e\x62\x81\x97\x68\x14\x98\xb8\x49\x15\x05\x99\xe0\x84\x9e\x8f\xd4\xe5\xbf\xf4\xdd\x1a\x0a\x1b\xe6\x57\xab\x9f\xa6\x07\x3c\xe0\x78\x2e\xc1\x3e\x9f\xac\xa8\x9e\x10\x9a\xe6\x22\x9b\xa4\x48\x08\xcc\xe9\x8f\xab\x1b\x5f\x3c\xf9\x76\xfc\x5b\x80\xc6\x7f\xbe\x18\xff\xeb\x68\xfc\x8f\x2f\x9e\xbc\xfa\xe2\xf1\xb7\xd5\x91\x11\xe1\x6b\x3f\x2b\xb4\xac\xd1\xae\x9f\x50\x25\x1b\x45\x11\x91\x70\x28\xfe\xb1\xca\xbe\x39\x8a\x33\xfc\xc8\x32\xb7\x1f\x11\x47\x09\x16\x98\xcb\x99\xad\x04\xa0\x40\x1b\xc4\x57\x1e\x06\x30\x3a\xad\xce\xe3\xec\xe1\xda\x4d\x80\x11\xa3\xf8\x9d\xe4\xcb\x69\xe5\x22\xac\x81\x28\x30\x8e\x3f\xe4\x84\xe3\xa8\x01\xa9\xa7\xc4\x39\xba\x19\xd5\xae\x9f\xad\xfd\xfe\xeb\xd1\x36\x0f\x98\x31\x16\x63\x44\x87\x7c\x44\x44\xf8\x90\xe8\xe7\xd2\xac\x06\xc4\x4f\xf3\x64\x86\x07\x9d\x01\x9b\xfd\x81\x43\x31\xe4\x13\x32\x16\x5e\xe0\x61\x9f\x50\xf1\x2e\xd6\x27\x54\x7e\x9d\x55\x9f\x66\x72\x77\xe5\x3d\x6d\x02\xf5\xcb\x9e\xe6\x5e\x02\x97\x8e\x58\xa1\x53\x56\x3f\x6a\x00\xd5\x7c\xc3\x0b\x09\x0a\xa9\xdd\x43\xf8\xd0\x6f\x40\xdc\x04\xb8\x7d\x2f\xba\x26\x97\xfa\x7c\x14\xc5\x73\x94\xc7\xc2\x46\xed\x72\x51\x31\xfa\x27\x33\x46\x92\xbd\xc7\x21\xc7\x56\x94\x35\xe6\xbf\xd1\x0b\x8d\x7a\x00\x90\x0c\x32\x3d\xb8\x89\xb8\x42\x8d\xc5\x99\x99\xe9\x09\x19\xcd\x04\x47\x84\x0a\xb3\xd0\x1a\x4a\xf3\xb2\x32\xc0\x49\x46\x61\xcf\x46\x98\x16\x4d\x81\x75\xc5\x7e\x23\x70\x62\x07\x6c\x32\xed\x7f\xde\xbf\x7b\x0b\xef\x55\x10\x02\xa7\x35\x34\x70\x81\x6f\xae\x18\x8f\xce\x0e\x96\x41\x8c\x60\x2c\xce\x02\x82\xc5\x5c\x05\x3e\x0b\x91\xc4\x45\xf4\x73\xc5\xc9\xf9\x42\x8c\x2b\xa1\xd1\xf8\x12\xc5\x24\x42\x12\xdf\xf8\xe8\xf8\xf3\x0c\x87\xea\xbf\x4f\x83\xe3\xa3\x43\xe3\x4c\x61\x00\xa5\xd6\x8c\xad\x5e\xa9\x08\xb1\x7a\xb9\xf2\x5f\xa3\x97\x30\xd2\x6b\x50\x12\x35\x09\xb2\x8d\x10\xc8\x80\xac\xff\x87\x83\xf3\x88\xde\x18\xa2\x8f\xea\x9f\x6d\x3a\xf7\x4f\x70\x0e\xe1\xb5\x4e\xb4\x4d\xb8\xf7\x95\x1f\xeb\xab\xad\xdf\x9d\xb3\x8d\xcc\x22\x41\xd7\x5b\xb9\xa7\xe5\xf8\x1e\x8d\xe3\xa8\x34\x8e\x27\x6e\xbf\xb4\xf4\xd4\x84\x0a\x7c\x8e\xb9\x1d\x30\x21\x94\x24\x79\x32\x3a\x81\xa3\xcd\x98\x43\xe8\x76\xcc\x29\xc6\x0f\xc5\x9c\xe3\x5d\x32\x27\xa7\xe4\x43\x8e\xb7\xe2\x4f\x05\xc5\x50\xeb\xda\x57\x1e\x2c\xb2\x06\x1c\x60\x31\x33\x23\x4b\x9c\x91\x6c\x33\x96\xf9\xac\x05\x65\x3d\x0e\x71\x45\xf9\xe5\x0c\x7a\x8b\xaf\x0b\x84\x7e\x11\xf6\xb7\x1a\x78\x1f\x63\x7b\x04\xc4\xaf\x34\x34\x5c\xa2\x38\xc7\x5d\xe3\xe0\x5e\x75\x47\x26\xf6\xbd\xe9\x4d\x44\xb8\x9f\xce\xbc\x22\x1c\x87\x82\xf1\x5b\xcb\xcc\x4a\x12\x13\xc4\x2f\x22\x76\x45\xcd\xcc\xaf\x91\xf9\x43\x01\x0c\x84\xc2\xe9\xe5\x51\xf0\xf8\xef\xf0\x92\x25\x09\xa3\xf2\x06\x64\x37\x54\xa0\x6b\xed\xb2\x4e\x26\x13\x55\x4c\x0c\xd5\x6d\xf9\x10\xe5\xb6\xe4\x90\xc9\x21\x10\x1a\xc6\x79\x44\xe8\x39\xfc\xd7\x77\x3f\x80\x40\xb3\x18\x03\xbe\x16\x98\x66\x84\x59\x28\x31\x55\xfc\x1c\x72\x84\x2d\x75\xf1\x1b\xc9\x7b\x34\xcb\x58\x9c\x0b\x0c\x29\x12\x0b\xe0\x8c\x09\x1c\x01\x12\x10\x11\x0e\x21\xa3\x02\x11\x2a\xe7\xa0\xeb\xa4\xc0\xf8\x23\x40\xc0\x71\x8c\x04\xb9\x2c\xc6\xc8\xe5\x86\xa7\x1c\xcb\x81\x73\xce\x12\xb8\x5a\x60\x8e\x8b\x6a\xa3\xca\x00\x05\xe2\x02\x47\xfd\xcd\xb9\x5b\x46\x1a\x95\xfa\xb7\x75\x56\xda\xab\x35\xaa\x3a\x58\x6f\xe6\x28\xb1\xf9\xd9\xe3\x77\x24\xc6\x7b\x07\xbe\x37\x1a\xf3\xa4\x0b\xa3\x91\xea\x74\xc7\xec\xa5\xa8\xeb\xf6\x66\x31\x1a\x9f\x9f\xcd\xbc\x55\xb0\x7b\xab\x71\xa9\x81\xb9\xee\xde\xa7\x52\xea\x27\xec\xbc\xb8\xa8\xc9\xb8\xbd\xea\x62\x1c\xab\xca\x50\xb7\x9a\xa2\x1c\x3c\x50\x52\xfa\xf8\xb1\x47\xc6\xa5\x0b\xce\x56\xb0\xf6\x72\x4e\xdf\xd6\xa0\xa5\x67\x29\xe5\xd8\xea\x33\xe6\x0a\x8c\x2d\x5f\x5e\xd6\xf2\xba\x49\x4c\x0e\x1e\x4a\x62\x3e\x39\xf2\xa7\x28\x31\x4c\x55\x59\xa4\x93\xc0\xe4\xd8\xa1\xe4\xe5\x53\x13\xdb\x5e\x5e\x6d\x1e\xbc\xe0\xdd\x46\x1c\x9d\x33\x9e\x20\x9b\x7f\x57\x10\xe6\xfd\xf6\xea\x9f\xb3\x10\x5c\xba\xe3\xb6\xb2\x17\x18\x04\xf8\x4f\xbd\x37\x9a\x55\x97\x95\x19\x96\x4b\xba\x17\xb6\x5a\x1c\xe6\x84\x2d\x54\xcb\x3e\x4b\x05\xb5\x7c\xac\x03\xca\x5c\xed\x85\x3e\xeb\xc3\x45\x75\xb0\x6b\x79\x58\x0e\x1f\xca\x12\x3c\x0c\xc1\xa5\xbe\x8e\xba\xef\x56\x93\xd6\xc3\x07\x9a\xf4\xdf\x86\x9a\x74\x1e\x0b\x92\xc6\xb8\xfb\x22\xb5\xc2\x30\x54\xc1\x7b\xa0\xa9\x53\xe6\xf4\x49\xae\x39\x53\x26\x86\x52\xee\x27\xb7\xb7\x25\xdb\x61\x31\xb5\xf1\x72\xe9\xc0\x3b\x71\x53\x0d\x1e\x8a\x9f\x3e\x86\xf3\x51\x87\x39\x86\xab\x77\x6e\x27\xa3\x80\xe9\x2d\x9f\xd7\xf8\xfc\xf2\xf9\x77\x0a\x76\x9f\xcf\x7b\xe4\xad\x03\xe6\xf3\xfa\x09\x3b\xcf\xe7\x35\x19\x3b\xe8\x16\xb2\x34\xaa\xba\x79\x67\x69\x19\x5a\xe1\xda\xc4\xa9\x2e\x10\x8d\x38\xbe\xca\x3c\xdc\xea\xd3\xe0\x49\xf0\xd4\xe1\x57\xb7\x0d\xe7\x7d\x76\x68\x61\x8b\xc6\x91\x7b\xd7\x11\xd2\x4f\x54\xbf\xaf\x1e\xdd\x9e\xd8\xf7\xd5\xa3\x4f\x53\x62\x11\x4e\x31\x8d\x30\x0d\xb7\xf0\xe4\x55\x1c\x43\xe5\x54\xae\xfe\xc3\x2d\xdd\xf7\xfd\xf3\xae\xc3\xf6\x1f\xb6\xed\xd4\x55\x08\x19\x78\x01\xd8\x97\x36\x5b\xaa\x6f\x23\x9a\xc7\xb1\xbb\x86\x67\x0b\x85\x97\x7f\xb6\xd2\xdc\x66\x6e\x24\x41\xd7\xdb\x47\x84\x6b\x48\x86\x72\x24\x3e\x0b\xc1\x90\xad\x9a\x3d\xb0\xa9\x8a\x64\x28\x36\xf9\x94\x21\x06\x63\xd3\x27\x5f\xe9\xea\xb0\xf0\xef\x2b\x5d\x77\x55\x32\x9b\xfa\x52\x8f\x44\xbc\x45\x6c\xe9\xe0\xee\xc1\x95\x4d\x7b\x14\x1b\xa0\x43\x31\xa1\x5a\xf6\x90\x8f\x68\x2b\x7a\x98\xf9\xb4\x7a\x07\x37\xf4\x1b\xdf\xfe\x72\x8b\x3b\xea\xf2\x15\xa8\x85\xe0\x36\xf0\xd6\xd0\xbc\xbc\xd7\xab\x0a\x3c\x75\xed\x72\x54\x68\xf3\x8f\x25\xc1\x1d\xd8\x2e\xf1\x15\x1a\xb0\x25\x5b\x14\x9a\x8f\x83\x21\x1a\xdf\xb6\xfc\xb8\x49\xfb\x65\xc7\x93\xe0\xf1\x46\xfc\x70\x6f\x31\x17\xb0\xee\xc5\x60\x0d\xd4\x8f\xbd\xae\x8d\x69\xfd\xd7\x2e\x80\x2b\x4e\x04\x7e\x47\x63\xd3\x6b\xc3\x06\x70\x97\x14\x4a\x54\x3d\x97\x3f\x8f\x8f\x02\x47\xd4\x5b\x21\xce\xbb\x90\x59\x30\xc7\x79\xdf\x75\xd7\xc9\xd6\xdb\x7d\x3d\x4e\x29\xd5\x86\xeb\xf9\x1d\x9b\x42\xa7\xdd\xb7\x3b\x36\x87\x4e\x71\xd5\x1d\x9b\x83\x76\x3a\x5d\xe6\x30\x70\x76\xee\x3e\x5c\xa4\x06\xec\x0c\x2c\xeb\x88\x86\x8a\x2f\xbf\xde\x49\x7c\x79\xcf\x2a\x81\x9b\x29\x41\xe5\x4c\x8d\x4e\xb2\x5f\x8e\x1f\x4a\xe4\xae\xf4\xba\xff\x7e\x41\x77\x80\x70\x8f\x5b\x13\x8a\xe3\x57\x7a\x6b\x4d\xd0\xf8\xfc\x5a\x13\xde\x2b\xd8\x4f\xb4\x35\xa1\x5b\x1f\x81\x66\xef\x1d\x7b\x5d\xa5\x30\x8e\xfe\x74\x48\xe1\xf3\xd4\x21\x05\xfb\x89\xea\x90\x67\x7b\xcb\xf0\xef\x50\xe9\x27\xec\xbc\xbd\x45\x93\xb1\x7f\x5d\xe5\x7e\x36\x1c\x74\x8a\x87\xf7\x0d\x07\x25\xd8\x47\x29\xb1\xfd\x9e\x6e\xe7\xf0\xb3\xf3\xeb\x2a\xf5\x25\x36\x4f\x31\xcf\xb0\x90\x4b\xeb\x1a\x7f\x35\xa6\x41\x38\xec\x4a\xe8\xfa\x7a\x9b\x26\x42\x02\x8f\x05\x49\xcc\x27\x56\xd8\xb8\xb1\x5e\x2f\x5f\xa2\x00\xcd\x8b\x7e\x79\x10\x7c\xd5\x56\x25\x1e\xe0\xf5\x9c\x15\x57\x1c\x70\x8e\x17\x74\x3a\x36\x9b\xac\xa4\x22\x23\x5c\x3e\x26\x09\x3a\xc7\x63\xe9\xae\x36\x11\xce\x0b\xd0\xc3\x41\x0d\x07\x8e\xe7\x98\x63\x1a\x62\x40\x19\x44\xea\x28\xdb\x08\x66\x37\x70\x7a\x4e\xc4\x22\x9f\x05\x21\x4b\x26\x7a\xc0\x24\x22\x92\x85\xb3\x5c\x62\x9a\x94\xe3\x56\xf2\x6c\x19\x21\x38\xc6\xcb\x1b\xc7\xc1\xf1\x57\x2b\x14\xb7\x2f\xc0\x3a\x03\x77\x23\x47\x9c\x20\xd2\xd2\x6b\xe2\xf4\xdd\x72\xf8\x50\x56\xe5\x08\x8f\x60\x18\xa1\x68\x6e\xec\x46\x12\x0b\x96\x09\x75\x40\x73\x67\x61\x2c\x31\x0c\x25\x8f\x96\xed\x86\x01\xe4\x51\xf2\x64\x37\x22\x21\xe9\xe5\xdf\xba\x8b\x43\x8e\x1e\x4a\x14\x8e\x2e\x0b\x18\x46\x14\x8a\x17\x3b\x13\xc3\xd3\xad\xc4\xf0\x74\x28\x31\x38\xaa\x9b\x30\x98\x18\x9e\xee\x48\x0c\x39\x27\xdd\xa5\x90\x73\x32\x94\x10\x1c\x5d\x2b\x30\x8c\x10\x24\x27\x76\x23\x83\x0c\x27\x97\x1b\xbe\x59\xfe\x02\x32\x9c\x20\x2a\x48\x08\x97\x98\x67\x84\xd1\x7a\x98\xa5\x91\x4a\x19\xac\x8e\x13\x2b\x2f\x4d\x6e\x9d\xbb\xc5\x1c\xbb\x31\xd8\x72\x67\xe3\x17\xcf\xbf\xc7\xf4\x5c\x2c\xb6\xe8\x79\xd5\x08\x06\xca\x6b\x7d\x1a\xb5\x36\xe8\xe3\x3c\xde\x8c\x3b\x84\x6e\xc9\x9d\x25\x82\x81\xb8\xe3\xb3\xcd\xb8\x49\x97\xab\x15\x66\x55\xd8\xdd\x77\xc2\x0e\x5d\x91\xda\x77\xc2\xde\x55\xc9\x74\xec\x5b\xd8\xb2\x5b\x61\x20\xa9\xfd\xdd\x43\x68\x2d\x4b\xdd\xaa\x74\x37\xe2\xf8\x1c\x5f\xdf\xa7\xb3\x7d\x3f\xb3\x8c\xb4\x8e\x5a\x8e\x28\xa1\x8d\x90\xcb\x2f\xee\xb0\x5c\xd4\x3f\xb9\xe3\xd0\xdf\xf5\xb1\x3c\xa7\xdb\x7e\xaa\xe7\x05\x64\x84\x9e\xc7\x18\x28\x8b\xca\x2f\x1d\x9d\x86\x28\x8e\xe1\x9c\xa3\x74\xb1\xd2\x25\x4c\x83\x2b\x72\x41\x52\x1c\x11\xfd\x4d\x27\xf9\x6b\xf2\x12\xc5\xf1\x6f\x0a\x72\xa5\x25\x86\x3a\x67\x55\xad\xed\x1f\x3d\x19\x15\xe7\x33\xae\x87\x3a\xab\x40\xa5\xc2\x7f\x4f\x84\x2c\xed\x0b\x53\x8a\x38\x8a\x63\x1c\xf7\x8d\xef\x7b\xd6\x1f\x8d\x19\xe6\x04\xf5\x46\xa1\xc6\xe6\xa0\xaf\xf8\x5f\xf9\xd5\x19\xdb\xd6\x63\x45\xac\xb5\xcf\x39\x95\x41\x7c\x09\x21\xf5\x69\xe4\x32\xb3\xb5\x7b\xae\x4f\xdc\x84\x89\xa9\x03\xa8\xae\xff\x2f\x59\x92\x20\x1a\x01\xcf\xa9\x0c\xfc\x11\x94\x94\x7c\x03\xec\x12\x73\x4e\x22\xf5\x11\xb1\x1b\xc8\xb0\x00\x24\x94\x7d\xe8\x1a\x6d\x8c\x2f\x71\xb3\x4e\xd8\xb2\x8e\x39\xd6\xaf\x3a\x69\xaf\xaf\x53\x8e\x33\x95\x9d\x84\x0c\xf3\x90\xcc\x62\x0c\x82\x2d\xb7\xac\x6d\x47\x56\x9b\xdd\x07\xcf\xe9\x5a\xc7\x56\xba\xc5\xda\xa8\xcc\x7b\x72\x5c\x77\xe2\xeb\x7e\xd6\x70\xae\xb5\x69\xda\x6d\x5b\xda\xb6\x83\xaa\x09\xce\x80\x50\x25\x8d\x95\x76\x35\x1b\x27\xbc\xfa\x01\x47\xbf\x1e\x9c\xea\x39\x9e\x9d\x1c\x3e\x3f\x1d\xff\x16\x4c\xa7\x93\xca\x47\xc8\x1e\xd8\xb6\xef\xdd\xfb\x39\xbe\x4b\xf9\xc1\x15\x89\x63\x98\x61\x98\xb1\x9c\x46\x4a\xc2\x28\x29\x8f\xa2\x05\x96\x7a\x1d\xb3\x14\x5b\x8a\xb4\x96\x90\xc3\x97\x38\x9b\x12\x46\x84\x6b\x0d\x84\xff\x98\x30\x0e\x59\xc8\x52\xb5\x6b\xa1\xc8\xc7\x02\xf2\x94\x51\xc0\xd7\xc4\xd1\xb6\xb8\x2b\x3d\x2d\xf8\x62\xb8\xda\x4c\x89\xdb\x63\x07\xef\x50\xa4\x6e\x10\x98\x5e\xfe\x82\xcc\x36\x61\xd7\x2b\xa3\x1a\x6e\xd2\xab\x04\xfe\x66\xa1\x40\x7f\x3d\xfd\xf5\x99\xdd\x02\x5a\xa8\x75\x51\x5d\x0e\x6f\xb5\x06\x42\x2b\xea\x75\x35\xd1\xd6\x41\x51\xe2\xbb\x41\x65\xb7\x0d\xd8\xa2\xfe\xd4\x8f\xb3\xae\x20\xf4\x31\x87\xd2\xd5\xad\x75\xc5\x3b\x77\x03\x36\x2c\xff\x78\x87\xe0\x1d\x4e\x20\xf2\x69\xcb\xfa\x67\xb9\xf1\x29\x18\x20\x9f\xef\x32\x38\x52\x8f\x4a\x5e\x35\xfa\x75\x3a\x7d\x30\x9d\x1e\x04\x0f\xa7\xd3\xc3\x07\xed\x7d\x85\x67\x6d\x0b\xd1\x6b\x7a\x49\x38\xa3\x09\xa6\x02\x2e\x11\x27\x68\x16\x9b\x96\x24\xa7\x0b\x98\x93\xd8\x68\x7b\x9b\x2e\x8a\xdf\x11\xe3\xb3\xf7\xcb\x61\xf3\x6f\xa0\xe5\x50\x1d\xc5\x7e\x0b\xeb\xe1\x86\x0e\x60\xe7\x8b\x9c\x8a\x94\xbb\x68\x78\x5b\xcb\xab\xe6\x95\x57\xa3\x67\xad\xa1\x42\x30\xe0\x38\x63\xf1\x25\xd6\x87\xfb\xff\x9e\xf1\xf0\x77\x38\x20\x73\xc8\x52\x1c\x92\x39\xc1\xd1\x21\x30\x0e\x14\x8b\x2b\xc6\x2f\x02\xf8\xe1\xe7\xf7\x3f\xa9\x83\x67\x41\x55\x48\xe0\xf4\xf2\x38\x38\x0a\x8e\xe1\xdd\xcb\x37\x70\xf0\x2e\xc5\x14\x5e\x2e\xa5\x02\x6f\x28\x11\x44\x7d\x4a\xe0\x10\x7e\x67\xfc\x3c\x60\x29\xa6\xa5\xd0\xb2\x40\xf1\x23\xe0\x78\x1e\xa8\x5d\x69\x44\x29\x13\xaa\xe4\xf2\xbb\xb1\x61\x63\x7d\xf4\x44\x77\x46\x48\x32\x27\xb3\x98\xcd\x26\x9a\x90\xc9\x0a\x4b\x16\x24\xd1\x61\x60\xf6\x85\xbb\x0b\xb7\x4c\xcd\xb1\x69\x1e\xc7\x2f\x39\x8e\xac\xad\xb1\x9b\x93\xbb\x42\xe9\x45\x41\xc6\x43\x4f\x0d\x7a\xcf\x72\x1e\xaa\xe2\x88\x16\x5f\x77\x8d\xd0\x02\x8c\xd1\x0d\xcb\xc5\x36\x12\xaf\xe2\x71\x88\xbc\xb5\x8d\xba\xdd\xf0\xad\x2f\x85\x1b\x19\xe7\xfc\x9c\x2d\x2c\xed\xd6\xcf\x29\x79\xc6\x0f\xed\x8f\x94\x82\xee\xe4\x07\x9b\x31\x40\x67\x3f\x58\xfb\xcc\x78\x79\xdd\xf4\xb9\xf1\xb5\x45\x1c\x42\x44\xa5\xaa\x95\xfe\x4b\xed\x4f\x2a\xc7\xc5\xc4\x02\xf3\x15\x64\xb3\x65\xdc\xfe\xce\xb1\xb5\xc8\x5e\x76\xb8\x1b\x6e\x15\x47\xf9\x1a\xee\x58\xdb\xd1\xfd\xbe\x60\x5c\xe3\x55\xca\xb8\xb1\x63\xbe\x71\xc2\x81\x84\x2b\xa2\x04\xc5\x90\x75\xc6\x09\xa6\x2e\x2c\x58\x66\x58\x5e\x5a\x97\x1f\xbf\x48\xe9\x54\x05\x44\x07\x63\xfd\xef\xe1\xf3\x03\x11\xa6\xff\x9f\x47\xe9\xe1\x73\x4f\xd7\xf2\xdf\x2c\x13\x20\x27\x7c\x90\x1d\x4a\x8a\x67\x44\x85\x3c\x4e\x73\xb6\xa9\xb9\xab\x04\xef\x38\x87\xb9\xa1\xe5\x50\x8b\x9c\xeb\x93\xec\xe4\x47\xba\x1a\x8e\x7e\x6d\xa8\x53\x90\xec\x2b\xc3\x13\xfb\xf7\xe6\x4b\xa0\x46\xd5\x70\xa9\x65\xc5\x6b\x4d\x28\x8a\x64\x5c\x08\x09\x4a\x53\x1c\xe9\xdc\xa5\xb8\x65\xeb\x04\xed\xc3\x3b\x77\xe5\xaa\x0c\x6c\x5e\x99\x3f\x34\x57\x9b\xe9\xff\x32\x7e\x21\x13\xd8\xa8\xf2\x81\x38\xb1\x80\x83\xf5\xda\x68\xa5\x75\x42\x2d\x4d\xcd\x10\xdd\x39\x5b\xfb\x1e\x8b\xbd\x3a\xad\x23\xcb\xca\xb5\xf5\x8f\x9f\x7b\xb1\xa6\xf2\xac\x11\xa9\xc7\x93\x86\x17\x86\xe4\x54\x53\x8e\x23\x12\x22\x81\x01\xcb\x78\x1f\x09\x9c\xa9\x04\x40\x15\x5b\xb4\x0b\x42\x71\x0c\xcb\x24\x26\xbb\x20\x52\x23\x02\x73\x4d\xbb\xe9\x86\x2d\xf5\x61\x83\x02\xea\xf9\xc1\xd5\x82\x84\x8b\x75\x5a\x04\xcf\xb1\x8c\x60\x15\x4d\x35\x49\x58\x93\x34\x63\x8c\xed\x5c\x5a\x47\xf8\x43\x53\x69\xeb\xab\x6a\x43\x69\xbb\x3c\xe7\x9a\x64\xa6\x9d\xd6\x21\x9e\x45\x0d\x99\xd4\x20\xcf\x61\xe2\xb5\xef\xb4\xd6\x7e\x9f\xd5\x57\x4b\x97\x7b\x93\x22\xf2\xd9\x6a\xf8\x49\x6a\x0c\x99\x83\xd4\x5c\xfd\x71\x6d\xc4\x31\xe0\x0f\x39\x32\x35\x42\xb7\x6e\xd5\x3b\x37\xe9\x7b\xab\x9c\xed\x32\xa3\x69\x75\xcd\x85\xce\x6e\xc2\x7c\x5d\x3e\xd0\x03\xe1\x6a\xb2\x0a\xf9\x5c\x22\xb0\xae\xfa\xde\xb5\xaf\x26\xed\xd4\x7c\xd0\x8e\x55\x69\xe8\xcd\x4a\x69\xe8\x97\x62\xaf\x37\x5b\xe8\xcd\xca\x2f\x6c\x22\x02\xca\x76\xa6\x3d\xce\x38\xc3\x5e\x24\xfe\xcb\xb8\x08\xb3\xb4\xb1\x43\xdc\x71\xf7\xb7\x68\x97\x68\x0f\x70\x74\x7e\x1e\x93\x3f\x71\x06\x6f\xde\xfe\xf8\xf3\x4f\xbf\xbd\x7d\xf1\xc3\x6b\x9d\x50\xfc\xf2\xe2\xfb\x9f\x5f\x03\xa1\x45\x9b\x2e\x7c\xb9\x02\x38\xd1\x37\xbf\x0c\xe0\xcd\x7c\x09\x97\x01\xcd\xe3\xf8\x11\x10\xb1\xaa\x10\x64\x59\x9e\xe0\xa8\x80\x78\xf6\x0c\x1e\x1c\xac\x70\x38\xa2\xa4\x6d\x63\xda\xaa\x52\xda\xa3\xda\x8e\x05\xdb\xdb\xac\xb2\x1a\xc2\x1b\xd7\xae\x00\xb4\xe6\x49\xe0\x4a\x7f\x4b\x00\x7b\x1a\x5c\x82\x58\xd3\xe1\x12\xa2\xe5\xdc\x96\xd6\xd3\xbb\xfc\xb7\x68\x6e\xb5\xa6\xdb\xec\x58\x2a\x6f\x39\x6c\x6b\x65\x55\xef\x7e\xfe\xa9\x34\xb3\x8a\x6d\x69\xab\xaa\xdc\xd4\xb6\xb5\x06\xed\xb0\x30\x05\xf0\xec\x59\x15\x7e\x6f\x5e\x35\x8c\x2e\x75\xdb\xb9\x5a\xb9\x2a\xc2\x9b\x6e\x88\x49\x3c\x98\x4a\xdd\xcb\x20\xcf\x70\x04\x51\xae\x82\x02\x94\x8b\x85\xbc\x1e\x22\x9d\x3b\x11\xb1\x28\x0e\x27\x59\x56\x78\x11\x2d\xba\x7b\x18\xef\x74\x14\x47\x9e\x61\x6e\x29\xf6\x99\x08\xbd\x97\x41\x8c\x31\x5c\xc8\xb2\x2b\xc6\x6d\x67\x2e\x7d\x14\xd3\x6e\x55\x7d\x67\xce\xb7\xd2\x0c\x17\xfb\x6a\xb7\x7a\xac\x40\x9b\x37\xcc\xdc\xdb\xef\xe6\xd3\x68\x5a\x82\xc7\x4a\xaf\x6f\xce\xc9\x78\x15\x87\xae\x93\xf7\x99\x85\x54\x47\xc9\xa7\xb6\x77\xb0\x65\xc1\xa7\x6c\xe8\xb4\xf5\x24\x2e\x01\xec\x2d\x89\xfe\xe5\x1b\x9b\xda\xb6\x87\xc4\x6b\x7d\xa2\x35\x52\x7d\x1b\x7f\xea\x52\x96\xb8\xe4\xd2\xab\x83\xab\x22\xe9\xe7\x7a\x07\x51\x65\xfe\xa1\x7c\x64\x04\x19\x49\xf2\x58\x20\x8a\x59\x9e\xc5\x37\x81\x7f\xf4\xcd\x11\x35\x6f\xfb\xfa\x98\xef\xaa\xef\x74\x0d\x48\xa1\x74\xab\x78\x6e\xea\xa0\x6f\x54\x34\x17\x48\xc0\x39\x16\x99\xea\xf9\x64\x14\x30\x0a\x17\x2b\x06\x2c\x7b\xa0\x63\x66\xd2\x7d\x1f\x39\x36\x09\xbb\xb4\xf4\x79\x75\xe7\x86\xc2\xb8\xbd\x41\x29\x9e\x1a\xb8\x68\xb5\x32\x6b\xcf\x7b\x45\x63\x8b\x2e\x64\x9b\x59\xe9\xdb\xbb\x35\xaa\x4a\x6b\xf3\x20\x26\x55\x53\x29\xa5\x6d\x4b\x9b\xc2\x1f\x72\x1d\x9a\x34\x2c\xca\x1c\x2f\x36\xb4\xc6\xbd\xcc\x98\x64\x0a\x06\xb9\x42\xdb\x3e\xdc\x86\xcf\xcd\xa9\x30\x9e\x9a\xe0\xf1\x5c\xab\xb6\x75\x72\x31\xf5\x15\x4d\xc2\x55\x8d\xfa\x11\x90\x00\x07\xea\xa7\xae\x99\x08\xa6\xae\xab\x76\xef\x5e\xf6\x50\xfb\xdd\x0e\xbd\xb3\x5e\x4d\x4b\xbc\x9d\xb4\xd7\xd7\x44\x40\x58\x6e\x58\x54\x28\xf9\xa6\x4c\xec\x23\x98\xe1\x39\xe3\xb8\x46\x76\xb3\xaf\x61\x8b\xf6\x7a\x1f\x6f\x4b\xe6\x13\x8d\xa1\x1e\xec\x75\xf2\xef\x1b\x1d\x22\x58\xe3\xda\x2f\x65\x4f\x21\x8a\x22\xbd\xa5\xa8\x9b\xca\x1a\xb2\xdd\x3c\x49\x21\x34\xc2\xd7\x9e\xa1\xfa\x92\x8e\xda\x43\x33\x99\x78\xb3\x90\x28\xd9\x29\x7c\xe5\x96\x57\x82\x22\x0c\xe8\x12\x91\x58\x8d\x13\x0b\xce\xf2\xf3\x45\xf7\x70\xde\xbe\x02\x56\x7f\x5f\xe0\x1b\xbf\x54\x45\x02\xf6\x37\xf5\x0b\x7c\xd3\x69\xe2\x9b\x76\xaf\xd6\x4a\x0e\xa6\x0e\x56\xc3\x5c\x75\x22\xd5\xdf\x6c\xb5\xc3\xbc\x8b\x82\x6e\x4d\xce\x06\x7f\xc7\xaf\x7c\x95\x09\x2d\xcb\x36\xcb\xd7\xf4\x8a\x33\x06\xaa\xaf\xea\xd5\x79\x5f\x9c\x42\x50\xf8\xc6\x8a\x8f\x36\x33\x8e\xa5\x59\x8a\xc3\xda\x8b\x84\xfa\x9a\xd7\x43\x4e\x35\xf0\xaa\x03\x4d\xff\x0e\x08\x3b\xd4\xf5\x92\xd9\x4d\x83\x90\xea\x81\x0b\xbf\x54\x56\x4a\x9b\x2a\xaf\xa9\xef\x41\xd1\x3c\x32\x9d\x06\x86\xff\x1e\x3c\x3f\x39\x98\x4e\x55\x83\xc9\x8b\xf1\xbf\xd0\xf8\xcf\xf1\xd9\xc3\x83\xe7\x27\xd3\x69\xb0\x76\xe9\xf0\x3f\x0f\x0f\x9f\xab\xeb\x0f\x2b\xd7\xa7\xd3\xf1\x74\x1a\x9c\x3d\x3c\x7c\x5e\x18\x85\x94\x8d\x62\x4a\x33\x62\x19\x2d\x5b\x65\x55\x9c\xe1\xce\x19\xff\xfa\x77\x00\x00\x00\xff\xff\x34\xd7\xda\xc3\xdb\xa2\x00\x00")

func OpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_OpspecOpfileJsonschemaJson,
		"../../opspec/opfile/jsonschema.json",
	)
}

func OpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := OpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../opspec/opfile/jsonschema.json", size: 41691, mode: os.FileMode(420), modTime: time.Unix(1571273808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../opspec/opfile/jsonschema.json": OpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"opspec": &bintree{nil, map[string]*bintree{
				"opfile": &bintree{nil, map[string]*bintree{
					"jsonschema.json": &bintree{OpspecOpfileJsonschemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
