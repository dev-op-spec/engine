// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    42733,
		modtime: 1586826714,
		compressed: `
H4sIAAAAAAAC/+xdeXPbtrb/v58Co6Yv9otF2VncW3cyGTdJ+/KmWaZZ3sy11FyIPLJwTQIMAMpW+/zd
7wDgJoq7SCmL/rJFAgfA2XDwwyHw93cIDe4Iew4eHpyhwVxK/2w0+rdgdGieWoxfjhyOZ3J4/OPIPPt+
cKTrESeqI85GI+YLH2yLsNGxdWLdPx0x31p6rhXSUTRNPUmkC6rmax/9SlwwTx0QNie+JIyqd89gRigI
hClivinhc+YDlwTE4AypniM0oNiD+Nc6lVfYA8RmSM4hIqOLyaWveyAkJ/RyoB/fmrcZEkWUnyU/8xq4
w2Gmin0/Sno9ItQPpBj5WErg9E3y4odHvww/4uFf58N/Hg9/+uHRsx/u/5Ku6BC+8jPVlZWumwbSvcaO
Q1Q57L5Jc2+GXQFHBUN7gzn2QAJXA0v4r4uu9T3VGEKDi9QwJvdW3iE0YBReK65cpB6ilSK6GIdPAeHg
rJU0I+IcLweZ55OV37dHmzQwZcwFTPtswiG8T/IzZVQ90qeBN4VeR8Cm/wZb9tmCYPYV9NtCyrcUtpD6
NUm3lufsMiZwtt6hOtYeF47dsCanjX6wVijjGs5VUeQXO4g6/S/xsitFtutDSwQfdniGA1cWdTaaUXLd
Uz5FIt6CzaGQZIb3L8wsoxtARCBhKh+V9abAl+X3x2ZUSI4JlaJwlCs68zRVobQboTnnlqlQlIxev5Dg
FRdcZ9r/vn39Cr3VEQi6yJBBV7C8ZtyZHEQhjGTMFRYBOdNhz1x6bhj7XHNyOZfDVGA0XGCXOFjRGx6f
fC/A1v+eWifHh7kj7UGnDV/TT1IyTD9O/ZvrI3K7e5s/igHZRAakR87/VMJ4TJc5sUeZe/9i5VYiu8px
Vsn2C2XH6kxb782kkVF4+GYj3xTV79A0jmPTeFTulCI3TaiES+DFBT1CiRd4gzN03Iw5hG7GnLB+X8w5
2SVzAko+BbARf1Ik+prUHtRgUWG0UWRmuSwpjWK/qyJ7ux7nrgYhZRF+PILOYuuQYL3o+hdTeB9fV6v/
M1MaLbAbQNsYuFPVUWv6ztTGIbyeyjwjHGzJ+NYWZXEXPcyvHHZN85mf6ebLsDAiFF0sjq37/0BPmecx
ql4gsaQS3xiPdTYaaRjR1q9VI9prqSqjQ0So7QYOoZfot19fIomnLiC4kUAFYbRcDfKX453r4s+K93gq
mBtIQD6Wc8QZk+AgLJFDOLIZlZhQNQYDkCLGjxBGHFwsySKso2Yb7nNQFWeceeh6DhxCmFGv/iTmEpzu
xtxuNerE+rfxirRTa9QQWGfmqKjVs8dfiQt7/723mTKbUdr0mZlLiOh2ZjCGXj2TeaXL7o2mRAvyAfcu
ddK0sHNY0XRje7ii62pQqB2aqCr3tCK9f7/GcstAzYXFqqGcjo3BCK8AxinCZm4brZUjFK+dwFTlvgT2
YC+wvA4D1YhIK3mpun2J63gr4qry3204OmPcw7KMp/nb7LUh4NgZVyFeeQL8w2yJivSkMgU1n9eilgnC
SsuGqnVRjlRHzZaUmvQPDYfAYFtkWFXvyxJqGEKZ+pZAvhsN2lTvadAP+xp04Eriu9B+jkoo9IV19zR0
ymTbMVMm+1LuR1vbim0xlxaxMvLfrZipK/fFzoffeJDzJWxhhGU6W8obevWW8q912f1SvnrJ2uNS3rSw
86W86cYOUoTeVJeunSeU0GriUueYOhyuRQ2nemo9sk5LvOqmsXydndlN8kW+uLyYTiL6PW60NanvcaNv
UmAO+EAdoPYGbjxNo6/V1E/9+e59ymGj/bntpfrtMc0K2G1AA9ctB++KwuAqTO62KfK2eTS4QqQvP/Jg
x+mZHbApTaQvNj3cJZu+dYirxbS/h7i+knjM39g/+L07h9MaoiuBGdrACGnAQzVRBXfk8yn54NauV7/6
YxZUFU759YZXG41rFJfH7zpVgdOyzY1WkWRFWJvRgA3Zosl8HQwx9Dblx9KHrr17I35cVJZEVXPBStF6
7C3bj64rgGtOJLym7nJzKcSkOgY+T46tB42UsxLCrFr8Vb0tZetWv4fTOtVwOv+8RtBq0+3zGkKroOrz
GoJxOG2G0PO6vPwUkSZBZZZQX7HljzuJLb8sCLCZDqQOz2gl+qh+XxJ/tNUMwfLY4AtORwjPWeksHcHQ
q5eO8FaX/TbTEdrlDhjufmYfp4S20Z0KaXo1VUiX3We0tHBdHWqlEcKuM1pMN/Yfp3yRSQatYuF9ksFX
LbD9Rm7r0LP1xynZ+TXwgQuQal5d4a+h1AuHf+wx3y4+wAFLGEriQaOvZ1Zh8ogEMrzolgfWgypwuIeP
cRKutPsc52hTqajwlg+Jhy9hqLxVE+GcI1Md6eqIwww4UBsQFsjRp9U6aLpEF5dEzoOpZTNvZCqMHKJY
OA0UpVFcL5FnRQ3JAaIXJ9bJg4TE9gWYZeBu5AgeJm57y9LV+7Kq+1sXiuHGbiQxZ0LqM5hbCyOi0Jc8
HmxdHjFPdiMS4i8etheHqt2XKB5uXRSaFzsTw+lGYjjtSwyPdiGG0x2JIeCkvRQCTvoSwunWhaA4sRsZ
CPAWDb8jP0cCPEwlsdECuCCMZsMsQ1TJIDk4LH402jp3wzHu9jPz34FeyvkGia6GQE/r2tNukzdPmua4
bsidiEBP3Pmx49TWo+JBRrDuPv21Z0Bqn/76lSCFYac2TFPoSWj/qCGziokuAe4GHC7h5ks6wve7gpqF
taIat2vXAaVLRnfqsEBmL9UpUd/Vujygm17Gc44EoZcuIMqc+CqjCxu7Lrrk2J8nugTUuiZXxAeHmFub
1K/RU+y6H3XJREtyUM6Ve3oK7zUZhAcxrgY6SZiS4n9NgszvipKPOXZdcLum9zvrro8COMFut9RK+hf+
N0lubyq4tikRa+bGpjiEj0sofRqUmVntW2xsLy/3J6v/T5nnYeogHlAV9mMU9+RnxBbAOXH0LWFLJEAi
LLV9GITWhQWso4QV01jJ9JXt2vMbn4PQaxObAbfJ1AUkWbRdXXQ0db774AFdydXy60+NVnZu1OY9Osk6
8duq86vzhl21nV10IDUBgQjV0ki0az1nolYi4ODPgwszxsnZ4ZOL4UdrPB6l7hm7U7R1X76bU3cqP7gm
roumgKYsoI6WMPbiM2cR82sdqeS6jWLEup0rUkKHcKOB6L9GjCNhM1/vWejug0SBzyiCGyIbhs9b0NPi
YGPSInaoHYpkDQLo4gPOt4livfq7aTSUnx5SOz928OfFn4+LLaCLPc1KayA0pV7XI2MdFHt1t6eKbWMT
9KkbZ93QHGJXt5IMX7oX0BD8qR2CtzhwqE5K1h/xtqdkCKMF5gRPXah1pnaZrqtif47Hd8bjg4u0q5jc
G48P71SnGE6qJqbndEE4ox5QGfc6Z4qqPFW+i0nyV+Lup8edTo/6DPYtzI8NHcLOJz0dObfR8KrsV8Or
WkmfmfQKyRAHwdwFmFP9Kchrxq+sfHeyu6AlL73UD1z3KQdHNMr4Le1uQrJWDwS3a/L9LQu4rSEGrQQW
evn+7Tt9eC/SyBO6WJxYx9YJev30BTp47QNFTyPtRi8okUTfxXCI/mXSQ1y8ZIH8V26aC/OBxqYhRqaC
8MEeTV02HZmGRmk6luccJreNWC3vcKg0nIaRXekNsLHe1zPqo66aVCJv5Ucm3fmRzL3cRTqn7+demQSR
jalSutj+9W6fNnwm58CTkqJwaV94a/RR8W3PR4XXHB8VXk981PLS3wyvfMZzs8/XjglQ5cJZVjNklXGS
6QdzJuTgqLH7rhdpXOiA4mBo/h4+OZC2//+B4x8+qelk/ocJidSAD8Sh6vGU6JCh1JyL1LwM0i45w3hS
FYZmBznY5gRsvsBpFWTWleFZ8RXtxShcpGXhF0LYcVRchTzs++CYtUD4qiivsgPv3JqrKmB4ln9BW2ak
/8f4lVoQOqmL1eQcHaxijalEBD1JHRZbXN5oi/csitFeE5kV3hdeizWptgYkG4/lfHyjhupzcIiNJSBQ
8TKWIHQArcEL44Kw66JoESCuiNIIKx8jXnfDBXhrjgKa8aHrObHnq32RPADEuOnTIHsecsGMnhujlk6t
A/i0rrSTKqVt084NEXk7l320RWFL7TD5vO6wvitx1+ULDSWiOtD9O6UxZIaU5pobqTEHBJ8CnJdWXLnz
Xbrn3RkStcu1TaVrDnW2CfPN8ttURNejJOQrE0HhrN8OSFofCIVmGkSXiQbRu3KvRBsoUeIkmoiAss9D
lUojkGI49jZ3es5ZQOUunsKMADvgHKjUc7GFnpo1VCBMaEYcoJLMlslsrZcP71/cFWralAy5REiEBaIA
jglrwsUWdl1RMJdnA5uV3sM65rGW2UCRNgU1BEGmrtJb3Tk1dBHO89mx6R4KC71NVRBx8HFFXBccxKgN
SitcRi+Bh4PqOiKJuF+IgZfr2YqOXaTymyb37lRrB/PXdupb7sKHaSvVgbFBeFzyFwj04tWb9+8+vjp/
+dxo0ofz398/R4SGydLoblLgzLy8a6EXs6icQDRw3SNEZIIxCRF44IQlHj9Gdw4SGof9rWdXzbpjoHyb
6HZOWIwrdrWqzzmrPN2sBD6phlGq4ZQKWKX5VtlWsfT1zLE6tpVY1ev372IzS9mWsarUS2NbK6VLLEwX
ePw4XX5vXjURis9Crcr2FJpuRCo6KjbArjDRghPo+BEHcq6e29isuYmch+fDRHsEmIZZVoy3Og0lEMAL
QOKvJt7NjSyFuGbc+abD/FKsINGMMvb1t3ORv1FZmAYhovvFJUM8oOlds7uXRA45+Oz7v98+f/nh+R8f
f3vx7uO7899uFZPnd5Xp3I2Cx2TJchcVLEw6hxQze1MbAopxAm5RDmlUoDiFtH4wXqTe1aHzSl5vpqt1
E7Wy2qBoqSnaBGEhqMS17zTIklqmgIME8QJXYgosEG5mE7M0SueY5m/L1zHzJE94pZAmWW4KAa2DmM+x
RJcghc7RZRQBtucJA6IVqsvypok6clzv2KIgL689NzTFzQ1K8zSHi4VWVviNQkpjw6zxIrMyr3drVKlU
9F5MKqNSWtsim4JPgQlh1iwqP678u9l0lCfTPLlW7vM2bDegMveMixrtFmpbKxeTnflUubRRHyFigaV/
GhhOMv1cp+d3skff7Xb7Z+vVjMSru/b8hkhkxxtiqZ78HAMADprCjHHIdNvq8nOIOt6WzEaGQiOwtMi/
NzrvMcO1D3HOJ3Ycg4uapL812TZfzBDqwE3NkD7qR6ZRoRbozCZadppejGp62AGEF5i4up6ccxZczvPD
/pZL6Tqi1MhrvjTbrbZb50+GmfmdfD+Q41SuYNmhLK9guZfkjiRp1sfdydLMb3tpbkGau/8mOP70EUfw
YvRZb3giSfrT3qwyhWeWhHNzKkbI5y7zhQ925sNj86xWIxemcJJra35bhB0aXG+6XOtI+niWD6lIrWjf
amXH6iBMjhuPrZx/D56cHYzHOoHufPhPPPxrOLl38ORsPLZWHh3+9+HhE/38Xur5eDwcj63JvcMn4UaY
ko1mynrEPIhS6XWcW45Z3P4nAAD//yDTn/PtpgAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
