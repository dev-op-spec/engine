// Code generated by "esc -pkg=opfile -o validator_schema.go -private ../../../../opspec/opfile/jsonschema.json"; DO NOT EDIT.

package opfile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/opspec/opfile/jsonschema.json": {
		name:    "jsonschema.json",
		local:   "../../../../opspec/opfile/jsonschema.json",
		size:    42780,
		modtime: 1587008420,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
