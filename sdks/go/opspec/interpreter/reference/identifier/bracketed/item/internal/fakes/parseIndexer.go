// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type FakeParseIndexer struct {
	ParseIndexStub        func(string, []interface{}) (int64, error)
	parseIndexMutex       sync.RWMutex
	parseIndexArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	parseIndexReturns struct {
		result1 int64
		result2 error
	}
	parseIndexReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeParseIndexer) ParseIndex(arg1 string, arg2 []interface{}) (int64, error) {
	var arg2Copy []interface{}
	if arg2 != nil {
		arg2Copy = make([]interface{}, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.parseIndexMutex.Lock()
	ret, specificReturn := fake.parseIndexReturnsOnCall[len(fake.parseIndexArgsForCall)]
	fake.parseIndexArgsForCall = append(fake.parseIndexArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2Copy})
	fake.recordInvocation("ParseIndex", []interface{}{arg1, arg2Copy})
	fake.parseIndexMutex.Unlock()
	if fake.ParseIndexStub != nil {
		return fake.ParseIndexStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parseIndexReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeParseIndexer) ParseIndexCallCount() int {
	fake.parseIndexMutex.RLock()
	defer fake.parseIndexMutex.RUnlock()
	return len(fake.parseIndexArgsForCall)
}

func (fake *FakeParseIndexer) ParseIndexCalls(stub func(string, []interface{}) (int64, error)) {
	fake.parseIndexMutex.Lock()
	defer fake.parseIndexMutex.Unlock()
	fake.ParseIndexStub = stub
}

func (fake *FakeParseIndexer) ParseIndexArgsForCall(i int) (string, []interface{}) {
	fake.parseIndexMutex.RLock()
	defer fake.parseIndexMutex.RUnlock()
	argsForCall := fake.parseIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeParseIndexer) ParseIndexReturns(result1 int64, result2 error) {
	fake.parseIndexMutex.Lock()
	defer fake.parseIndexMutex.Unlock()
	fake.ParseIndexStub = nil
	fake.parseIndexReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeParseIndexer) ParseIndexReturnsOnCall(i int, result1 int64, result2 error) {
	fake.parseIndexMutex.Lock()
	defer fake.parseIndexMutex.Unlock()
	fake.ParseIndexStub = nil
	if fake.parseIndexReturnsOnCall == nil {
		fake.parseIndexReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.parseIndexReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeParseIndexer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseIndexMutex.RLock()
	defer fake.parseIndexMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeParseIndexer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
