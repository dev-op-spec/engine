// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
	"github.com/opctl/opctl/sdks/go/opspec/interpreter/call/loop"
)

type FakeDeScoper struct {
	DeScopeStub        func(map[string]*model.Value, interface{}, *model.SCGLoopVars, map[string]*model.Value) map[string]*model.Value
	deScopeMutex       sync.RWMutex
	deScopeArgsForCall []struct {
		arg1 map[string]*model.Value
		arg2 interface{}
		arg3 *model.SCGLoopVars
		arg4 map[string]*model.Value
	}
	deScopeReturns struct {
		result1 map[string]*model.Value
	}
	deScopeReturnsOnCall map[int]struct {
		result1 map[string]*model.Value
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeScoper) DeScope(arg1 map[string]*model.Value, arg2 interface{}, arg3 *model.SCGLoopVars, arg4 map[string]*model.Value) map[string]*model.Value {
	fake.deScopeMutex.Lock()
	ret, specificReturn := fake.deScopeReturnsOnCall[len(fake.deScopeArgsForCall)]
	fake.deScopeArgsForCall = append(fake.deScopeArgsForCall, struct {
		arg1 map[string]*model.Value
		arg2 interface{}
		arg3 *model.SCGLoopVars
		arg4 map[string]*model.Value
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DeScope", []interface{}{arg1, arg2, arg3, arg4})
	fake.deScopeMutex.Unlock()
	if fake.DeScopeStub != nil {
		return fake.DeScopeStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deScopeReturns
	return fakeReturns.result1
}

func (fake *FakeDeScoper) DeScopeCallCount() int {
	fake.deScopeMutex.RLock()
	defer fake.deScopeMutex.RUnlock()
	return len(fake.deScopeArgsForCall)
}

func (fake *FakeDeScoper) DeScopeCalls(stub func(map[string]*model.Value, interface{}, *model.SCGLoopVars, map[string]*model.Value) map[string]*model.Value) {
	fake.deScopeMutex.Lock()
	defer fake.deScopeMutex.Unlock()
	fake.DeScopeStub = stub
}

func (fake *FakeDeScoper) DeScopeArgsForCall(i int) (map[string]*model.Value, interface{}, *model.SCGLoopVars, map[string]*model.Value) {
	fake.deScopeMutex.RLock()
	defer fake.deScopeMutex.RUnlock()
	argsForCall := fake.deScopeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDeScoper) DeScopeReturns(result1 map[string]*model.Value) {
	fake.deScopeMutex.Lock()
	defer fake.deScopeMutex.Unlock()
	fake.DeScopeStub = nil
	fake.deScopeReturns = struct {
		result1 map[string]*model.Value
	}{result1}
}

func (fake *FakeDeScoper) DeScopeReturnsOnCall(i int, result1 map[string]*model.Value) {
	fake.deScopeMutex.Lock()
	defer fake.deScopeMutex.Unlock()
	fake.DeScopeStub = nil
	if fake.deScopeReturnsOnCall == nil {
		fake.deScopeReturnsOnCall = make(map[int]struct {
			result1 map[string]*model.Value
		})
	}
	fake.deScopeReturnsOnCall[i] = struct {
		result1 map[string]*model.Value
	}{result1}
}

func (fake *FakeDeScoper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deScopeMutex.RLock()
	defer fake.deScopeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeScoper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loop.DeScoper = new(FakeDeScoper)
