// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
)

type FakeStateStore struct {
	ListWithParentIDStub        func(string) []*model.Call
	listWithParentIDMutex       sync.RWMutex
	listWithParentIDArgsForCall []struct {
		arg1 string
	}
	listWithParentIDReturns struct {
		result1 []*model.Call
	}
	listWithParentIDReturnsOnCall map[int]struct {
		result1 []*model.Call
	}
	TryGetStub        func(string) *model.Call
	tryGetMutex       sync.RWMutex
	tryGetArgsForCall []struct {
		arg1 string
	}
	tryGetReturns struct {
		result1 *model.Call
	}
	tryGetReturnsOnCall map[int]struct {
		result1 *model.Call
	}
	TryGetAuthStub        func(string) *model.Auth
	tryGetAuthMutex       sync.RWMutex
	tryGetAuthArgsForCall []struct {
		arg1 string
	}
	tryGetAuthReturns struct {
		result1 *model.Auth
	}
	tryGetAuthReturnsOnCall map[int]struct {
		result1 *model.Auth
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateStore) ListWithParentID(arg1 string) []*model.Call {
	fake.listWithParentIDMutex.Lock()
	ret, specificReturn := fake.listWithParentIDReturnsOnCall[len(fake.listWithParentIDArgsForCall)]
	fake.listWithParentIDArgsForCall = append(fake.listWithParentIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListWithParentID", []interface{}{arg1})
	fake.listWithParentIDMutex.Unlock()
	if fake.ListWithParentIDStub != nil {
		return fake.ListWithParentIDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listWithParentIDReturns
	return fakeReturns.result1
}

func (fake *FakeStateStore) ListWithParentIDCallCount() int {
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	return len(fake.listWithParentIDArgsForCall)
}

func (fake *FakeStateStore) ListWithParentIDCalls(stub func(string) []*model.Call) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = stub
}

func (fake *FakeStateStore) ListWithParentIDArgsForCall(i int) string {
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	argsForCall := fake.listWithParentIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateStore) ListWithParentIDReturns(result1 []*model.Call) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = nil
	fake.listWithParentIDReturns = struct {
		result1 []*model.Call
	}{result1}
}

func (fake *FakeStateStore) ListWithParentIDReturnsOnCall(i int, result1 []*model.Call) {
	fake.listWithParentIDMutex.Lock()
	defer fake.listWithParentIDMutex.Unlock()
	fake.ListWithParentIDStub = nil
	if fake.listWithParentIDReturnsOnCall == nil {
		fake.listWithParentIDReturnsOnCall = make(map[int]struct {
			result1 []*model.Call
		})
	}
	fake.listWithParentIDReturnsOnCall[i] = struct {
		result1 []*model.Call
	}{result1}
}

func (fake *FakeStateStore) TryGet(arg1 string) *model.Call {
	fake.tryGetMutex.Lock()
	ret, specificReturn := fake.tryGetReturnsOnCall[len(fake.tryGetArgsForCall)]
	fake.tryGetArgsForCall = append(fake.tryGetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TryGet", []interface{}{arg1})
	fake.tryGetMutex.Unlock()
	if fake.TryGetStub != nil {
		return fake.TryGetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.tryGetReturns
	return fakeReturns.result1
}

func (fake *FakeStateStore) TryGetCallCount() int {
	fake.tryGetMutex.RLock()
	defer fake.tryGetMutex.RUnlock()
	return len(fake.tryGetArgsForCall)
}

func (fake *FakeStateStore) TryGetCalls(stub func(string) *model.Call) {
	fake.tryGetMutex.Lock()
	defer fake.tryGetMutex.Unlock()
	fake.TryGetStub = stub
}

func (fake *FakeStateStore) TryGetArgsForCall(i int) string {
	fake.tryGetMutex.RLock()
	defer fake.tryGetMutex.RUnlock()
	argsForCall := fake.tryGetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateStore) TryGetReturns(result1 *model.Call) {
	fake.tryGetMutex.Lock()
	defer fake.tryGetMutex.Unlock()
	fake.TryGetStub = nil
	fake.tryGetReturns = struct {
		result1 *model.Call
	}{result1}
}

func (fake *FakeStateStore) TryGetReturnsOnCall(i int, result1 *model.Call) {
	fake.tryGetMutex.Lock()
	defer fake.tryGetMutex.Unlock()
	fake.TryGetStub = nil
	if fake.tryGetReturnsOnCall == nil {
		fake.tryGetReturnsOnCall = make(map[int]struct {
			result1 *model.Call
		})
	}
	fake.tryGetReturnsOnCall[i] = struct {
		result1 *model.Call
	}{result1}
}

func (fake *FakeStateStore) TryGetAuth(arg1 string) *model.Auth {
	fake.tryGetAuthMutex.Lock()
	ret, specificReturn := fake.tryGetAuthReturnsOnCall[len(fake.tryGetAuthArgsForCall)]
	fake.tryGetAuthArgsForCall = append(fake.tryGetAuthArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TryGetAuth", []interface{}{arg1})
	fake.tryGetAuthMutex.Unlock()
	if fake.TryGetAuthStub != nil {
		return fake.TryGetAuthStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.tryGetAuthReturns
	return fakeReturns.result1
}

func (fake *FakeStateStore) TryGetAuthCallCount() int {
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	return len(fake.tryGetAuthArgsForCall)
}

func (fake *FakeStateStore) TryGetAuthCalls(stub func(string) *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = stub
}

func (fake *FakeStateStore) TryGetAuthArgsForCall(i int) string {
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	argsForCall := fake.tryGetAuthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateStore) TryGetAuthReturns(result1 *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = nil
	fake.tryGetAuthReturns = struct {
		result1 *model.Auth
	}{result1}
}

func (fake *FakeStateStore) TryGetAuthReturnsOnCall(i int, result1 *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = nil
	if fake.tryGetAuthReturnsOnCall == nil {
		fake.tryGetAuthReturnsOnCall = make(map[int]struct {
			result1 *model.Auth
		})
	}
	fake.tryGetAuthReturnsOnCall[i] = struct {
		result1 *model.Auth
	}{result1}
}

func (fake *FakeStateStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listWithParentIDMutex.RLock()
	defer fake.listWithParentIDMutex.RUnlock()
	fake.tryGetMutex.RLock()
	defer fake.tryGetMutex.RUnlock()
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
