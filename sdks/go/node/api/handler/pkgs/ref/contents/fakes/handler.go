// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
	"github.com/opctl/opctl/sdks/go/node/api/handler/pkgs/ref/contents"
)

type FakeHandler struct {
	HandleStub        func(model.DataHandle, http.ResponseWriter, *http.Request)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		arg1 model.DataHandle
		arg2 http.ResponseWriter
		arg3 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Handle(arg1 model.DataHandle, arg2 http.ResponseWriter, arg3 *http.Request) {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		arg1 model.DataHandle
		arg2 http.ResponseWriter
		arg3 *http.Request
	}{arg1, arg2, arg3})
	fake.recordInvocation("Handle", []interface{}{arg1, arg2, arg3})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		fake.HandleStub(arg1, arg2, arg3)
	}
}

func (fake *FakeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHandler) HandleCalls(stub func(model.DataHandle, http.ResponseWriter, *http.Request)) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = stub
}

func (fake *FakeHandler) HandleArgsForCall(i int) (model.DataHandle, http.ResponseWriter, *http.Request) {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	argsForCall := fake.handleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ contents.Handler = new(FakeHandler)
