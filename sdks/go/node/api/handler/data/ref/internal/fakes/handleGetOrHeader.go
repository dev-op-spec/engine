// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
)

type FakeHandleGetOrHeader struct {
	HandleGetOrHeadStub        func(model.DataHandle, http.ResponseWriter, *http.Request)
	handleGetOrHeadMutex       sync.RWMutex
	handleGetOrHeadArgsForCall []struct {
		arg1 model.DataHandle
		arg2 http.ResponseWriter
		arg3 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandleGetOrHeader) HandleGetOrHead(arg1 model.DataHandle, arg2 http.ResponseWriter, arg3 *http.Request) {
	fake.handleGetOrHeadMutex.Lock()
	fake.handleGetOrHeadArgsForCall = append(fake.handleGetOrHeadArgsForCall, struct {
		arg1 model.DataHandle
		arg2 http.ResponseWriter
		arg3 *http.Request
	}{arg1, arg2, arg3})
	fake.recordInvocation("HandleGetOrHead", []interface{}{arg1, arg2, arg3})
	fake.handleGetOrHeadMutex.Unlock()
	if fake.HandleGetOrHeadStub != nil {
		fake.HandleGetOrHeadStub(arg1, arg2, arg3)
	}
}

func (fake *FakeHandleGetOrHeader) HandleGetOrHeadCallCount() int {
	fake.handleGetOrHeadMutex.RLock()
	defer fake.handleGetOrHeadMutex.RUnlock()
	return len(fake.handleGetOrHeadArgsForCall)
}

func (fake *FakeHandleGetOrHeader) HandleGetOrHeadCalls(stub func(model.DataHandle, http.ResponseWriter, *http.Request)) {
	fake.handleGetOrHeadMutex.Lock()
	defer fake.handleGetOrHeadMutex.Unlock()
	fake.HandleGetOrHeadStub = stub
}

func (fake *FakeHandleGetOrHeader) HandleGetOrHeadArgsForCall(i int) (model.DataHandle, http.ResponseWriter, *http.Request) {
	fake.handleGetOrHeadMutex.RLock()
	defer fake.handleGetOrHeadMutex.RUnlock()
	argsForCall := fake.handleGetOrHeadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHandleGetOrHeader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleGetOrHeadMutex.RLock()
	defer fake.handleGetOrHeadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandleGetOrHeader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
