// Code generated by counterfeiter. DO NOT EDIT.
package pubsub

import (
	"context"
	"sync"

	"github.com/opctl/opctl/sdks/go/types"
)

type Fake struct {
	PublishStub        func(event types.Event)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		event types.Event
	}
	SubscribeStub        func(ctx context.Context, filter types.EventFilter) (<-chan types.Event, <-chan error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		ctx    context.Context
		filter types.EventFilter
	}
	subscribeReturns struct {
		result1 <-chan types.Event
		result2 <-chan error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 <-chan types.Event
		result2 <-chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Publish(event types.Event) {
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		event types.Event
	}{event})
	fake.recordInvocation("Publish", []interface{}{event})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		fake.PublishStub(event)
	}
}

func (fake *Fake) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *Fake) PublishArgsForCall(i int) types.Event {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].event
}

func (fake *Fake) Subscribe(ctx context.Context, filter types.EventFilter) (<-chan types.Event, <-chan error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		ctx    context.Context
		filter types.EventFilter
	}{ctx, filter})
	fake.recordInvocation("Subscribe", []interface{}{ctx, filter})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub(ctx, filter)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.subscribeReturns.result1, fake.subscribeReturns.result2
}

func (fake *Fake) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *Fake) SubscribeArgsForCall(i int) (context.Context, types.EventFilter) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return fake.subscribeArgsForCall[i].ctx, fake.subscribeArgsForCall[i].filter
}

func (fake *Fake) SubscribeReturns(result1 <-chan types.Event, result2 <-chan error) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan types.Event
		result2 <-chan error
	}{result1, result2}
}

func (fake *Fake) SubscribeReturnsOnCall(i int, result1 <-chan types.Event, result2 <-chan error) {
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 <-chan types.Event
			result2 <-chan error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 <-chan types.Event
		result2 <-chan error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ PubSub = new(Fake)
