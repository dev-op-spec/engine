// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"context"
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type fakeLooper struct {
	LoopStub        func(context.Context, string, map[string]*model.Value, *model.SCG, model.DataHandle, *string, string)
	loopMutex       sync.RWMutex
	loopArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*model.Value
		arg4 *model.SCG
		arg5 model.DataHandle
		arg6 *string
		arg7 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeLooper) Loop(arg1 context.Context, arg2 string, arg3 map[string]*model.Value, arg4 *model.SCG, arg5 model.DataHandle, arg6 *string, arg7 string) {
	fake.loopMutex.Lock()
	fake.loopArgsForCall = append(fake.loopArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*model.Value
		arg4 *model.SCG
		arg5 model.DataHandle
		arg6 *string
		arg7 string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("Loop", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.loopMutex.Unlock()
	if fake.LoopStub != nil {
		fake.LoopStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
}

func (fake *fakeLooper) LoopCallCount() int {
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	return len(fake.loopArgsForCall)
}

func (fake *fakeLooper) LoopCalls(stub func(context.Context, string, map[string]*model.Value, *model.SCG, model.DataHandle, *string, string)) {
	fake.loopMutex.Lock()
	defer fake.loopMutex.Unlock()
	fake.LoopStub = stub
}

func (fake *fakeLooper) LoopArgsForCall(i int) (context.Context, string, map[string]*model.Value, *model.SCG, model.DataHandle, *string, string) {
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	argsForCall := fake.loopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *fakeLooper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeLooper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
