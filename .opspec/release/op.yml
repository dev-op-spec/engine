description: performs a release
name: release
inputs:
  dockerDSocket:
    socket:
      description: socket for docker daemon
  dockerPassword:
    string:
      constraints: { minLength: 1 }
      description: password for docker registry
      isSecret: true
  dockerUsername:
    string:
      constraints: { minLength: 1 }
      description: username for docker registry
  equinoxSigningKey:
    string:
      description: signing key for artifacts published to equinox.io
      isSecret: true
  equinoxToken:
    string:
      constraints: { minLength: 1 }
      description: equinox.io auth token
      isSecret: true
  gitBranch:
    string:
      constraints: { minLength: 1 }
      description: git branch the coverage should be associated with
      default: master
  srcDir:
    dir:
      default: .
      description: directory containing the projects source code
  version:
    string:
      constraints: { format: semver }
      description: version of opctl being released
run:
  serial:
    - op:
        pkg: { ref: set-version }
        inputs: { srcDir, version }
        outputs: { srcDir }
    - op:
        pkg: { ref: build }
        inputs: { srcDir, gitBranch }
        outputs: { srcDir }
    - op:
        pkg: { ref: release/to-equinox }
        inputs: { equinoxSigningKey, equinoxToken, srcDir, version }
    - op:
        pkg: { ref: release/to-docker }
        inputs: { dockerDSocket, dockerPassword, dockerUsername, version }
    
    # run last to give equinox.io time to finish releasing
    # @TODO: determine channel from version
    - op:
        pkg: { ref: test/system/opspec }
        inputs: { srcDir, channel: alpha }
