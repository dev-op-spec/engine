description: builds the node
name: node/build
inputs:
  gitBranch:
    string:
      constraints: { minLength: 1 }
      description: git branch the coverage should be associated with
      default: master
  srcDir:
    dir:
      default: .
      description: directory containing the projects source code
outputs:
  opctlForLinux:
    file:
      description: opctl for linux binary resulting from the build
  srcDir:
    dir:
      description: directory containing the projects source code
run:
  serial:
    - op:
        pkg: { ref: ../test }
        inputs: { srcDir }
        outputs: { srcDir, coverprofile }
    - op:
        pkg: { ref: github.com/opspec-pkgs/golang.build.bin#1.1.0 }
        inputs:
          baseImport: github.com/opctl/opctl
          import: github.com/opctl/opctl/cli
          srcDir: 
        outputs:
          opctlForLinux: bin
    - op:
        pkg: { ref: ../../test/system/opspec }
        inputs:
          srcDir:
          opctlForLinux:
    - op:
        pkg: { ref: github.com/opspec-pkgs/git.resolve-commit#1.0.2 }
        inputs: { dotGitDir: $(srcDir/.git) }
        outputs: { gitCommit: commit }
    - op:
        pkg: { ref: github.com/opspec-pkgs/codecov.upload#1.1.0 }
        inputs:
          gitBranch:
          gitCommit:
          token: b432a3b8-8220-4c1d-bcee-db76e68d0128
          report: $(coverprofile)
